[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my blog! To learn more about me, check out my website here."
  },
  {
    "objectID": "posts/first-post/index.html",
    "href": "posts/first-post/index.html",
    "title": "My First Blog Post",
    "section": "",
    "text": "image.png"
  },
  {
    "objectID": "posts/first-post/index.html#why-i-started-this-blog",
    "href": "posts/first-post/index.html#why-i-started-this-blog",
    "title": "My First Blog Post",
    "section": "Why I Started This Blog",
    "text": "Why I Started This Blog\nI decided to create this blog for a few reasons:\n\nTo document my learning journey\nTo share interesting insights and ideas\nTo connect with like-minded individuals"
  },
  {
    "objectID": "posts/first-post/index.html#what-to-expect",
    "href": "posts/first-post/index.html#what-to-expect",
    "title": "My First Blog Post",
    "section": "What to Expect",
    "text": "What to Expect\nIn this blog, you can expect to find:\n\nTutorials and guides on various topics\nPersonal reflections and experiences\nInteresting projects and experiments\n\nStay tuned for more content coming soon!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dai’s blog",
    "section": "",
    "text": "My First Blog Post\n\n\n\n\n\n\ntest\n\n\nquarto\n\n\n\n\n\n\n\n\n\nJun 30, 2024\n\n\nBui Huu Dai\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Step in AI: My Experience with fast.ai Lesson 1\n\n\n\n\n\n\nblogging\n\n\nfastai\n\n\n\n\n\n\n\n\n\nJun 30, 2024\n\n\nBui Huu Dai\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-06-30-your-deep-learning-journey/index.html",
    "href": "posts/2024-06-30-your-deep-learning-journey/index.html",
    "title": "First Step in AI: My Experience with fast.ai Lesson 1",
    "section": "",
    "text": "Welcome to my deep dive in to the world of deep learning! In this blog post, I’ll be sharing my journey through the first lession of fast.ai course an acclaimed program that makes learning AI accessible and enjoyable.\nFast.ai was created with the goal of making deep learning understandable for everyone, no matter their background, and Lesson 1 accomplishes that by having us build a simple yet fascinating model: a bird classifier. this exciting task not just introduces me to the basics of deep learning but also alow me to experience firsthand the power and simplicity of modern AI tools.\nJoin me as I walk you though key conccept covered in the Lesson 1, from understanding how images are processed by computers to trainning and validating our model. I will also share some personal insights and reflections on the learning process, aiming to make this technicial journey both infomative and relatable.\nWhether you are a bigginer in AI or someone looking for refresh your knowledge, I hope this post inspires and guides you in your own deep learning"
  },
  {
    "objectID": "posts/2024-06-30-your-deep-learning-journey/index.html#introduction",
    "href": "posts/2024-06-30-your-deep-learning-journey/index.html#introduction",
    "title": "First Step in AI: My Experience with fast.ai Lesson 1",
    "section": "",
    "text": "Welcome to my deep dive in to the world of deep learning! In this blog post, I’ll be sharing my journey through the first lession of fast.ai course an acclaimed program that makes learning AI accessible and enjoyable.\nFast.ai was created with the goal of making deep learning understandable for everyone, no matter their background, and Lesson 1 accomplishes that by having us build a simple yet fascinating model: a bird classifier. this exciting task not just introduces me to the basics of deep learning but also alow me to experience firsthand the power and simplicity of modern AI tools.\nJoin me as I walk you though key conccept covered in the Lesson 1, from understanding how images are processed by computers to trainning and validating our model. I will also share some personal insights and reflections on the learning process, aiming to make this technicial journey both infomative and relatable.\nWhether you are a bigginer in AI or someone looking for refresh your knowledge, I hope this post inspires and guides you in your own deep learning"
  },
  {
    "objectID": "posts/2024-06-30-your-deep-learning-journey/index.html#the-xkcd-joke-and-debunking-deep-learning-myths",
    "href": "posts/2024-06-30-your-deep-learning-journey/index.html#the-xkcd-joke-and-debunking-deep-learning-myths",
    "title": "First Step in AI: My Experience with fast.ai Lesson 1",
    "section": "The XKCD Joke and Debunking Deep Learning Myths",
    "text": "The XKCD Joke and Debunking Deep Learning Myths\n\n\n\n\nXKCD Joke\n\n\nJeremy Howard kicked off the lesson with relatable XKCD Joke about how in 2015, detecting a bird in a photo was seen as a challenging task, almost a joke. Fast forward to today, and we can build such as system in mere minutes, showcasing how far deep learning has come.\nMany people believe that diving into deep learning requires extensive mathematical knowledge, huge datasets, and expensive hardware. However, these myths are far from the truth.\n\n\n\n\n\n\n\nMyth(Don’t need)\nTruth\n\n\n\n\nLots of math\nJust high school math is sufficient\n\n\nLots of data\nWe’ve seen record-breaking results with fewer than 50 items of data\n\n\nLots of expensive computer\nYou can perform state-of-the-art work with hardwere available for free of minimal cost"
  },
  {
    "objectID": "posts/2024-06-30-your-deep-learning-journey/index.html#top-down-learning-approach",
    "href": "posts/2024-06-30-your-deep-learning-journey/index.html#top-down-learning-approach",
    "title": "First Step in AI: My Experience with fast.ai Lesson 1",
    "section": "Top-Down Learning Approach",
    "text": "Top-Down Learning Approach\nOne of the most refreshing aspects of fastai course is its top-down teaching approach. Traditional education often starts with the basics and slowly builds up to more complex topics. However, Jeremy Howard and Rachel Thomas believe that learning is more effective when you see the big picture first.\nIn the fastai course, we start by building practicall applications from lession one, allowing us to see immediate results and understanding the relevance of what we are doing. This approach mirrors how we learn many real-word skills, such as sport or cooking, where we start by trying out the activity and learn the details as needed.\nBy diving straight into creating a deep learning model, we get hands-on experience early on, which helps solidify our understanding and maintain our interest. As we process though the course, we gradually delve deeper into the underlying principles and theories, bulding a robust foundation along the way"
  },
  {
    "objectID": "posts/2024-06-30-your-deep-learning-journey/index.html#understanding-deep-learning",
    "href": "posts/2024-06-30-your-deep-learning-journey/index.html#understanding-deep-learning",
    "title": "First Step in AI: My Experience with fast.ai Lesson 1",
    "section": "Understanding Deep learning",
    "text": "Understanding Deep learning\nDeep learning is a technique for extracting and transforming data, with application ranging from speech recognition to image classification. It uses multiple layer of neural networks, where each layer refines the data received from the previous one. These layers are trained using the algorithms that minimize the errors and improve accuracy, enabling the network to learn specific tasks.\nDeep learning’s power, flexibility, and simplicity make it applicable across various field, including social science, medicine, finance, and more. For instance, despite lacking of medical background, Jeremy Howard founded Enlitic, a company leveraging deep learning to diagnose illnesses. Within months, their algorithm was more effective at identifying malignant tumors than radiologists.\nHere are some areas where deep learing excels:\n\nNatural Language Processing (NLP): Answering question, speech recognition, document summarization, and more.\nComputer Vision: Interpreting satellite images, face recognition, and automous vehicle navigation.\nMedicine: Analyzing radiology images, measuring features and medical scans, and diagnosing diseases.\nBiology: Protein folding, genomics tasks, and cell classification.\nImage Generation: Colorizing images, enhancing resolution, and converting images to artistic style.\nRecommendation System: Web search optimization, product recommendations, and personalized content layout.\nGaming: Mastering games like Chess, Go, and various video games.\nRobotics: Handling challenging objects and complex manipulation tasks.\nOther: Financial forecasting, text-to-speech conversion, and much more.\n\nThe versatility of deep learning lies in its foundation: neuron networks."
  },
  {
    "objectID": "posts/2024-06-30-your-deep-learning-journey/index.html#a-brief-history-of-deep-learning",
    "href": "posts/2024-06-30-your-deep-learning-journey/index.html#a-brief-history-of-deep-learning",
    "title": "First Step in AI: My Experience with fast.ai Lesson 1",
    "section": "A Brief History of Deep Learning",
    "text": "A Brief History of Deep Learning\n\n\n\n\nBiological Neurons vs. Artificial Neural Network\n\n\nDeep learning draws inspiration from human brain’s neural network. The concept of neural network isn’t new; it dates back to 1957 with the creation of the first neural network. The fundamental ideas remain the same today, but advances in hardware and data availability have significantly propelled the field forward."
  },
  {
    "objectID": "posts/2024-06-30-your-deep-learning-journey/index.html#the-sofware-pytorch-fastai-and-jupyter",
    "href": "posts/2024-06-30-your-deep-learning-journey/index.html#the-sofware-pytorch-fastai-and-jupyter",
    "title": "First Step in AI: My Experience with fast.ai Lesson 1",
    "section": "The Sofware: Pytorch, Fastai, and Jupyter",
    "text": "The Sofware: Pytorch, Fastai, and Jupyter\nAt fastai, after extensive testing of various machine learning packages and languages, they decided to adopt Pytorch in 2017 for their course, software development, and research. Pytorch has become the fastest-growing deep learning library and is widely used in academic research and industry. Its flexibiligy and expressiveness make it an excellent foundation for deep learning.\nThe fastai library builds on top of Pytorch, provide high-level functionality for deep learning. This layered architecture allows for a seemless learning experience, make it easier to understand both high-level concepts and low-level operations.\nHowever, the specific software you use a less important than understanding the core principles and techniques of deep learning. Learning to trasition between the libraries is relatively quick, but mastering deep learning foundation is crucial.\nJupyter notebook, a powerful and reflexible tool for data science, will be our primary platform for experimentation. Its interation with fastai and Pytorch makes it ideal for developing and testing deep learning model.\nReady to see it in action? Let’s train our first model!"
  },
  {
    "objectID": "posts/2024-06-30-your-deep-learning-journey/index.html#exploring-the-is-it-a-bird-classifier",
    "href": "posts/2024-06-30-your-deep-learning-journey/index.html#exploring-the-is-it-a-bird-classifier",
    "title": "First Step in AI: My Experience with fast.ai Lesson 1",
    "section": "Exploring the “Is it a Bird?” Classifier",
    "text": "Exploring the “Is it a Bird?” Classifier\nOne of the most exciting part of Lesson 1 was building our own image classifier to determine whether the a given image contains a bird. For this project, we used the fastai libray along with pre-trained model to quickly and efficiently create our classifier. Let’s dive into the code walkthrouh.\nThe basic steps we’ll need to do:\n\nUse DuckDuckGo for search images of “bird photos”\nUse DuckDuckGo to search for images of “forest photos”\nFine-tune a pretrained neural network to recognise these two groups\nTry running this model on a picture of bird and see if it works.\n\n\nSearching for images: DuckDuckGo Search\nInstead of using a big search that reqires an API key, we opted to DuckDuckGo, which doesn’t reqire an API key for image searches. This make the setup simpler and faster.\nBut make sure you run this command in your terminal before run the code to update duckduckgo\npip install -Uqq fastai duckduckgo_search\n\nfrom duckduckgo_search import DDGS\nfrom fastcore.all import *\n\nddgs = DDGS()\n\ndef search_images(term, max_images=30):\n    print(f\"Searching for '{term}'\")\n    return L(ddgs.images(keywords=term, max_results=max_images)).itemgot('image')\n\n\nurls = search_images('bird photos', max_images=1)\nurls[0]\n\nSearching for 'bird photos'\n\n\n'https://images.pexels.com/photos/326900/pexels-photo-326900.jpeg?cs=srgb&dl=wood-flight-bird-326900.jpg&fm=jpg'\n\n\nJeremy Howard mentioned that using import * in Jupyter notebooks is not the big deal because Jupyter only import what we use. This approach simplifies the code and keeps it clean.\nHere’s the quick explaination of the functions and libraries used in this snippet:\n\nDDGS from duckduckgo_search:\n\nduckduckgo_search: This library allows us to search for iamges using DuckDuckGo without the need for an API key.\nDDGS: This class handles the image search functionality within DuckDuckGo.\n\nfastcore:\n\nfastcore: A foundational library that provide utilities and functions making Python code more concise and expressive.\n\nL:\n\nL: A specialized list class provided by fastcore that extends Python’s built-in list with additional functionality, make it more powerfull and convinient.\n\n\nIn our example, search_images is a function that performs an image search using DuckDuckGo. It’s print out the search term being used and return a list of images URLs retrieved from the search results.\nfor more details on the tools, you can refer to the fastcore documentation and the duckduckgo_search documentation.\n\nfrom fastdownload import download_url\ndest = 'bird.jpg'\ndownload_url(urls[0], dest, show_progress=False)\n\nfrom fastai.vision.all import *\nim = Image.open(dest)\nim.to_thumb(256,256)\n\n\n\n\n\n\n\n\n\ndownload_url(search_images('forest photos', max_images=1)[0], 'forest.jpg', show_progress=False)\nImage.open('forest.jpg').to_thumb(256,256)\n\nSearching for 'forest photos'\n\n\n\n\n\n\n\n\n\n\nfastdownload and download_url:\n\nfastdownload: This is a library that helps with downloading files and dataset easily.\ndownload_url: A function from fastdownload that download a file from a URL. In our example, it downloads an image and saves it as a bird.jpg\n\nfastai.vision.all:\n\nThis module from fastai library provides all the necessary tools for vision task, including data loaders, transformation functions, and model architectures.\n\nto_thumb:\n\nA method from the PIL.Image class, which is quite handy. It resizes an image to a thumbnail while mainting the espect rato. In this case it resizes the download image to a 256x256 thumbnail.\n\n\nThese libraries and function streamline the process of getting and preparing the images for our model. For more detailed documentation, you can refer to the fastdownload, fastai vision, and Pillow documentation.\n\nsearches = 'forest','bird'\npath = Path('bird_or_not')\nfrom time import sleep\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} photo'))\n    sleep(10)  # Pause between searches to avoid over-loading server\n    download_images(dest, urls=search_images(f'{o} sun photo'))\n    sleep(10)\n    download_images(dest, urls=search_images(f'{o} shade photo'))\n    sleep(10)\n    resize_images(path/o, max_size=400, dest=path/o)\n\nSearching for 'forest photo'\nSearching for 'forest sun photo'\nSearching for 'forest shade photo'\nSearching for 'bird photo'\nSearching for 'bird sun photo'\nSearching for 'bird shade photo'\n\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n0\n\n\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n    \ndls.show_batch(max_n=6)\n\n\n\n\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n100%|██████████| 44.7M/44.7M [00:00&lt;00:00, 112MB/s] \n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.961129\n0.898895\n0.411765\n00:11\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.175680\n0.112270\n0.029412\n00:15\n\n\n1\n0.097206\n0.023054\n0.000000\n00:14\n\n\n2\n0.067422\n0.008220\n0.000000\n00:14\n\n\n\n\n\n\nis_bird,_,probs = learn.predict(PILImage.create('bird.jpg'))\nprint(f\"This is a: {is_bird}.\")\nprint(f\"Probability it's a bird: {probs[0]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: bird.\nProbability it's a bird: 1.0000"
  }
]
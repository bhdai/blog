<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Bui Huu Dai</title>
<link>https://bhdai.github.io/blog/</link>
<atom:link href="https://bhdai.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Dai&#39;s blog.</description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Sat, 12 Jul 2025 17:00:00 GMT</lastBuildDate>
<item>
  <title>A brief history of computer vision and deep learning</title>
  <dc:creator>Bui Huu Dai</dc:creator>
  <link>https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/</link>
  <description><![CDATA[ 






<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/cover_image.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="“A split scene: on one side, an old master painter (think Da Vinci) painting a realistic portrait, and on the other, a futuristic robot painting a digital image using code or neural networks as its brush strokes”, generated by DALL·E 3"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/cover_image.png" class="img-fluid figure-img" alt="“A split scene: on one side, an old master painter (think Da Vinci) painting a realistic portrait, and on the other, a futuristic robot painting a digital image using code or neural networks as its brush strokes”, generated by DALL·E 3"></a></p>
<figcaption>“A split scene: on one side, an old master painter (think Da Vinci) painting a realistic portrait, and on the other, a futuristic robot painting a digital image using code or neural networks as its brush strokes”, generated by DALL·E 3</figcaption>
</figure>
</div>
<p>My goal over the next ten weeks or so is to have a deep, foundational understanding of the principles and practices that are driving the state-of-the-art in visual intelligence. So to begin our journey, I find it useful to first situate what we will be studying within a broader intellectual landscape. We can start with the most encompassing field: Artificial Intelligence.</p>
<section id="our-place-on-the-ai-map" class="level2">
<h2 class="anchored" data-anchor-id="our-place-on-the-ai-map">Our place on the AI map</h2>
<p>AI is the grand, overarching ambition. It’s the quest to build machines that can perform tasks that have historically required human intelligence (tasks like reasoning, planning, and perception). It’s a field with a long and rich history, full of profound philosophical questions and formidable engineering challenges.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/a-broad-view.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Where are we at? A broad view of the field of AI - Image inspired by Justin Johnson"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/a-broad-view.png" class="img-fluid figure-img" style="width:80.0%" alt="Where are we at? A broad view of the field of AI - Image inspired by Justin Johnson"></a></p>
<figcaption>Where are we at? A broad view of the field of AI - Image inspired by Justin Johnson</figcaption>
</figure>
</div>
<p>Now, AI is an enormous domain. Within it, we can delineate several major sub-disciplines. Two of the most significant are <strong>Machine Learning</strong> and <strong>Computer Vision</strong>. <strong>Machine learning</strong> is a specific approach to achieving AI. Instead of explicitly programming a machine with a set of handcrafted rules to solve a task, the machine learning paradigm is to develop algorithms that allow machine to learn the rules by itself, by analyzing data. This shift from rule-based system to data-driven system is a fundamental concept that we will return to again and again. Then we have <strong>Computer Vision</strong>. This is the scientific and engineering discipline dedicated to a different goal: enabling machines to see. That is, to take in visual information from the world, from images, from video and to derive understanding from it. These two fields have a significant and ever-growing intersection. While there exists a body of classical computer vision work that does not rely on machine learning, think of the techniques from computational geometry or signal processing but the most powerful and prevalent methods in modern computer vision are fully rooted in machine learning.</p>
<p>Now let’s zoom in one level deeper. Within Machine Learning, a particular subfield has emerged over the last decade or so that has completely revolutionized the landscape. And that is <strong>Deep Learning</strong>. Deep learning is a specific class of machine learning algorithms. The defining characteristic is the use of neural networks with many layers, hence “deep” networks. These architectures, as we will go into great detail, have proven to be exceptionally effective at learning intricate patterns and hierarchical representations from vast amounts of data.</p>
<p>This brings us to the core focus of our discussion. The intersection of <strong>Deep Learning</strong> and <strong>Computer Vision</strong>. The red area on the diagram above is where we will spend our time. Our objective is to understand and implement deep learning architectures and methodologies that are purpose-built to solve computer vision problems. This convergence is responsible for nearly all of the dramatic breakthroughs in visual perception you may have seen in recent years.</p>
<p>However, it’s crucial to understand that while our focus is on vision, deep learning is not exclusively a tool for computer vision. It is a general-purpose computational paradigm that has had a similar transformative impact on other fields of AI. For example, another major subfield is <strong>Natural Language Processing</strong>, or NLP, which deals with enabling computers to understand and generate human language. And a closely related field is <strong>Speech Recognition</strong>, which focuses on converting spoken language into text. Both NLP and Speech have been fundamentally reshaped by the application of deep learning models.</p>
<p>We can further expand our map to include fields like <strong>Robotics</strong>. Robotics is an inherently integrated discipline. A truly autonomous robot must perceive its environment (which is a core computer vision problem) and then decide how to act, which often evolves from experience(a machine learning problem). Therefore, robotics draws heavily from both computer vision and machine learning and increasingly, deep learning is the unifying methodology.</p>
<p><strong>Mathematics</strong>, particularly linear algebra, probability, and calculus, provides the formal language and the core tools we use to define and optimize our models. <strong>Neuroscience</strong> and <strong>Psychology</strong> provide the biological inspiration for our network architectures and offer insights into the nature of intelligence itself. We also have <strong>Physics</strong> because we need to understand optics and image formation and how images are actually formed. We need to understand <strong>Biology</strong> and <strong>Psychology</strong> how the animal brain physically sees and processes visual information. And of course, all of this is built upon the substrate of <strong>Computer Science</strong> which gives us the algorithms, data structures, and high-performance computing systems necessary to make these computationally intensive ideas a reality.</p>
<p>Finally, it’s imperative to recognize that none of these fields exists in a vacuum. They are built upon and draw inspiration from a wide array of fundamental scientific disciplines. So while we will live in that red intersection of deep learning and computer vision, I want you to maintain this broader perspective. The work we do here connects to a rich and interdisciplinary tapestry of human knowledge.</p>
</section>
<section id="why-vision-from-first-eye-to-billion-cameras" class="level2">
<h2 class="anchored" data-anchor-id="why-vision-from-first-eye-to-billion-cameras">Why vision? From first eye to billion cameras</h2>
<p>Alright, so that gives you the sense of the intellectual landscape so let’s begin with the history. And to truly appreciate the motivation of our field i find it instructive to go back… quite a long way.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/the-dawn-of-vision.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Early multicellular life and the dawn of vision. All images from Wikipedia / CC‑BY. Left: Burgess Shale trilobite fossil preserving antennae and legs. Top right: Dickinsonia costata, a quilted Ediacaran organism of unknown affinity. Bottom right: Artistic reconstruction of Opabinia, the five‑eyed Cambrian critter that helped ignite interest in the Cambrian explosion."><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/the-dawn-of-vision.png" class="img-fluid figure-img" style="width:80.0%" alt="Early multicellular life and the dawn of vision. All images from Wikipedia / CC‑BY. Left: Burgess Shale trilobite fossil preserving antennae and legs. Top right: Dickinsonia costata, a quilted Ediacaran organism of unknown affinity. Bottom right: Artistic reconstruction of Opabinia, the five‑eyed Cambrian critter that helped ignite interest in the Cambrian explosion."></a></p>
<figcaption>Early multicellular life and the dawn of vision. All images from <a href="https://en.wikipedia.org/wiki/Cambrian_explosion">Wikipedia / CC‑BY</a>. Left: Burgess Shale trilobite fossil preserving antennae and legs. Top right: Dickinsonia costata, a quilted Ediacaran organism of unknown affinity. Bottom right: Artistic reconstruction of Opabinia, the five‑eyed Cambrian critter that helped ignite interest in the Cambrian explosion.</figcaption>
</figure>
</div>
<p>Roughly 540 million years ago, our planet experienced a period of unprecedentedly rapid diversification of complex, multicellular life. This is known as the Cambrian Explosion. And a leading scientific hypothesis for what acted as the primary catalyst for this “big bang” of evolution… was the advent of vision.</p>
<p>The development of the first primitive eyes created an enormous new set of evolutionary pressures. For the very first time, organisms could actively hunt, evade predators, and navigate their environment with a richness of information that was previously unimaginable. In a very real sense the ability to see changed the rules of life on Earth, and may have been the driving force behind the development and much of the biological complexity we see today.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/eyes.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Octopus camera-type eye, insect compound eye, chameleon turret eye, human binocular eye."><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/eyes.png" class="img-fluid figure-img" style="width:80.0%" alt="Octopus camera-type eye, insect compound eye, chameleon turret eye, human binocular eye."></a></p>
<figcaption>Octopus camera-type eye, insect compound eye, chameleon turret eye, human binocular eye.</figcaption>
</figure>
</div>
<p>And the legacy of that ancient innovation is all around us. Vision is a powerful example of convergent evolution. It has been independently invented by nature dozens of times across the tree of life. From the compound eyes of insects, which excel at detecting motion, to the incredibly sophisticated camera-like eyes of octopus, to the remarkable independently moving eyes of a chameleon… and of course, to our own visual system. The fact that evolution has arrived at the solution of “the eye” so many times underscores it profound utility as a mechanism for interacting with the world</p>
<p>For most of history vision was a purely biological phenomenon. But humanity has long been obsessed with capturing what we see, with creating an external record of our vision perception.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/camera-obscura.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="The Camera Obscura. Top right: first published picture of camera obscura, in Gemma Frisius’ 1545. Bottom right: Leonardo da Vinci, 16th Century AD. Left: camera obscura in Encyclopedia, 18th Century (all images from From Wikipedia, the free encyclopedia)"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/camera-obscura.png" class="img-fluid figure-img" style="width:100.0%" alt="The Camera Obscura. Top right: first published picture of camera obscura, in Gemma Frisius’ 1545. Bottom right: Leonardo da Vinci, 16th Century AD. Left: camera obscura in Encyclopedia, 18th Century (all images from From Wikipedia, the free encyclopedia)"></a></p>
<figcaption>The Camera Obscura. Top right: first published picture of camera obscura, in Gemma Frisius’ 1545. Bottom right: Leonardo da Vinci, 16th Century AD. Left: camera obscura in Encyclopedia, 18th Century (all images from <a href="https://en.wikipedia.org/wiki/Camera_obscura">From Wikipedia, the free encyclopedia</a>)</figcaption>
</figure>
</div>
<p>This quest leads us to one of the most foundational principles in the history of imaging: The Camera Obscura, which is Latin for “dark chamber”. As early as the 16th century, and with principles understood even in antiquity, scholars and artists recognized that if you have a darkened enclosure with a small aperture, an inverted image of the external scene is projected into the opposite wall. This is the fundamental principle upon which all photography and even modern cameras is built. It represents the first critical step in humanity’s attempt to externalize the scene of sight.</p>
<p>Now, if we fast-forward from the simple pinhole in a dark room to the 21st century, the consequence of that is… staggering.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/cv-everywhere.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Computer vision is now everywhere. First row, left to right: [1], [2], [3], [4]. Second row, left to right: [1], [2], [3], [4]. Third row, left to right: [1], [2], [3], [4]"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/cv-everywhere.png" class="img-fluid figure-img" alt="Computer vision is now everywhere. First row, left to right: [1], [2], [3], [4]. Second row, left to right: [1], [2], [3], [4]. Third row, left to right: [1], [2], [3], [4]"></a></p>
<figcaption>Computer vision is now everywhere. First row, left to right: <a href="https://www.flickr.com/photos/sskennel/466632815">[1]</a>, <a href="https://pixabay.com/en/camera-lens-photographer-photo-193664/">[2]</a>, <a href="https://pixabay.com/en/drone-aerial-photo-djee-1142182/">[3]</a>, <a href="https://www.pexels.com/photo/red-hand-iphone-smartphone-80673/">[4]</a>. Second row, left to right: <a href="https://www.pexels.com/photo/woman-holding-a-white-samsung-galaxy-android-smartphone-taking-a-photo-of-hallway-38266/">[1]</a>, <a href="https://pixabay.com/en/selfie-couple-photography-dragooste-1363970/">[2]</a>, <a href="https://www.flickr.com/photos/gsfc/8145474144">[3]</a>, <a href="https://pixabay.com/p-1566884/">[4]</a>. Third row, left to right: <a href="https://www.pexels.com/photo/police-blue-sky-security-surveillance-96612/">[1]</a>, <a href="https://www.flickr.com/photos/dkeats/6363420863">[2]</a>, <a href="https://commons.wikimedia.org/wiki/File:Dashcams_P1210466.JPG">[3]</a>, <a href="https://commons.wikimedia.org/wiki/File:Google_Glass_detail.jpg">[4]</a></figcaption>
</figure>
</div>
<p>The reason we have a field called computer vision today is, in large part, because the sensors of vision (cameras) are utterly ubiquitous. They are in our pocket, in our cars, in our homes, attached to drones, flying through the air, and even roving the surface of other planets.</p>
<p>The proliferation of inexpensive, high-resolution digital cameras has resulted in an unprecedented deluge of visual data. More images are now captured every two minutes than were captured in the entire 19th century. This vast sea of pixels is the raw material, the fuel, that powers the deep learning models we will talk about a lot.</p>
<p>So this brings us to a critical question. We have this deep, biological imperative for vision, and we have this modern technological reality of ubiquitous cameras generating near-infinite data. Given this perfect storm of motivation and raw material… how did the scientific engineering discipline of <em>Computer Vision</em> actually come to be? Where did we, as a field, come from?</p>
</section>
<section id="neuroscience-lights-the-way" class="level2">
<h2 class="anchored" data-anchor-id="neuroscience-lights-the-way">Neuroscience lights the way</h2>
<p>The story often begins not in computer science but in neuroscience. In 1959, two neuroscientists, David Hubel and Torsten Wiesel, conducted a series of now-famous experiments for which they would later win the Nobel Prize. They sought to understand the architecture of the mammalian visual system. They did this by inserting microelectrodes into the primary visual cortex—the first cortical area to receive input from the eyes of an anesthetized cat. They then presented the cat with very simple visual stimuli on a screen—things like bars of light, dots, or oriented edges.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/neuroscience.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Hubel &amp; Wiesel’s classic 1959 cat–visual‑cortex experiment (image inspired by Justin Johnson)"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/neuroscience.png" class="img-fluid figure-img" style="width:80.0%" alt="Hubel &amp; Wiesel’s classic 1959 cat–visual‑cortex experiment (image inspired by Justin Johnson)"></a></p>
<figcaption>Hubel &amp; Wiesel’s classic 1959 cat–visual‑cortex experiment (image inspired by Justin Johnson)</figcaption>
</figure>
</div>
<p>What they discovered was remarkable. They found that individual neurons in the brain region were not responding to complex concepts like “a mouse” or “a food bowl”. Rather, they were highly specialized feature detectors. They identified two principal classes of cells. First, <strong>simple cells</strong>. A given simple cell would fire vigorously as shown in the top response graph, only when a bar of light with a very specific orientation appeared at a very specific location in the visual field. If the orientation was wrong, or if the stimulus was just a dot, the neuron remained silent. Then they found <strong>complex cells</strong>. These cells also respond to oriented edges, but they were invariant to the precise location of that edge within their receptive field. As you can see on the diagram, the bar can move, or translate, and the complex cell continues to fire. Many were also tuned to the direction of motion.</p>
<p>This discovery was profoundly influential. It provided the first biological evidence for a hierarchical visual processing system. Where the initial stages are dedicated to detecting simple, local features like oriented edges. This idea of building up complex recognition from a hierarchy of simple feature detectors is a cornerstone of modern computer vision, and as we will see, it is the fundamental architectural principle behind convolutional neural networks.</p>
<p>Just a few years later, inspired in part by this new understanding of biological vision, the field of computer vision had its genesis. Larry Robert’s 1963 PhD thesis MIT is widely considered to be the seminal work.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/edge-detector.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="Roberts’s 1963 “block world” vision pipeline (image from epicsysinc)"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/edge-detector.png" class="img-fluid figure-img" style="width:50.0%" alt="Roberts’s 1963 “block world” vision pipeline (image from epicsysinc)"></a></p>
<figcaption>Roberts’s 1963 “block world” vision pipeline (image from <a href="https://www.epicsysinc.com/blog/machine-vision-history-3/">epicsysinc</a>)</figcaption>
</figure>
</div>
<p>His system aimed to solve what seems like a simple problem: understanding the 3D geometry of simple “block world” scenes from a single 2D image. His approach was a pipeline. First take the original image. Second compute a “differentiated picture” which is a computational method for finding sharp changes in intensity in other words, an edge detector. This is a direct computational analog of what Hubel and Wiesel’s simple cell was doing. Finally, from this edge map, he would select feature points like corners and junctions and use geometric reasoning to infer the 3D shape. This was the start: a non-learning, rule-based system that decomposed vision into a series of explicit steps: find edges, find junctions, infer geometry.</p>
<p>This early success bred a great deal of optimism. So much so that in 1966, a group at MIT, led by Seymour Papert, proposed what is now famously known as <a href="https://dspace.mit.edu/handle/1721.1/6125">“The Summer Vision Project”</a>. The idea was, now we’ve got digital cameras, now they can detect edges, and Hubel and Wiesel told us how the brain works so basically what he wanted to do is hang a couple undergrads put them to work over the summer and after the summer we show it we should be able to construct a significant portion of visual system. The ambition was, in essence, to largely solve the problem of vision in a single summer by breaking it down into sub-problems. This, of course, turned out to be a profound underestimation of the problem’s difficulty. Now it’s clearly the computer vision was not solved and nearly 60 years later we’re still plugging away trying to achieve this what they thought they could do it in a summer with few undergrads. But it speaks to the excitement and perceived tractability of the field in its infancy.</p>
<p>Following this period of excitement and subsequent realization of the problem’s true depth, the field entered a phase of more systematic, theoretical thinking. The most influential of this era was David Marr.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/recognition-via-part.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="Stages of Visual Representation, David Marr, 1970s. Bottom right: Recognition via Parts (1970s)"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/recognition-via-part.png" class="img-fluid figure-img" alt="Stages of Visual Representation, David Marr, 1970s. Bottom right: Recognition via Parts (1970s)"></a></p>
<figcaption>Stages of Visual Representation, David Marr, 1970s. Bottom right: Recognition via Parts (1970s)</figcaption>
</figure>
</div>
<p>In the 1970s, Marr proposed a comprehensive framework for how a visual system should be structured. He argued for a staged, bottom-up pipeline. You start with an input image just an array of pixel intensities. The first stage is to compute what he called the <strong>Primal Sketch</strong>. This is a representation of 2D image structure, identifying primitive elements like zero-crossing, edges, bars, and blobs. Again, you see the direct intellectual lineage from Hubel and Wiesel. From the Primal Sketch, the system would then compute the <strong>2.5-D Sketch</strong>. This is a viewer-centric representation that captures local surface orientation and depth discontinuities. It’s not a full 3D model, but rather a map of how surfaces are angled relative to the observer. Finally from the 2.5-D Sketch, the system would construct a full, object-centered <strong>3-D Model Representation</strong>, describing the shapes and their spatial arrangement in a way that is independent from the viewpoint. This framework was immensely influential and guided vision research for many years.</p>
<p>Marr’s ideas spurred a great deal of research into how one might actually represent these 3D models. One popular idea from the 1970s was “Recognition via Parts”. One formulation of this was the idea of <strong>Generalized Cylinders</strong> proposed by Brooks and Binfold. The concept is to represent complex objects as a composition of simple, parameterized volumetric primitives like cylinders. A human figure can be modeled as an articulated collection of these cylinders. Another related idea was that of <strong>Pictorial Structure</strong>, from Fischler and Elshlager. Here, an object is represented as a collection of parts arranged in a deformable configuration, like nodes, connected by springs. This captures both the appearance of the parts and their plausible spatial relationships. Both of these are instantiations of the core idea that object recognition proceeds by identifying constituent parts and their arrangement.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/canny-edge-detection.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="Recognition via Edge Detection (1980s) - Edge detection algorithms by John Canny, 1986"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/canny-edge-detection.png" class="img-fluid figure-img" style="width:80.0%" alt="Recognition via Edge Detection (1980s) - Edge detection algorithms by John Canny, 1986"></a></p>
<figcaption>Recognition via Edge Detection (1980s) - Edge detection algorithms by John Canny, 1986</figcaption>
</figure>
</div>
<p>Throughout the 1980s, much of the field’s energy was focused on perfecting the very first stage of Marr’s pipeline: edge detection. The thinking was that if we could just produce a perfect line drawing of the world from an image, as you see on the right, the subsequent steps of recognition would be much more tractable. This led to seminal work on edge detection algorithms, most famously by John Canny in 1986, whose algorithm is still baseline today, and also by David Lowe, whom we will encounter again later. The field became very good at turning images of things like those razors into learn edge maps.</p>
<p>Now, zooming out to the broader context of artificial intelligence during this period… something important was happening. The field was entering what became known as an “AI winter”. The massive enthusiasm and, critically, the government funding for AI research began to dwindle. This was largely the dominant paradigm of the time, so-called “Expert Systems” which tried to encode human expertise in vast, handcrafted rule-bases had failed on their very grandiose promise. However, this didn’t mean that research stopped. Instead, the subfield of AI, like computer vision, NLP, and robotics, continued to mature. They grew into more distinct disciplines, focusing on their own specific problems and developing their own specialized techniques, often with less of the grand, unifying ambition of the early AI pioneers.</p>
<p>But in the meantime.. while this entire arc of “classical” computer vision was unfolding, from Hubel and Wiesel to Marr to edge detector… another set of ideas, also with roots in neuroscience and cognitive science, was developing in parallel. And it is this other thread of history that will ultimately lead us to the “deep learning” part.</p>
</section>
<section id="learning-to-find-faces-in-a-crowd" class="level2">
<h2 class="anchored" data-anchor-id="learning-to-find-faces-in-a-crowd">Learning to find faces in a crowd</h2>
<p>Throughout the 1970s and 80s, cognitive scientists were conducting experiments that revealed just how complex and sophisticated the human system truly is, often in ways that these early models couldn’t account for.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/irving-biederman-experiment.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11" title="Irving Biederman’s experiment in the early 1970s."><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/irving-biederman-experiment.png" class="img-fluid figure-img" alt="Irving Biederman’s experiment in the early 1970s."></a></p>
<figcaption>Irving Biederman’s experiment in the early 1970s.</figcaption>
</figure>
</div>
<p>One such piece of work comes from Irving Biederman in the early 1970s. He represented subjects with images like the one you see on the left—a coherent, real-world scene. Unsurprisingly, people can recognize this scene and its constituent objects almost instantaneously. But then he would show them an image like the one on the right, which contains the exact image patches, but jumped into a non-sensical configuration. Recognition of the individual objects in this jumbled scene is significantly slower and more difficult. This simple but elegant experiment demonstrates a crucial point: our visual system doesn’t just recognize isolated parts. It relies heavily on the global context and the plausible spatial arrangement of those parts. The “whole” is more, and is processed differently than, the sum of its parts. This posed a significant challenge to a purely bottom-up, part-based recognition pipeline.</p>
<p>Another line of inquiry focused on the sheer speed of human vision. A common experimental paradigm used to study this is called Rapid Serial Visual Perception, or RSVP. The setup is simple: a subject fixates on a cross at the center of a screen, and images are flashed in very rapid succession often for only a few tens of milliseconds each.</p>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row quarto-layout-valign-center">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/RSVP.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12" title="EEG signal corresponding to the brain’s responses"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/RSVP.png" class="img-fluid figure-img" alt="EEG signal corresponding to the brain’s responses"></a></p>
<figcaption>EEG signal corresponding to the brain’s responses</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><a href="./images/RSVP.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/RSVP.gif" class="img-fluid"></a></p>
</div>
</div>
</div>
<p>In 1996, Thorpe and colleagues used this RSVP paradigm in conjunction with electroencephalography, or EEG, which measures electrical activity in the brain with very high temporal resolution. They flashed images of animals and non-animals and asked subjects to perform a simple categorization task. What they found, as you can see on the plot, was outstanding. The EEG signal corresponds to the brain’s response to “animal” images, shown in darkest line, significantly diverged from the signal for “non-animal” images, shown in lightest line, at approximately 150 milliseconds after the image was presented. 150 milliseconds. To put that in perspective, a single blink of an eye takes about 300 to 400 milliseconds. This implies that the core computation underlying object recognition (from photons hitting the retina to a high-level semantic distinction) happens in a fraction of a blink. This is a critical insight that will strongly inform the design of the deep neural network we will talk about later.</p>
<p>And where in the brain is this happening? The advent of <a href="https://en.wikipedia.org/wiki/Functional_magnetic_resonance_imaging">functional Magnetic Resonance Imaging</a>, or fMRI, in the 1990s allowed researchers to start answering this question. While fMRI has poor temporal resolution, it has good spatial resolution, allowing us to see what brain regions are active during a task. Seminal work by Nancy Kanwisher and her colleagues called <a href="https://royalsocietypublishing.org/doi/10.1098/rstb.2006.1934">“The fusiform face area: a cortical region specialized for the perception of faces”</a> identified specific regions in human brain that show preferential activation for specific high-level categories. For instance they discovered a region in the fusiform gyrus, which they termed the Fusiform Face Area or FFA, that responds quickly to faces than to other objects like houses. Conversely, they found another region, the Parahippocampal Place Area or PPA, that shows opposite preference: it responds strongly to scenes like houses, but not to faces. This provided concrete evidence for semantic organization and specialization within the higher level of the visual cortex.</p>
<p>So taking stock of these findings from neuroscience and cognitive science, a clear picture emerges. Visual recognition is a fundamental, core competency of visual intelligence. And the biological solution to this problem is incredibly fast, it exploited global context, and it appears to culminate in specialized representations for semantically meaningful categories. This understanding began to shift the focus of the computer vision community itself.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/1997-2001-face-detection.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14" title="Toward face recognition (~1997–2001). Top row: output of segmentation methods (normalized‑cuts in 1997) showing region grouping into visually coherent “blobs”. Middle of timeline: SIFT (1999) introduces keypoint detection and robust local feature description based on invariant orientation and scale matching. Bottom-right: Viola–Jones face detection framework (2001) applies a cascade of Haar‑like feature classifiers to group evidence into fast, reliable face detections in real time"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/1997-2001-face-detection.png" class="img-fluid figure-img" alt="Toward face recognition (~1997–2001). Top row: output of segmentation methods (normalized‑cuts in 1997) showing region grouping into visually coherent “blobs”. Middle of timeline: SIFT (1999) introduces keypoint detection and robust local feature description based on invariant orientation and scale matching. Bottom-right: Viola–Jones face detection framework (2001) applies a cascade of Haar‑like feature classifiers to group evidence into fast, reliable face detections in real time"></a></p>
<figcaption>Toward face recognition (~1997–2001). Top row: output of segmentation methods (normalized‑cuts in 1997) showing region grouping into visually coherent “blobs”. Middle of timeline: SIFT (1999) introduces keypoint detection and robust local feature description based on invariant orientation and scale matching. Bottom-right: Viola–Jones face detection framework (2001) applies a cascade of Haar‑like feature classifiers to group evidence into fast, reliable face detections in real time</figcaption>
</figure>
</div>
<p>Coming out of the AI winter and into the 1990s, the field began to move away from pure edge detection and towards tackling the recognition problem more directly. One prominent approach was what we called “Recognition via Grouping”. The idea here is that a critical step towards recognition is to segment the image into perceptually meaningful regions. A landmark algorithm in this era was <a href="https://dl.acm.org/doi/abs/10.5555/794189.794502">Normalized Cuts</a> developed by Jianbo Shi and Jitendra Malik in 1997. As you can see, it takes an input image and groups pixels into coherent segments, effectively partitioning the image into a foreground object and a background. The underlying principle is based on graph theory, finding a cut in the pixel graph that minimizes a particular normalized cost. The thinking was, if we can achieve a good segmentation, recognition of the isolated object becomes a much simpler problem.</p>
<p>Then as we moved into the 2000s, another paradigm emerged that would become incredibly dominant: “Recognition via Matching”. The quintessential work here is <a href="https://en.wikipedia.org/wiki/Scale-invariant_feature_transform">David Lowe’s Scale-Invariant Feature Transform</a>, or SIFT, from 1999. The core innovation of SIFT was a procedure to find a set of local, high distinctive keypoints in an image and to describe them in a way that is invariant to transformation like changes in scale, image rotation, and to some extent, illumination. Recognition then becomes a task of matching these keypoint descriptors between a query image, and a database of known objects. As you can see here, the algorithm can robustly find corresponding points to the stop sign, even though it’s viewed from a different angle and at a different scale. For about a decade, feature-based methods like SIFT were the state-of-the-art for many object recognition tasks.</p>
<p>And right at the turn of the millennium, in 2001, we see a truly landmark achievement that pointed to the future. This was <a href="https://faculty.cc.gatech.edu/~hic/CS7616/Papers/Viola-Jones-2004.pdf">the face detector</a> developed by Paul Viola and Michael Jones. This was one of the first truly robust and real-time objective detections. It was so effective that it was quickly incorporated into consumer digital cameras, enabling the auto-focus-on-faces feature that we now take for granted. What was so revolutionary about the Viola-Jones detector was that it was one of the most highly successful applications of machine learning to a core computer vision problem. Instead of a human engineer meticulously designing feature to find faces, their algorithm learned a cascade of very simple rectangular features using a machine learning algorithm called AdaBoost, trained on a large dataset of positive examples (faces) and negative examples (non-faces). This was a critical turning point. It demonstrated, in a practical and impactful way, the power of a data-driven, learning-based approach over purely hand-engineered systems. And it’s this learning-based philosophy that, when taken to its extreme, will lead us to the deep learning revolution.</p>
</section>
<section id="the-rise-fall-and-return-of-neural-networks" class="level2">
<h2 class="anchored" data-anchor-id="the-rise-fall-and-return-of-neural-networks">The rise, fall, and return of Neural Networks</h2>
<p>So, we have now traced this timeline of computer vision up to the mid-2000s, We’ve seen the influence of neuroscience, the Marr paradigm, the focus on features like SIFT, and the nascent rise of machine learning. Now to understand what happens next, to understand the “deep learning” revolution we need to pause this timeline rewind all the way to the beginning, and pick up a completely different intellectual thread that was developing in parallel. This second thread also begins in the late 1950s, concurrent with Hubel and Wiesel’s discovery, in 1958, a psychologist named Frank Rosenblatt developed the <strong>Perceptron</strong>. The Perceptron was a simple computational model of a single biological neuron. It took a set of inputs, multiplied each by a corresponding weight, summed them up and if that sum exceeded a certain threshold it would output a “1”, otherwise “0”. It was simple, linear classifiers. And crucially, Rosenblatt devised a learning rule to automatically adjust the weights based on training examples.</p>
<p>However, this early enthusiasm for Perceptrons was dealt a severe blow in 1969 with the publication of the book Perceptron by Marvin Minsky and Seymour Papert. In this highly influential critique, they rigorously analyzed the mathematical properties of the single-layer Perceptron. They famously showed that there are certain, seemingly simple functions that a Perceptron is fundamentally incapable of learning. The canonical example is the logical XOR function.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/perceptron-fall.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15" title="The perceptron’s inability to solve XOR and its critique by Minsky &amp; Papert."><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/perceptron-fall.png" class="img-fluid figure-img" alt="The perceptron’s inability to solve XOR and its critique by Minsky &amp; Papert."></a></p>
<figcaption>The perceptron’s inability to solve XOR and its critique by Minsky &amp; Papert.</figcaption>
</figure>
</div>
<p>As you can see, the XOR function is true if one of its true inputs is true, but not both. If you plot the four possible input pairs, you find that you can not draw a single straight line to separate the ‘1’ outputs from ‘0’ outputs. Because the Perceptron is a linear classifier, it is mathematically impossible for it to solve this non-linearly problem. This critique was so powerful that it led to a significant decline in funding and research into neural networks, contributing to that first “AI winter” we discussed.</p>
<p>Despite this, some research continued, and in 1980, Kunihiko Fukushima in Japan developed a model called Neocognitron in a paper <a href="https://www.cs.princeton.edu/courses/archive/spr08/cos598B/Readings/Fukushima1980.pdf">“Neocognitron: A Self-organizing Neural Network Model for a Mechanism of Pattern Recognition Unaffected by Shift in Position”</a>. This is a truly remarkable piece of work, because it’s arguably the direct architectural ancestor of modern convolutional neural networks. The Neocognitron was explicitly and directly inspired by Hubel and Wiesel’s hierarchical of the visual cortex. It consisted of multiple layers, alternating between what Fukushima called S-cells and C-cells. The S-cells or simple cells, perform pattern matching using operations that are mathematically equivalent to what we now call <strong>convolution</strong>. The C-cells or complex cells, then provided spatial invariance by performing an operation analogous to what we now call <strong>pooling</strong> or subsampling. This is the fundamental architectural motif of a modern ConvNet. However, the Neocognitron had a critical limitation: it lacked a principled, end-to-end training algorithm. It was largely trained layer-by-layer with an unsupervised learning rule, and much of it was still hand-designed.</p>
<p>The missing piece of the puzzle arrived in 1986. In a landmark paper <a href="https://direct.mit.edu/books/edited-volume/5431/chapter-abstract/3958547/1986-David-E-Rumelhart-Geoffrey-E-Hinton-and?redirectedFrom=fulltext">“Learning representations by back-propagating errors”</a>, David Rumelhart, Geoffrey Hinton, and Ronald Williams popularized the backpropagation algorithm. Backpropagation is, in essence, an efficient method for computing the gradient of a loss function with respect to the weights of a multi-layered neural network. It’s a clever application of the chain rule from calculus. This algorithm provided the key that Minsky and Papert had pointed out was missing: a way to assign credit, or blame, to each neuron in each network, allowing one to systematically adjust the weights to improve performance. For the first time, it was possible to successfully train perceptrons with multiple layers, enabling them to learn non-linear function like XOR.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/lenet.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16" title="Top: Lenet, applied backprop algorithm to a Neocognitron-like architecture, learned to recognize handwritten digits. Bottom: Unsupervised pre-training technique by Hinton, Bengio, and others"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/lenet.png" class="img-fluid figure-img" alt="Top: Lenet, applied backprop algorithm to a Neocognitron-like architecture, learned to recognize handwritten digits. Bottom: Unsupervised pre-training technique by Hinton, Bengio, and others"></a></p>
<figcaption>Top: Lenet, applied backprop algorithm to a Neocognitron-like architecture, learned to recognize handwritten digits. Bottom: Unsupervised pre-training technique by Hinton, Bengio, and others</figcaption>
</figure>
</div>
<p>Now, we see the synthesis, in 1998, Yann LeCun and his colleagues took the Neocognitron architecture (with its alternating layers of convolution and pooling) and applied the backpropagation algorithm to train it from end-to-end on a real world task: recognizing handwritten digits. The resulting model, known as LeNet-5, was a tremendous success. It archived state-of-the-art performance and was deployed commercially by AT&amp;T to read handwritten checks. If you look at this architecture diagram, it is strikingly similar to the convolutional neural networks we use today. This was a powerful proof of concept, demonstrating that these neurally-inspired, trained architectures could solve real, practical problems.</p>
<p>This success spurred a small dedicated community of researchers throughout the 2000s to explore what was then beginning to be called “Deep Learning”. The central idea was to build networks that deeper and deeper, with the hypothesis that more layers would allow the learning of more complex and hierarchical features. However, this was not yet a mainstream topic. Training these very deep networks proved to be extremely difficult due to the optimization challenges like the vanishing gradient problem. Researchers like Hinton, Bengio, and others developed clever techniques, like the unsupervised pre-training shown here, to try to initialize these deep networks in a better way before fine-tuning them with backpropagation.</p>
</section>
<section id="the-dataset-that-changed-everything" class="level2">
<h2 class="anchored" data-anchor-id="the-dataset-that-changed-everything">The dataset that changed everything</h2>
<p>Alright. So, the Viola-Jones face detector in 2001 gave us a powerful glimpse into the future, showing what was possible when you replaced hand-engineered rules with data-driven machine learning. This trend toward learning-based approaches and the need to rigorously evaluate them, led to another critical development in the field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/caltech.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17" title="Left: The Caltech 101 images. Right: PASCAL Visual Object Challenge"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/caltech.png" class="img-fluid figure-img" alt="Left: The Caltech 101 images. Right: PASCAL Visual Object Challenge"></a></p>
<figcaption>Left: The Caltech 101 images. Right: PASCAL Visual Object Challenge</figcaption>
</figure>
</div>
<p>And that was the creation of standardized, large-scale benchmark datasets. Before the 2000s, it was common for researcher to test their algorithms on their own private, often small, collections of images. This made a direct, quantitative comparison of different methods exceptionally difficult. The establishment of datasets like Caltech101 in 2004, and later the PASCAL Visual Object Challenge, which ran from 2005 to 2012, was a major step in transforming computer vision into a more rigorous empirical science. PASCAL was particularly influential because it went beyond simple image classification. It challenged algorithms to perform more complex tasks like object detection drawing a bounding box around an object and semantic segmentation. These shared benchmarks created a common ground, a competitive arena, where the entire community could measure progress.</p>
<p>Still, deep learning remained something of a niche topic within a broader machine learning and computer vision community. And there was a fundamental reason for this. Even with these new algorithm tricks, these deep high-capacity models were incredibly data-hungry. They require vast amounts of labeled data to learn meaningful representations and to avoid overfitting. And in the mid-2000s, there was simply no good dataset to work on. The existing benchmarks, like Caltech101, were orders of magnitude too small to truly unlock the potential of these models. The algorithms were simply ahead of the data. And that brings us to the final, critical ingredient that would ignite the deep learning explosion. The <strong>ImageNet</strong> dataset.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/imagenet.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18" title="ImageNet Large Scale Visual Recognition Challenge"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/imagenet.png" class="img-fluid figure-img" alt="ImageNet Large Scale Visual Recognition Challenge"></a></p>
<figcaption>ImageNet Large Scale Visual Recognition Challenge</figcaption>
</figure>
</div>
<p>Conceived and led by Fei-Fei Li, starting in 2007, the ImageNet project was an effort of unprecedented scale. The goal is to map out the entire noun hierarchy of WorldNet and populate it with millions of clean, annotated images. The result was a dataset with over 14 million images, spanning more than 20,000 categories. Crucially, in 2010, the project launched the ImageNet Large Scale Visual Recognition Challenge, or ILSVRC. This competition focused on a subset of the data: 1,000 object classes, with roughly 1.3 million training images. The task was straightforward: given an image, produce a list of five object labels, and you get credit if the correct label is in your list. This dataset and this annual challenge provide a perfect crucible. It was a dataset massive and complex enough to finally demonstrate the power of data-hungry deep learning models, and a competition that would pit them directly against the state-of-the-art classical computer vision system of the day. The stage was now set for a revolution.</p>
<p>So, ImageNet sets the stage. Now let’s look at the performance on this challenge over the years. The bar chart above shows the top-5 error rate. That means the model gets five guesses, and if the correct label isn’t in those five, it’s an error. In 2010, the winning entry from Lin et al.&nbsp;had an error of <strong>28.2%</strong>. In 2011, Sanchez &amp; Perronnin improved this to <strong>25.8%</strong>. These were typically system based on more traditional computer vision pipelines(hand-crafted features like SIFT or HoG), followed by machine learning classifiers like SVMs. Good progress, but still very high error rate. Then look at <strong>2012</strong>. A massive drop to <strong>16.4%</strong> with Krizhevsky et al.’s model, which we now famously know as <strong>AlexNet</strong>. We’ll talk a lot about AlexNet. The trend continues, 2013, Zeiler &amp; Fergus: <strong>11.7%</strong>, 2014, we see two big ones: VGG (Simonyan &amp; Zisserman) at <strong>7.3%</strong> and GoogLeNet (Szegedy et al.) at <strong>6.7%</strong>. And then, a really significant milestone in 2015: ResNet (He et al.) achieved 3.<strong>6%</strong> error. Now, why is that 3.6% so significant? Look over the far right. Andrej Karpathy, when he was a PhD at Stanford and several others including Fei-Fei, did a study (Russakovsky et al.&nbsp;IJCV 2015) to benchmark human performance on the subset of ImageNet. And a well-trained human annotator gets around <strong>5.1% top-5 error</strong>. So, by 2015, deep learning models were, for the first time, <strong>surpassing human-level performance</strong> on this specific, very challenging task! The progress didn’t stop there, 2016, 2017 saw even lower error rates with models like SENet</p>
<p>Now, let’s zero in on that pivotal moment, <strong>AlexNet, 2012</strong>. You see the red arrow pointing squarely at that 2012 bar. That 28% down to 16% was not an incremental improvement; it was a <strong>paradigm shift</strong>. This was the moment deep learning, specifically deep convolutional neural networks, truly announced its arrival and demonstrated its power to the broader computer vision community. AlexNet in 2012 right after Deep learning(2016) and ImageNet(2009), this isn’t a coincidence. The availability of a large dataset like ImageNet, coupled with the increasing computational power of GPUs, allowed deep learning models, which had been around conceptually for a while(you see LeNet from ’98, Neocognitron from ’80) , to finally be trained effectively at scale. AlexNet’s success fundamentally changed the direction of computer vision research. Almost overnight, people shifted from feature engineering to learning features directly from data using deep neural networks. And the rest, as they say, is history, as subsequent years on that chart. So, ImageNet provided the challenge, and AlexNet provided the breakthrough deep learning solution. The combination really superchanged the field, and it’s why we’re here talking about these powerful models.</p>
</section>
<section id="a-revolution-in-pixels" class="level2">
<h2 class="anchored" data-anchor-id="a-revolution-in-pixels">A revolution in pixels</h2>
<p>Okay, we’ve seen how AlexNet in 2012 was a watershed moment for deep learning in computer vision, dramatically improving performance on ImageNet. Now let’s look at what happened after 2012</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/deep-learning-explosion.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19" title="Left: Publications at top Computer Vision conferences. Right: arXiv papers per month"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/deep-learning-explosion.png" class="img-fluid figure-img" alt="Left: Publications at top Computer Vision conferences. Right: arXiv papers per month"></a></p>
<figcaption>Left: Publications at top Computer Vision conferences. Right: arXiv papers per month</figcaption>
</figure>
</div>
<p>The graph on the left shows the number of paper submissions and acceptances to CVPR, which is one of the, if not the, top computer vision conferences. You can see a steady growth from 1985 up to around 2010-2012. But then, look what happens after 2012, especially the submissions. It just takes off, almost exponentially! We’re talking about going from around 2000, submissions to over 7000-8000 in just a few years. Now, the graph on the right shows the number of <strong>Machine Learning and AI papers uploaded to arXiv per month</strong>. arXiv, for those who don’t know, is a preprint server where researchers can upload their papers before or alongside peer review. This allows for very rapid dissemination of ideas. Again, we have a relative modest until around 2012-2013, and then it just skyrockets. We’re looking at thousands of ML/AI paper per month now. This isn’t just computer vision; it’s the broader AI field, but computer vision and deep learning are huge drivers of this trend.</p>
<p>So, we have an explosion of papers and research. But what kind of research? What were people working on? Let’s look at the winner of the ImageNet challenge each year following AlexNet:</p>
<ul>
<li><strong>Year 2010(NEC-UIUC):</strong> Before the deep learning craze really hit ImageNet, this was what a state-of-the-art system looked like. You had a ‘Dense descriptor grid’ using features like HOG and LBP, then some ‘Coding’ (like local coordinate coding), ‘Pooling’ (Spatial Pyramid Matching - SPM), and finally a ‘Linear SVM’ for classification. This is a classic, handcrafted feature pipeline.</li>
<li><strong>Year 2012 (SuperVision, aka AlexNet):</strong> We’ve talked about this, Krizhevsky, Sutskever, and Hinton. It’s a stack of layers(convolutions, pooling, fully connected layers). This is a deep convolutional neural network, learning features directly from data.</li>
<li><strong>Year 2014 (GoogLeNet and VGG):</strong> Two years later, and we see even more sophisticated architectures.
<ul>
<li><strong>GoogleNet</strong> (from Google, Szegedy et al.) the idea was to have filters of different sizes operating in parallel. It was also very deep but computationally quite efficient.</li>
<li><strong>VGG</strong> (from Oxford, Simonyan &amp; Zisserman) took a different approach: very simple, uniform architecture, just stacking 3x2 convolutions and 2x2 pooling layers deeper and deeper.</li>
</ul></li>
<li><strong>Year 2015 (MSRA, aka ResNet):</strong> This was another huge leap, from Microsoft Research Asia(He et al.). This is ResNet, or Residual Network. They introduced ‘skip connections’ or ‘residual connections’ which allowed them to train networks that were incredibly deep, even over 100 or 1000 layers, which was previously impossible due to vanishing gradient problems. This architecture, or variants of it, became the backbone for many, many subsequent models.</li>
</ul>
<p>So, in just a few years, we went from handcrafted pipelines to relatively shallow (by today’s standards) CNNs, to very deep and complex architectures, each pushing the boundaries of performance and what we thought was possible.</p>
<p>Now let’s look at what these models can actually do.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/deep-learning-everywhere.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20" title="Deep learning is now everywhere"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/deep-learning-everywhere.png" class="img-fluid figure-img" alt="Deep learning is now everywhere"></a></p>
<figcaption>Deep learning is now everywhere</figcaption>
</figure>
</div>
<p>On the far left, we have examples of <strong>Image Classification</strong> from AlexNet back in 2012. For each image, the model outputs a list of probabilities for different classes, and here we see the top predictions. These aren’t just simple ‘cat’ or ‘dog’ classifications; the model is identifying specific types of objects, often in challenging, cluttered scenes. And these are real images, not just sanitized datasets. This was a clear demonstration of the power of these learned features. In the middle, we see an application called <strong>Image Retrieval</strong>. The idea here is: given a query image, can the system find visually and semantically similar images from a large database? These are just two fundamental computer vision tasks, classification and retrieval. But the success of deep learning, starting around 2012, has meant it’s now being applied to virtually every area of computer vision: object detection, segmentation, image captioning, image generation, video analysis, 3D reconstruction and so much more.</p>
<p>Continuing with the theme of understanding humans and dynamic scenes at the bottom, we have <strong>Pose Recognition</strong> also known as human pose estimation. The goal here is to identify the key joints of a person’s body like elbows, wrists, knees, ankles, head, shoulders. You can see in these examples (from Toshev and Szegedy, 2014, “DeepPose”, one of the first deep learning approaches for this) that the model can accurately locate these joints even with varied clothing, complex poses, and different backgrounds. This is fundamental for a deeper understanding of human actions, for animation, and augmented reality, and more.</p>
<p>And the reach of deep learning extends far beyond everyday scenes, videos, or games. It’s making significant impacts in highly specialized scientific and medical domains. On the far right, we have <strong>Whale Recognition</strong>. This might seem niche, but it’s important for ecological studies and conservation This particular image refers to a Kaggle challenge <a href="https://www.kaggle.com/c/whale-categorization-playground">here</a> is the link to the competition page, where participants build models to automatically identify individual whales from photograph. Deep learning is very good at these kinds of fine-grained visual recognition tasks</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/even-more.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21" title="Top left: Image Captioning Vinyals et al, 2015 Karpathy and Fei-Fei, 2015. Top left: Krishna et al., ECCV 2016 the “Visual Genome” dataset and the work on generating scene graphs. Bottom: The Neural Style Transfer Algorithm (Gatys et al.&nbsp;2016), which stylizes a photograph in the style of a given artwork"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/even-more.png" class="img-fluid figure-img" alt="Top left: Image Captioning Vinyals et al, 2015 Karpathy and Fei-Fei, 2015. Top left: Krishna et al., ECCV 2016 the “Visual Genome” dataset and the work on generating scene graphs. Bottom: The Neural Style Transfer Algorithm (Gatys et al.&nbsp;2016), which stylizes a photograph in the style of a given artwork"></a></p>
<figcaption>Top left: Image Captioning Vinyals et al, 2015 Karpathy and Fei-Fei, 2015. Top left: Krishna et al., ECCV 2016 the “Visual Genome” dataset and the work on generating scene graphs. Bottom: The Neural Style Transfer Algorithm (Gatys et al.&nbsp;2016), which stylizes a photograph in the style of a given artwork</figcaption>
</figure>
</div>
<p>Now, this is where things get really interesting. We’re moving beyond just recognizing objects or pixels, and into the realm of understanding and describing images using natural language. This is <strong>Image Captioning</strong>. The task is, given an image, to automatically generate a human-like sentence that describes what’s happening in the image. These captions are remarkably accurate and fluent. This typically involves a combination of a Convolutional Neural Network (RNN), often an LSTM, to ‘generate’ the sentence word by word, conditioned on those visual features. The work here is from Vinyals et al.&nbsp;(from Google) and Karpathy and Fei-Fei (from Stanford), both published around 2015, were seminal works in this area, showing how to effectively combine CNNs and RNNs for this task. This was huge step toward machines that can not only see but also communicate what they see.</p>
<p>Image captioning gives us a sentence. But can we get a even deeper understanding of the relationships and interactions within an image? On the right you see an image with objects detected, and blow it we see something more structured: a <strong>scene graph</strong>. This moves us towards a much more comprehensive understanding of visual scenes. The work from Krishna et al.&nbsp;ECCV 2016, refers to the “Visual Genome” dataset and the work on generating a scene graph, which provides a dense, structured annotation of images, capturing objects, attributes, and relationships. This is crucial for tasks like visual question answering, where the model answers questions about an image and more complex reasoning about visual content.</p>
<p>So far, we’ve mostly seen deep learning used for understanding or analyzing images. But what about creating them? Or manipulating the artistic ways? At the bottom we see something called Neural Style Transfer pioneered by Gatys et al.&nbsp;in 2016. Here, you take two images, a <strong>content image</strong> here is the houses on the street and a <strong>style image</strong> like a famous painting like Van Gogh’s The Starry Night. The algorithm then synthesizes a new image that has the content of the first image but is rendered in the style of the second. So you get the houses looking as if they were painted by Van Gogh, or in a stained-glass style. This is done by optimizing an image to match content features from one image and style features (correlations between activations in different layers) from another, using a pre-trained CNN.</p>
<p>Continuing with generative models, we’ve shown artistic generation. But what about generating entirely new, photorealistic images from scratch? And this points to that capability, especially referencing <strong>Generative Adversarial Networks</strong> or GANs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/gans.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22" title="Sliced Wasserstein distance (SWD) between the generated and training images (Section 5) and multi-scale structural similarity (MS-SSIM) among the generated images for several training setups at 128 × 128. And (a-g) CELEBA examples corresponding to rows in Table 1. (h) the converged result"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/gans.png" class="img-fluid figure-img" alt="Sliced Wasserstein distance (SWD) between the generated and training images (Section 5) and multi-scale structural similarity (MS-SSIM) among the generated images for several training setups at 128 × 128. And (a-g) CELEBA examples corresponding to rows in Table 1. (h) the converged result"></a></p>
<figcaption>Sliced Wasserstein distance (SWD) between the generated and training images (Section 5) and multi-scale structural similarity (MS-SSIM) among the generated images for several training setups at 128 × 128. And (a-g) CELEBA examples corresponding to rows in Table 1. (h) the converged result</figcaption>
</figure>
</div>
<p>This is from Karras et al., for their work on <a href="https://arxiv.org/pdf/1710.10196">“Progressive Growing of GANs for improved Quality”</a> <strong>GANs</strong>, introduced by Ian Goodfellow and his colleagues in 2014, work by having two networks compete against each other. A <strong>Generator</strong> network tries to create realistic images for example from random noise. And a <strong>Discriminator</strong> network tried to distinguish between real images (from training set) and images created by the generator. Through this adversarial process, the generator gets better and better at creating images that can fool the discriminator, and the discriminator gets better at telling them apart. The <strong>“Progressive Growing of GANs”</strong> technique, developed by Karras and his team at NVIDIA was a major breakthrough. It allowed for the generation of much higher-resolution and more stable results than previously possible. They started by generating very small images like 4x4 pixels and then progressively added layers to both the generator and discriminator to produce larger and more detailed images like 8x8, 16x16, all the way up to 1024x1024. You can see from the image above, faces that are not real people, yet they look entirely plausible. This ability to synthesize photorealistic imagery has huge implications for art, design, entertainment, data augmentation, and of course, also raises important ethical considerations about ‘deepfakes’ and misinformation. But these generative capabilities truly underscore how far deep learning has come since 2012, from classifying images to creating entirely new visual realities.</p>
<p>We’ve seen some incredible generative capabilities, like GANs creating photorealistic faces. But what if we could guide that generation with more than just random noise or style images? What if we could tell the model exactly what we want it to create, using natural language?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/dalle.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23" title="Ramesh et al, “DALL·E: Creating Images from Text”, 2021, images from https://openai.com/blog/dall-e/"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/dalle.png" class="img-fluid figure-img" alt="Ramesh et al, “DALL·E: Creating Images from Text”, 2021, images from https://openai.com/blog/dall-e/"></a></p>
<figcaption>Ramesh et al, “DALL·E: Creating Images from Text”, 2021, images from <a href="https://openai.com/blog/dall-e/">https://openai.com/blog/dall-e/</a></figcaption>
</figure>
</div>
<p>This brings us to one of the most mind-blowing developments in recent years: <strong>Text-to-image Generation</strong>. These are not images found on the internet these were created by an AI model based purely on that text description. And they are remarkably good! You see various interpretations, some look more like a cut avocado half turned into a chair, others are more abstract but clearly evoke both “armchair”and ‘avocado’. What’s so powerful about this (and models like DALL-E, Imagen, Stable Diffusion, etc.) is the <strong>compositionality</strong> and <strong>zero-shot generalization</strong>. The model has likely never seen an “armchair in the shape of an avocado” during its training. But it knows what armchairs are, it knows what avocados are, and it understands how to combine these concepts based on the textual relationships. The images above are from Ramesh et al, 2021, for <strong>DALL-E</strong>, a groundbreaking model from OpenAI. This kind of model is typically a very large transformer-based architecture, trained on massive datasets of image-text pairs. It learns to associate visual concepts with textual descriptions and can then generate novel images by combining these learned concepts in new ways. This ability to translate complex, even whimsical, textual prompts into coherent and creative visual outputs is a huge leap.</p>
<p>This isn’t just about fun images. It has profound implications for creative industries, design, content creation, and even help us understand how these large models represent and manipulate concepts. We’ve gone from classifying what’s in an image to generating entirely new visual realities from abstract textual descriptions. It’s truly an exciting time for AI and vision.</p>
</section>
<section id="the-spark-and-the-fuel" class="level2">
<h2 class="anchored" data-anchor-id="the-spark-and-the-fuel">The spark and the fuel</h2>
<p>So, we’ve spent a lot of time looking at this incredible explosion of deep learning applications from 2012 to the present. We’ve seen progress in classification, detection, segmentation, captioning, generation, and so much more. A natural question arises: Why now? What were the key ingredients that came together to make this revolution possible?</p>
<p><a href="./images/the-fuel.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/the-fuel.png" class="img-fluid"></a></p>
<p>There are three main reasons. The <strong>Computation</strong>, Deep learning models, especially the large ones we’ve been discussing, are incredibly computationally intensive to train. They require billions or even trillions of calculations. The <strong>Algorithms</strong>, while many core ideas of neural networks have been around for decades, there have been significant algorithm innovations. These include new architectures like ResNet, Transformers, better optimization techniques, new activation functions, regularization methods, and so on, which have made it possible to train much deeper and more complex models effectively. And finally the <strong>Data</strong>, datasets like ImageNet, which we discussed, were crucial. Deep learning models are data-hungry, they learn by seeing millions of examples. The internet, social media, and large-scale data collection efforts have provided this fuel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/gpus.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25" title="the GFLOP per Dollar graph. ‘GFLOP’ stands for Giga Floating Point Operations Per Second. It’s a measure of computational power (how many billions of calculations a processor can do in one second). The graph shows this metric per dollar, so it’s a measure of cost-effectiveness"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/gpus.png" class="img-fluid figure-img" alt="the GFLOP per Dollar graph. ‘GFLOP’ stands for Giga Floating Point Operations Per Second. It’s a measure of computational power (how many billions of calculations a processor can do in one second). The graph shows this metric per dollar, so it’s a measure of cost-effectiveness"></a></p>
<figcaption>the <strong>GFLOP per Dollar</strong> graph. ‘GFLOP’ stands for Giga Floating Point Operations Per Second. It’s a measure of computational power (how many billions of calculations a processor can do in one second). The graph shows this metric per dollar, so it’s a measure of cost-effectiveness</figcaption>
</figure>
</div>
<p>Let’s focus on the <strong>Computation</strong> aspect. Look at the dramatic difference between CPUs and GPUs starting around 2007-2008 with GPUs like the GeForce 8800 GTX which was one of the first to support general-purpose computing via CUDA. Around 2010-2012 we had GeForce GTX 580, this is the era when AlexNet was developed. Alex Krizhevsky trained AlexNet on NVIDIA GPUs, and their parallel processing capabilities were absolutely critical for training such a large network in a reasonable amount of time. Then we have the so-called “Deep learning Explosion” starting around 2012-2013, precisely when GPU performance and accessibility were taking off. Later GPUs like GTX 1080 Ti, RTX 2080 Ti, RTX 3090, and RTX 3080 continued this trend, offering massive parallel computation at increasingly better price points (or at least, significantly more power for a high-end card).</p>
<p>But the story doesn’t end there with the arrival of GPU (Tensor Core) which is a special hardware for deep learning. Starting with NVIDIA’s Volta architectures, GPUs began to include dedicated hardware nits specifically designed to accelerate the types of matrix multiplication and accumulation operations that are the heart of deep learning computations. These Tensor Cores can perform mixed-precision matrix math (e.g., multiplying FP16 matrices and accumulating in FP32) much, much faster than general-purpose FP32 units.</p>
<p>This is a fantastic example of a positive feedback loop:</p>
<ol type="1">
<li>Deep learning shows promise.</li>
<li>Researchers start using GPUs for their parallel processing capabilities.</li>
<li>The demand for deep learning computation grows.</li>
<li>Hardware manufacturers (like NVIDIA) see this massive market and start designing specialized hardware units like Tensor Cores to further accelerate deep learning workloads.</li>
<li>This new, even more powerful hardware enables researchers to train even larger, more complex models, pushing the boundaries of AI further.</li>
</ol>
<p>So it’s not just that the GPU happened to be good for deep learning; the hardware itself has evolved because of deep learning, making it even more powerful and efficient for these tasks. This co-evolution of algorithms, software, and hardware is a key characteristic of the current AI boom.</p>
<p>Now let’s zoom out and look at the broader AI’s explosive growth and impact. This isn’t just an academic phenomenon, it’s having a massive real-world impact.</p>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb1" data-startfrom="252" data-source-offset="-27" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 251;"><span id="cb1-252">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FileAttachment</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/attendance-major-artificial-intelligence-conferences.csv"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>()</span>
<span id="cb1-253"></span>
<span id="cb1-254"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Group data by conference</span></span>
<span id="cb1-255">aaai_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Entity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AAAI"</span>)</span>
<span id="cb1-256">cvpr_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Entity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CVPR"</span>)</span>
<span id="cb1-257">iclr_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Entity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ICLR"</span>)</span>
<span id="cb1-258">icml_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Entity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ICML"</span>)</span>
<span id="cb1-259">neurips_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Entity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NeurIPS"</span>)</span>
<span id="cb1-260">total_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Entity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>)</span>
<span id="cb1-261"></span>
<span id="cb1-262"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create the Plotly chart</span></span>
<span id="cb1-263">Plotly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plotly.js-dist@2"</span>)</span>
<span id="cb1-264"></span>
<span id="cb1-265">chart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-266">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> traces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-267">    {</span>
<span id="cb1-268">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> aaai_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-269">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> aaai_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of attendees"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-270">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-271">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines+markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-272">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AAAI'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-273">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#9467bd'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-274">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-275">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hovertemplate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%{fullData.name}: %{y:,}&lt;extra&gt;&lt;/extra&gt;'</span></span>
<span id="cb1-276">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-277">    {</span>
<span id="cb1-278">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> cvpr_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-279">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> cvpr_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of attendees"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-280">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-281">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines+markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-282">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CVPR'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-283">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#1f77b4'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-284">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-285">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hovertemplate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%{fullData.name}: %{y:,}&lt;extra&gt;&lt;/extra&gt;'</span></span>
<span id="cb1-286">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-287">    {</span>
<span id="cb1-288">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> iclr_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-289">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> iclr_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of attendees"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-290">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-291">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines+markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-292">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ICLR'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-293">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#ff7f0e'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-294">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-295">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hovertemplate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%{fullData.name}: %{y:,}&lt;extra&gt;&lt;/extra&gt;'</span></span>
<span id="cb1-296">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-297">    {</span>
<span id="cb1-298">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> icml_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-299">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> icml_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of attendees"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-300">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-301">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines+markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-302">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ICML'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-303">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#8c564b'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-304">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-305">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hovertemplate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%{fullData.name}: %{y:,}&lt;extra&gt;&lt;/extra&gt;'</span></span>
<span id="cb1-306">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-307">    {</span>
<span id="cb1-308">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> neurips_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-309">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> neurips_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of attendees"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-310">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-311">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines+markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-312">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NeurIPS'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-313">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#2ca02c'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-314">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-315">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hovertemplate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%{fullData.name}: %{y:,}&lt;extra&gt;&lt;/extra&gt;'</span></span>
<span id="cb1-316">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-317">    {</span>
<span id="cb1-318">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> total_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-319">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> total_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of attendees"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-320">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-321">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines+markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-322">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-323">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#d62728'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dash</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dash'</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-324">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-325">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hovertemplate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%{fullData.name}: %{y:,}&lt;extra&gt;&lt;/extra&gt;'</span></span>
<span id="cb1-326">    }</span>
<span id="cb1-327">  ]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-328"></span>
<span id="cb1-329">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-330">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb1-331">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Conference Attendance Over Time'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-332">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">font</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> }</span>
<span id="cb1-333">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-334">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb1-335">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-336">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">showgrid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-337">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">gridcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rgba(0,0,0,0.1)'</span></span>
<span id="cb1-338">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-339">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">yaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb1-340">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number of Attendees'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-341">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">showgrid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-342">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">gridcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rgba(0,0,0,0.1)'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-343">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tickformat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">',d'</span></span>
<span id="cb1-344">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-345">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">legend</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb1-346">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-347">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.98</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-348">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bgcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rgba(255,255,255,0.8)'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-349">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bordercolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rgba(0,0,0,0.2)'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-350">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">borderwidth</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-351">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-352">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hovermode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x unified'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-353">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">plot_bgcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-354">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">paper_bgcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-355">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">margin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">l</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span> }</span>
<span id="cb1-356">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-357"></span>
<span id="cb1-358">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-359">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">displayModeBar</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-360">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">displaylogo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-361">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">modeBarButtonsToRemove</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pan2d'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lasso2d'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select2d'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-362">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">responsive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span></span>
<span id="cb1-363">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-364"></span>
<span id="cb1-365">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"div"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-366">  div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-367">  div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"500px"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-368"></span>
<span id="cb1-369">  Plotly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newPlot</span>(div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> traces<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> config)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-370"></span>
<span id="cb1-371">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-372">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-4" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-5" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-6" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-7" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-8" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-9" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<p>This chart show the number of attendance at major AI conferences like CVPR(Computer Vision), NeurIPS(Neural Information Processing System, a top ML conference), ICML (International Conference on Machine Learning), AAAI (Association for the Advancement of Artificial Intelligence), ICLR (International conference on Learning Representations), and others, from around 2010 to 2024. Look at what happens around 2012-2015 onwards. The attendance for many of these conferences, especially those focused on machine learning and computer vision (like CVPR, NeurlPS, ICML, ICLR) just explodes. We’re talking about conferences going from a few thousand attendees to over 20,000, sometimes even more, in just a few years. This signifies a huge influx of researchers, students, and industry practitioners into the field. The source is from <a href="https://ourworldindata.org/grapher/attendance-major-artificial-intelligence-conferences?country=NeurIPS~Total~CVPR~ICLR~ICML~AAAI">Our World in Data</a>.</p>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb2" data-startfrom="379" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 378;"><span id="cb2-379">aiData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FileAttachment</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/enterprise-ai-revenue.csv"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>()</span>
<span id="cb2-380"></span>
<span id="cb2-381">aiChart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-382">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> trace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-383">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> aiData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-384">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> aiData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Revenue</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-385">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-386">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AI Market Revenue'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-387">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb2-388">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#4285f4'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-389">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">opacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-390">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb2-391">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#1a73e8'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-392">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-393">      }</span>
<span id="cb2-394">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-395">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> aiData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Revenue</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-396">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">textposition</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outside'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-397">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">textfont</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb2-398">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#333'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-399">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb2-400">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-401">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hovertemplate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;b&gt;%{x}&lt;/b&gt;&lt;br&gt;'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-402">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Revenue: $%{y:,.2f} million USD&lt;br&gt;'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-403">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;extra&gt;&lt;/extra&gt;'</span></span>
<span id="cb2-404">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-405"></span>
<span id="cb2-406">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-407">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb2-408">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enterprise Artificial Intelligence Market Revenue Worldwide 2016-2025'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-409">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">font</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-410">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb2-411">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-412">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb2-413">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-414">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">showgrid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-415">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tickmode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'array'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-416">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tickvals</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> aiData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-417">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ticktext</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> aiData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">*`</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">*`</span>)</span>
<span id="cb2-418">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-419">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">yaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb2-420">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Revenue in million U.S. dollars'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-421">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">showgrid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-422">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">gridcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rgba(0,0,0,0.1)'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-423">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tickformat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">',.0f'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-424">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>aiData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Revenue</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>]</span>
<span id="cb2-425">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-426">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">plot_bgcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-427">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">paper_bgcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-428">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">margin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">l</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-429">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">showlegend</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span></span>
<span id="cb2-430">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-431"></span>
<span id="cb2-432">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-433">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">displayModeBar</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-434">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">displaylogo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-435">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">modeBarButtonsToRemove</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pan2d'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lasso2d'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select2d'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-436">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">responsive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span></span>
<span id="cb2-437">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-438"></span>
<span id="cb2-439">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"div"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-440">  div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-441">  div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"500px"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-442"></span>
<span id="cb2-443">  Plotly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newPlot</span>(div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> [trace]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> config)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-444"></span>
<span id="cb2-445">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-446">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-2" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<p>Next is Enterprise application AI revenue, the bar chart shows the revenue generated from enterprise applications of AI, in billions of U.S. dollars, from 2016 projected out to 2025. Even starting in 2016, there’s already noticeable revenue. But the projected growth is staggering. It goes from a few hundred billion dollars, and then projected to over thirty trillion dollars by 2025. This shows that AI is not just research or startups, it’s being deployed in established businesses across various sectors generating significant economic value. The source is from <a href="https://cloudlevante.com/2023/04/25/the-booming-cloud-how-artificial-intelligence-is-transforming-businesses/">cloudlevante</a></p>
</section>
<section id="beyond-the-benchmark" class="level2">
<h2 class="anchored" data-anchor-id="beyond-the-benchmark">Beyond the Benchmark</h2>
<p>We’ve had a whirlwind tour through the incredible achievements of deep learning in computer vision since 2012. We’ve seen models classify, detect, segment, caption, and even generate incredibly realistic images. Now, it’s crucial to bring us back to reality and acknowledge that while the successes are profound, there’s still a lot of work to be done.</p>
<blockquote class="blockquote">
<p>Despite the successes, computer vision still has a long way to go</p>
</blockquote>
<p>We’ve achieved incredible feats on specific benchmarks, but true human-level visual intelligence, with common sense, robustness, and ethical considerations, is still a grand challenge. This isn’t to diminish the progress, but to inspire you for the future.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./images/harmful.png" class="lightbox" data-gallery="quarto-lightbox-gallery-26" title="Source: https://www.washingtonpos t.com/technology/2019/ 10/22/ai-hiring-face-scan ning-algorithm-increasingly-decides-whether-you-deserve-job/ and https://www.hirevue.com/platform/ online-video-interviewing-software"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/harmful.png" class="img-fluid figure-img" alt="Source: https://www.washingtonpos t.com/technology/2019/ 10/22/ai-hiring-face-scan ning-algorithm-increasingly-decides-whether-you-deserve-job/ and https://www.hirevue.com/platform/ online-video-interviewing-software"></a></p>
<figcaption>Source: <a href="https://www.washingtonpos%20t.com/technology/2019/%2010/22/ai-hiring-face-scan%20ning-algorithm-increasingly-decides-whether-you-deserve-job/">https://www.washingtonpos t.com/technology/2019/ 10/22/ai-hiring-face-scan ning-algorithm-increasingly-decides-whether-you-deserve-job/</a> and <a href="https://www.hirevue.com/platform/%20online-video-interviewing-software">https://www.hirevue.com/platform/ online-video-interviewing-software</a></figcaption>
</figure>
</div>
<p>In fact, while computer vision can do immense good, it also has the potential to <strong>cause harm</strong> if not developed and deployed carefully. As future engineers and scientists in this field, it’s vital to be aware of those risks. Consider this concerned example <strong>Harmful Stereotypes</strong>, specifically related to gender classification. The table on the left shows the accuracy of gender classifiers from major tech companies like Microsoft, FACE++, IBM on different demographic groups. The largest gap column, while accuracy for lighter males and females is very high, it significantly drops for darker-skinned individuals, especially darker females. This means these systems are <strong>biased</strong>. Why does this happen? Often due to the lack of diverse and representative training data, or biases inherent in the data collection process. The averaged faces below visually represent these biased training sets. This is a critical issue, AI systems, if trained on biased data, will perpetuate and even amplify existing societal biases.</p>
<p>On the right, we see that can <strong>Affect people’s lives</strong>. The headline from The Washington Post: “A face-scanning algorithm increasingly decides whether”you deserve the job”. This refers to companies like HireVue, which use AI-powered video analysis in job interviews to assess candidates. The system analyzes facial expression, speech patterns, and other cues. While the intent might be to standardize hiring, outside experts call it “profoundly disturbing”. Imagine an algorithm, potentially biased, making decisions about your career prospects. This highlights that computer vision systems, when deployed in high-stakes environments like hiring, criminal justice, or healthcare, must be rigorously tested for fairness, transparency, and accuracy across all demographics. The ethical implications are enormous, and we, as a community, have a responsibility to address them.</p>
<p>But it’s not all about potential harm. We also need to recognize the immense potential for good. <strong>Computer vision can save lives</strong>. Consider the challenge of <strong>how to take care of seniors while keeping them safe?</strong> This is a growing societal problem with an aging global population. Computer vision offers a promising non-invasive solution. Imagine a camera system in a senior’s home, it can help early symptom detection of COVID-19 by monitoring cough, breathing changes, fever-like symptoms through thermal imaging. It can monitor patients with mild symptoms by reducing the need for frequent in-person visits. It can help manage chronic conditions like detecting changes in gait for mobility issues, monitoring sleep patterns, diet, or overall activity levels.</p>
<p>These systems are versatile and, crucially, scalable. They can be low-cost compared to continuous human care and can be burden-free for the seniors themselves, allowing them to maintain independence while providing peace of mind to their families and caregivers. This is a powerful example of how computer vision, when designed ethically and thoughtfully can be a force for immense societal benefit.</p>
<p>But even with these powerful applications, there are fundamental limitations in reasoning and common sense that remind us just how far we still have to go. This brings us to a classic, and still deeply relevant, thought experiment in computer vision.</p>
<p><a href="./images/karpathy.png" class="lightbox" data-gallery="quarto-lightbox-gallery-27"><img src="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/karpathy.png" class="img-fluid"></a></p>
<p>Back in 2012, Andrej Karpathy (who you may know as a former Director of AI at Tesla and a key figure in the field) wrote a blog post called <a href="https://karpathy.github.io/2012/10/22/state-of-computer-vision/">“The state of Computer Vision and AI: we are really, really far away.”</a> about the image you see above. He argued that it perfectly illustrated challenge facing AI. He called the state of computer vision at the time “pathetic” in the face of what this image requires. To truly understand the humor and the story in this photo, a computer would need to go far beyond just identifying pixels. It would need to synthesize an incredible amount of world knowledge.</p>
<p>First it needs to understand the complex <strong>scene geometry</strong>. It has to recognize people, but also realize that some of them are reflections in a mirror, not separate individuals.</p>
<p>Second it needs to grasp <strong>physical interaction and object affordance</strong>. It has to identify the object as a weight scale, understand that the person is standing on it to measure their weight, and then notice that then President Obama has his foot slyly placed on the back of the scale. This requires understanding that applying force to a scale alters its measurement a basic concept of physics.</p>
<p>But the real challenge, the part that truly tests intelligence, is <strong>reasoning about minds</strong>. The system would need to infer that the person on the scale is unaware of Obama’s prank because of his pose and limited field of view. It would need to anticipate the person’s imminent confusion when he sees the inflated number. Add it’s a deeply social, psychological, and physical understanding, all from a single 2D image of RGB pixels.</p>
<p>So, that was 2012. Now, let’s fast forward to the present day, over a decade into the deep learning revolution. Did we solve it? This very question resurfaced in 2023. When asked about the original Obama image, Karpathy’s response was telling:</p>
<blockquote class="blockquote">
<p>We tried and it solves it :o.</p>
</blockquote>
<p>For a moment, it seems like the problem was solved. But the story gets more complex. Karpathy immediately followed up with his own skepticism:</p>
<blockquote class="blockquote">
<p>I still didn’t believe it could be true.</p>
</blockquote>
<p>The reason for his doubt is a critical concept in modern AI: <strong>data contamination</strong>. The Obama photo is famous. It, along with Karpathy’s original blog post and thousands of articles explain the joke, and almost certainly part of the massive datasets used to train today’s large vision-language models. So, when the model “explains” the joke, is it truly reasoning from first principles, or is it performing an act of incredibly sophisticated retrieval? Is it recreating an explanation it has already seen, or is it generating one from scratch? Maybe the image might be leaked into the training set. This ambiguity is perfectly captured by Karpathy’s own words:</p>
<blockquote class="blockquote">
<p>The waters are muddied…</p>
</blockquote>
<p>And this is where we stand today, truly beyond the benchmark. The lines are blurring. Our models have become so powerful that we are no longer just asking “Is it accurate?” but the much harder question: “Does it understand?” The challenge is no longer simply about building a better classifier, but about building a system with verifiable reasoning, untangling true intelligence from phenomenal memory.</p>
<p>The road ahead is still long, but the problems we face are no longer just about recognizing pixels. They are about navigating ambiguity, context, and common sense which is the very fabric of intelligence itself. The canvas is far from finished, but the picture we are beginning to paint is more intricate and fascinating than we could have ever imagined.</p>


</section>

 ]]></description>
  <category>Computer Vision</category>
  <category>Deep Learning</category>
  <guid>https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/</guid>
  <pubDate>Sat, 12 Jul 2025 17:00:00 GMT</pubDate>
  <media:content url="https://bhdai.github.io/blog/posts/history-of-computer-vision-and-deep-learning/images/cover_image.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Some Deep Learning Concepts You Need To Understand</title>
  <dc:creator>Bui Huu Dai</dc:creator>
  <link>https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/</link>
  <description><![CDATA[ 






<p>Alright, we’ve been diving deep into tabular data lately, haven’t we? We played with it, had some fun, and now i think it’s time to go deeper to image classification problem. Yeah, we’ve touched on this before with the world simplest model <a href="https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/#exploring-the-is-it-a-bird-classifier">“Is it a Bird?”</a>, or better our simple model for <a href="https://bhdai.github.io/blog/posts/2024-07-07-from-notebook-to-web-app/">recognizing three types of bears</a> but that was mostly about deployment. This time we’re going all in.</p>
<blockquote class="blockquote">
<p>In an ideal world deep learning practitioners wouldn’t have to know every detail of how things work under the hood… But as yet, we don’t live in an ideal world. The truth is, to make your model really work, and work reliably, there are a lot of details you have to get right, and a lot of details that you have to check. This process requires being able to look inside your neural network as it trains, and as it makes predictions, find possible problems, and know how to fix them.</p>
</blockquote>
<p>From now on, we’ll be getting into the mechanics of deep learning, and exploring what a solid computer vision model architecture looks like.</p>
<section id="paddy-doctor" class="level2">
<h2 class="anchored" data-anchor-id="paddy-doctor">Paddy Doctor</h2>
<p>Today we’re dealing with the <a href="https://www.kaggle.com/competitions/paddy-disease-classification/overview">Paddy Doctor: Paddy Disease Classification</a> competition on Kaggle. The goal? Predict paddy diseases based on images. Through this competitions we will go though, the general architecture, the presizing process, the loss, and improve our model further, alright let’s get right into it shall we?</p>
<div id="cell-3" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> iskaggle:</span>
<span id="cb1-2">  path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> setup_comp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paddy-disease-classification'</span>, install<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timm&gt;=0.6.2.dev0"</span>)</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-4">  path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data"</span>)</span></code></pre></div>
</div>
<p>First we need to understand how our data laid out</p>
<div id="cell-5" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(#4) [Path('data/test_images'),Path('data/train.csv'),Path('data/train_images'),Path('data/sample_submission.csv')]</code></pre>
</div>
</div>
<p>Data is usually provided in one of these two ways:</p>
<ul>
<li>Individual files representing items of data, like images, text, can be organized in folders or with file name representing information about the images</li>
<li>A table of data as we dealt with them before, where each row is an item which may include filenames providing a connection between the table and data in other format, such as text documents and images.</li>
</ul>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train_images/"</span>).ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(#10) [Path('data/train_images/bacterial_leaf_blight'),Path('data/train_images/bacterial_leaf_streak'),Path('data/train_images/bacterial_panicle_blight'),Path('data/train_images/blast'),Path('data/train_images/brown_spot'),Path('data/train_images/dead_heart'),Path('data/train_images/downy_mildew'),Path('data/train_images/hispa'),Path('data/train_images/normal'),Path('data/train_images/tungro')]</code></pre>
</div>
</div>
<p>As you can see we have 10 folders each represent paddy diseases that we need to predict, in this case each folders will contain images of paddy disease correspond to the parent folder name</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">train_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_images'</span></span>
<span id="cb6-2">files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(train_path)</span>
<span id="cb6-3">files</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(#10407) [Path('data/train_images/bacterial_leaf_blight/100023.jpg'),Path('data/train_images/bacterial_leaf_blight/100049.jpg'),Path('data/train_images/bacterial_leaf_blight/100126.jpg'),Path('data/train_images/bacterial_leaf_blight/100133.jpg'),Path('data/train_images/bacterial_leaf_blight/100148.jpg'),Path('data/train_images/bacterial_leaf_blight/100162.jpg'),Path('data/train_images/bacterial_leaf_blight/100169.jpg'),Path('data/train_images/bacterial_leaf_blight/100234.jpg'),Path('data/train_images/bacterial_leaf_blight/100248.jpg'),Path('data/train_images/bacterial_leaf_blight/100268.jpg'),Path('data/train_images/bacterial_leaf_blight/100289.jpg'),Path('data/train_images/bacterial_leaf_blight/100330.jpg'),Path('data/train_images/bacterial_leaf_blight/100365.jpg'),Path('data/train_images/bacterial_leaf_blight/100382.jpg'),Path('data/train_images/bacterial_leaf_blight/100445.jpg'),Path('data/train_images/bacterial_leaf_blight/100447.jpg'),Path('data/train_images/bacterial_leaf_blight/100513.jpg'),Path('data/train_images/bacterial_leaf_blight/100516.jpg'),Path('data/train_images/bacterial_leaf_blight/100523.jpg'),Path('data/train_images/bacterial_leaf_blight/100541.jpg')...]</code></pre>
</div>
</div>
<p>Let’s take a look a one</p>
<div id="cell-11" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PILImage.create(files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img.size)</span>
<span id="cb8-3">img.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(480, 640)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-7-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This image has the size of 480x640, let’s check all their sizes. Looping though over 10.000 images is a pain right, so we will do it in parallel</p>
<div id="cell-14" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(o): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> PILImage.create(o).size</span>
<span id="cb10-2">sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parallel(f, files, n_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb10-3">pd.Series(sizes).value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>(480, 640)    10403
(640, 480)        4
Name: count, dtype: int64</code></pre>
</div>
</div>
<p>Well, there’s almost have the same size except 4 of them with 640x480, we’ll need to resize all of them to the same size, we will talk about it later, but now let’s create a dataloader</p>
<div id="cell-16" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T10:39:16.888162Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T10:39:16.887867Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T10:39:20.073235Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T10:39:20.072378Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T10:39:16.888138Z&quot;}}" data-trusted="true" data-execution_count="15">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb12-2">                get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb12-3">                splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb12-4">                get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb12-5">                item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>),</span>
<span id="cb12-6">                batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)).dataloaders(train_path)</span></code></pre></div>
</div>
<p>This is the principle of our computer vision model mostly, but notice here, we need to focus on these two lines:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>),</span>
<span id="cb13-2">batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)).dataloaders(train_path)</span></code></pre></div>
<p>These lines implement a fastai data augmentation strategy which they often call presizing.</p>
</section>
<section id="presizing" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="presizing">Presizing</h2>
<p>We need our images to have the same dimensions, so that they can collate into tensors to be passed into GPU. We also want to minimize the number of distinct augmentation computations we perform. If possible we should compose our augmentation transforms into fewer transform(to reduce number of computations and lossy operations) and transform images into uniform sizes(for more efficient processing in GPU)</p>
<p>However if we resize images to their final dimensions(the augmented size) and then apply various augmentation transforms it can lead to issues like creating empty zones (e.g., when rotating an image by 45 degrees) which will not teach the computer anything at all. Many rotation and zooming operations will require interpolating<sup>1</sup> to create pixel</p>
<p>To walk around these challenges, presizing adopts a two-step strategy.</p>
<ol type="1">
<li>Images are resized to dimensions significantly larger than the target training size as this will create a “buffer zone” around the image allowing for more flexibility in subsequent augmentation.</li>
<li>All common augmentation operations, including the final resize to target dimensions, are combined into a single step performed on GPU at the end of the processing, rather than performing the operations individually and interpolating multiple times.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/presizing.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Presizing explained: Showing the two step resize to a large size then apply random crop and augment at the same time</figcaption>
</figure>
</div>
<p>As you can see in the picture it demonstrate what i described earlier</p>
<ol type="1">
<li>First it crop full width or height this time it still do it sequentially before copied to GPU, it make sure that all our images are the same size. On the training set the crop area is chosen randomly<sup>2</sup> and on validation set the it always choose the center square of the image. This is in <code>item_tfms</code></li>
</ol>
<ol start="2" type="1">
<li>Then it uses <code>RandomResizedCrop</code> as a batch transform. It’s applied to a batch all at once on the GPU, making it fast. For the training set, this includes random cropping and other augmentations, and for validation set only resizing to the final size needed for the model is done. This is in <code>batch_tfms</code></li>
</ol>
<section id="resize" class="level3">
<h3 class="anchored" data-anchor-id="resize">Resize</h3>
<p>Use <code>Resize</code> as an item transform with a large size you can use <code>pad</code><sup>3</sup> or <code>squish</code><sup>4</sup> instead of <code>crop</code><sup>5</sup>(the default) for the initial <code>Resize</code> but what the diff between them? In fact let’s see the different in action shall we? Here’s the original image:</p>
<div id="cell-20" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">tst_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./test_image.jpg'</span>).resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>))</span>
<span id="cb14-2">tst_img.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">_, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ax,method <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axs.flatten(), [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pad'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'crop'</span>]):</span>
<span id="cb15-3">  rsz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>method)</span>
<span id="cb15-4">  show_image(rsz(tst_img, split_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>method)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>On the validation set, the crop is always a center crop (on the dimension that’s cropped).</p>
<div id="cell-23" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">_, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ax,method <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axs.flatten(), [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pad'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'crop'</span>]):</span>
<span id="cb16-3">  rsz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>method)</span>
<span id="cb16-4">  show_image(rsz(tst_img, split_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>method)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>My recommendation:</p>
<ol type="1">
<li>Start with padding if you’re unsure. It preserve all information and aspect ratios.</li>
<li>If padding introduces too much background, try cropping.</li>
<li>Use squish only if you’re sure it won’t distort important features.</li>
<li>Always validate your choice by inspecting resized image and checking model performance</li>
</ol>
<p>The best method can vary depending on the dataset the original aspect ratio. Now let’s see what the <code>aug_transforms</code> does under the hood</p>
</section>
<section id="augmentation" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="augmentation">Augmentation</h3>

<div class="no-row-height column-margin column-container"><div id="cell-25" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">torch.permute??</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Docstring:</span>

permute(input, dims) -&gt; Tensor



Returns a view of the original tensor :attr:`input` with its dimensions permuted.



Args:

    input (Tensor): the input tensor.

    dims (tuple of int): The desired ordering of dimensions



Example:

    &gt;&gt;&gt; x = torch.randn(2, 3, 5)

    &gt;&gt;&gt; x.size()

    torch.Size([2, 3, 5])

    &gt;&gt;&gt; torch.permute(x, (2, 0, 1)).size()

    torch.Size([5, 2, 3])

<span class="ansi-red-fg">Type:</span>      builtin_function_or_method</pre>
</div>
</div>
</div><div class="">
<p>Most image processing libraries and formats (like PIL, OpenCV, matplotlib) use the format (Height, Width, Channels) or (H, W, C).</p>
<p>However, PyTorch expects images in the format (Channels, Height, Width) or (C, H, W).</p>
</div></div>
<div id="cell-27" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">timg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorImage(array(tst_img)).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _batch_ex(bs): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> TensorImage(timg[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>].expand(bs, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>timg.shape).clone())</span>
<span id="cb18-3">tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb18-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _batch_ex(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tfms: y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t(y, split_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-6">_, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb18-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,ax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(axs.flatten()): show_image(y[i], ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Choosing the correct size for augment transforms is also crucial too as the size parameter in <code>aug_transforms</code> determines the final size of the images that will be fed into the model. Picking the right one depends on the model architecture requirements, each pretrained models requires different input size (e.g., <code>ResNet</code> typically use 224x224), but in fact you can do some experiments here. But aware of this, larger sizes help computer learn more details, but of course require more resources, in other hand smaller sizes are faster to process but may lose some details, it’s a tradeoff</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Start with the standard size for your chosen model architecture(e.g., 224 for many standard models)</li>
<li>If computational resources are not a big deal with you and the images have fine details, try increasing the size (e.g., 299, 384, 521)</li>
<li>If using transfer learning, stick to the pretrained model’s original input size is the best option i’d say</li>
<li>For custom architectures, you got no choice but experiment with different sizes and choose based on performance and resource constraints.</li>
</ol>
</div>
</div>
</section>
<section id="checking-datablock" class="level3">
<h3 class="anchored" data-anchor-id="checking-datablock">Checking DataBlock</h3>
<p>Writing <code>DataBlock</code> is just like writing a blueprint, we will get an error if we have a syntax error some where in the code. So it’s a good practice to always check your data before doing anything further</p>
<div id="cell-30" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Take a look at the images and and check that each one seems to have correct label or not. In fact, we often have to deal with data with which is not as familiar as domain experts may be. Indeed, if you’re not a paddy doctor it will be hard to look at a random image and speak out the disease right? Since I’m not an expert on paddy diseases, I would use google to search to make sure the images look similar to what i see in the output. Also you can debug the DataBlock by using <code>DataBlock.summary</code><sup>6</sup></p>
<p>Once you think your data looks right, it’s a good practice to train a simple model, think about it, when you start trying to improve your model, how can you rate it? Compare it to the previous try you say, I mean what if it’s already worse, so that why we need to know what our baseline result looks like. Maybe you don’t need anything fancy - a basic model might do the job just fine. Or perhaps the data doesn’t seems to train the model at all. These are things that you want to know as soon as possible</p>
<div id="cell-32" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet26d'</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)</span></code></pre></div>
</div>
<div id="cell-33" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.966901</td>
<td>1.133069</td>
<td>0.356079</td>
<td>01:03</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.311612</td>
<td>0.885489</td>
<td>0.277751</td>
<td>01:03</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.032764</td>
<td>0.691636</td>
<td>0.218645</td>
<td>01:04</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.871234</td>
<td>0.645610</td>
<td>0.203748</td>
<td>01:03</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Remember that we’re in a competition right, so it’s nothing better than submit it and see how it will go and again this time we will use an pretty cool tool call fastkaggle in fact we used it earlier. Alright let’s see the submission layout</p>
<div id="cell-35" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample_submission.csv'</span>)</span>
<span id="cb22-2">ss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">image_id</th>
<th data-quarto-table-cell-role="th">label</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>200001.jpg</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>200002.jpg</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>200003.jpg</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>200004.jpg</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>200005.jpg</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3464</td>
<td>203465.jpg</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3465</td>
<td>203466.jpg</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3466</td>
<td>203467.jpg</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3467</td>
<td>203468.jpg</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3468</td>
<td>203469.jpg</td>
<td>NaN</td>
</tr>
</tbody>
</table>

<p>3469 rows × 2 columns</p>
</div>
</div>
</div>
<p>alright seems like we need to sort the images in order before submitting it</p>
<div id="cell-37" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">tst_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_images'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span>
<span id="cb23-2">tst_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls.test_dl(tst_files)</span></code></pre></div>
</div>
<p>Let’s make the prediction on the test set</p>
<div id="cell-39" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">probs,_,idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tst_dl, with_decoded<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb24-2">idxs</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>tensor([7, 8, 7,  ..., 8, 1, 5])</code></pre>
</div>
</div>
<p>Alright we got the indices of the diseases, we need to map the name to each diseases we can get the label by checking the <code>vocab</code></p>
<div id="cell-41" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">dls.vocab</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>['bacterial_leaf_blight', 'bacterial_leaf_streak', 'bacterial_panicle_blight', 'blast', 'brown_spot', 'dead_heart', 'downy_mildew', 'hispa', 'normal', 'tungro']</code></pre>
</div>
</div>
<div id="cell-42" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dls.vocab))</span>
<span id="cb28-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(idxs.numpy(), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idxs"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(mapping)</span>
<span id="cb28-3">results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>0                       hispa
1                      normal
2                       hispa
3                       blast
4                       blast
                ...          
3464               dead_heart
3465                    hispa
3466                   normal
3467    bacterial_leaf_streak
3468               dead_heart
Name: idxs, Length: 3469, dtype: object</code></pre>
</div>
</div>
<p>Before submit let’s see if our file looks right</p>
<div id="cell-44" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">ss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span>
<span id="cb30-2">ss.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subm.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb30-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>head subm.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>image_id,label
200001.jpg,hispa
200002.jpg,normal
200003.jpg,hispa
200004.jpg,blast
200005.jpg,blast
200006.jpg,brown_spot
200007.jpg,dead_heart
200008.jpg,brown_spot
200009.jpg,hispa</code></pre>
</div>
</div>
<div id="cell-45" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> iskaggle:</span>
<span id="cb32-2">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kaggle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> api</span>
<span id="cb32-3">  api.competition_submit_cli(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subm.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'initial rn26d 128px'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'paddy-disease-classification'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 70.1k/70.1k [00:01&lt;00:00, 48.7kB/s]</code></pre>
</div>
</div>
<p>Alright i got 0.8917 score on the competitions, it’s not that good but it let’s us know what the base line is, then we can improve it later on.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Remember that loss is whatever function we’re decided to use to optimize the parameters of our models, here we’re actually not specific what loss to use, fastai will try to find the best loss to use here for us. In this case we’re using cross-entropy loss.</p>
</div>
</div>
</section>
</section>
<section id="cross-entropy" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="cross-entropy">Cross-Entropy</h2>
<p><em>Cross-Entropy loss</em> is of course a loss function - a function that used to optimized the parameter of our model. It work even if our dependent variable has more than two categories, and results in faster and reliable training.</p>
<p>Let’s look at the activation of our model, in fact let’s just look at one batch of our data</p>
<div id="cell-49" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls.one_batch()</span></code></pre></div>
</div>
<p>It returns the dependent and independent variables as mini-batch</p>
<div id="cell-51" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">y</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>TensorCategory([8, 9, 5, 8, 2, 1, 8, 7, 5, 8, 3, 6, 8, 3, 7, 4, 8, 3, 8, 6, 5,
                6, 0, 5, 8, 8, 7, 5, 8, 9, 8, 8, 7, 7, 9, 4, 7, 3, 9, 7, 7, 5,
                7, 9, 1, 7, 3, 4, 9, 6, 8, 7, 9, 5, 9, 7, 9, 5, 5, 9, 3, 3, 5,
                8], device='cuda:0')</code></pre>
</div>
</div>
<p>We got 64 rows as our batch size is 64, and we get the values ranging from 0 to 9, representing our 10 possible diseases, alright we can even view the predictions in fact it is the activations of the final layer of our neural network by using <code>Learner.get_preds</code></p>
<div id="cell-53" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">preds,_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[(x,y)])</span>
<span id="cb37-2">preds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>tensor([0.2162, 0.0061, 0.0008, 0.0299, 0.0109, 0.0082, 0.0068, 0.0107, 0.5600,
        0.1503])</code></pre>
</div>
</div>
<p>The actual prediction are 10 probabilities between 0 and 1, which add up to 1.</p>
<div id="cell-55" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(preds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), preds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>(10, tensor(1.))</code></pre>
</div>
</div>
<section id="softmax" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="softmax">Softmax</h3>
<p>When a model runs, it’s last layer produces raw numbers, We call these <code>activations</code>, they are not probabilities yet, we need to change these raw number into probabilities, we want each number show how likely the model thinks each options is. So we use softmax activation in the final layer to ensure that the activations are all between 0 and 1. Softmax is similar to sigmoid function, below is what the sigmoid function look like in case you forget it</p>
<div id="cell-59" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">plot_function(torch.sigmoid, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>When you apply a sigmoid function to a single column of activation it turns those numbers to be between 0 and 1, it’s pretty useful activations for our final layer. But hold on and think about it, what if we have more activations than just a single column, let’s say we need to create a neural network that predict wether that image is a image of 3 or 7 that returns 2 activations (one for each number). Alright let’s create 6 images and 2 categories(the first columns is 3, and other is 7)</p>
<div id="cell-61" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">torch.random.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb42-2">acts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb42-3">acts</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>tensor([[ 0.6734,  0.2576],
        [ 0.4689,  0.4607],
        [-2.2457, -0.3727],
        [ 4.4164, -1.2760],
        [ 0.9233,  0.5347],
        [ 1.0698,  1.6187]])</code></pre>
</div>
</div>
<p>We can’t pass this to a sigmoid function directly cuz we can not get rows that add up to 1</p>
<div id="cell-63" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">acts.sigmoid()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>tensor([[0.6623, 0.5641],
        [0.6151, 0.6132],
        [0.0957, 0.4079],
        [0.9881, 0.2182],
        [0.7157, 0.6306],
        [0.7446, 0.8346]])</code></pre>
</div>
</div>
<p>We need to use softmax. Here how we can represent the softmax function</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> softmax(x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> exp(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> exp(x).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Mathematically, here the softmax formula</p>
<p><img src="https://latex.codecogs.com/png.latex?%0As(x_%7Bi%7D)%20=%20%5Cfrac%20%7Be%5E%7Bx_i%7D%7D%20%7B%5Csum%20_%7Bj=1%7D%5EN%20e%5E%7Bx_j%7D%7D%0A"></p>
</div></div><div id="cell-66" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">sm_acts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(acts, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-2">sm_acts</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>tensor([[0.6025, 0.3975],
        [0.5021, 0.4979],
        [0.1332, 0.8668],
        [0.9966, 0.0034],
        [0.5959, 0.4041],
        [0.3661, 0.6339]])</code></pre>
</div>
</div>
<p>In fact sofmax is the multi-category version of sigmoid, we need to use it anytime we have more that two categories and the probabilities must add up to 1</p>
<p>You might wondering why we have exponential the element here in the sofmax function, first of all, the obvious insight is that it helps to make the number to be positive, it also have a nice property: if one the numbers in our activations <code>x</code> is slightly bigger than the other the exponential will amplify it by make it closer to 1. That means the sofmax function really like to pick one class among others so that make sure that your each picture has definite labels</p>
<p>Softmax is just one part of the cross-entropy loss, we need to go through log likelihood</p>
</section>
<section id="log-likelihood" class="level3">
<h3 class="anchored" data-anchor-id="log-likelihood">Log likelihood</h3>
<p>In binary case we use <code>torch.where</code> to select between <code>inputs</code> and <code>1-inputs</code></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mnis_loss(inputs, targets):</span>
<span id="cb49-2">  inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.sigmoid()</span>
<span id="cb49-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.where(targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>inputs, inputs)</span></code></pre></div>
<p>Let’s try to do this using pytorch, first we need to generate our label for 3s and 7s</p>
<div id="cell-69" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">targ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
</div>
<p>Then each item of <code>targ</code> we can use that to select the appropriate column of <code>sm_acts</code> using tensor indexing, like this:</p>
<div id="cell-71" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb51-2">sm_acts[idx, targ]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>tensor([0.6025, 0.4979, 0.1332, 0.0034, 0.4041, 0.3661])</code></pre>
</div>
</div>
<p>Pytorch provide a function which does just that (<code>sm_acts[range(6), targ]</code>) called <code>nll_loss</code> (NLL stands for negative log likelihood)</p>
<div id="cell-73" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sm_acts[idx, targ]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>tensor([-0.6025, -0.4979, -0.1332, -0.0034, -0.4041, -0.3661])</code></pre>
</div>
</div>
<div id="cell-74" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">F.nll_loss(sm_acts, targ, reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>tensor([-0.6025, -0.4979, -0.1332, -0.0034, -0.4041, -0.3661])</code></pre>
</div>
</div>
<p>You might wondering why we need the negative anyway? Well because we want to minimize the loss, the log likelihood of correct label should be maximized(closer to 0 is better, as <img src="https://latex.codecogs.com/png.latex?%5Clog(1)=0">). However optimization algorithms designed to minimize, not to maximize, by adding a negative sign we convert the maximization problem to minimization problem</p>
<p>The math behind it here is that let’s say if <em>p</em> is the probability of the correct class then the negative log likelihood is <img src="https://latex.codecogs.com/png.latex?-%5Clog(p)"> as <em>p</em> approaches 1(perfect prediction), the <img src="https://latex.codecogs.com/png.latex?-%5Clog(p)"> approaches 0(minimum loss), as <em>p</em> approaches 0(bad predictions) <img src="https://latex.codecogs.com/png.latex?-%5Clog(p)"> approaches infinity (maximum loss). Blow are plots demonstrate why we need a negative sign here</p>
<div id="cell-76" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">fig, (ax1,ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb57-2">plt.sca(ax1)</span>
<span id="cb57-3">plot_function(torch.log, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log(x)"</span>, tx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb57-4">ax1.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log(x)'</span>)</span>
<span id="cb57-5">plt.sca(ax2)</span>
<span id="cb57-6">plot_function(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>torch.log(x), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"- log(x)"</span>, tx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb57-7">ax2.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Negative Log Function'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>Text(0.5, 1.0, 'Negative Log Function')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-39-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="i-love-logs" class="level3">
<h3 class="anchored" data-anchor-id="i-love-logs">I love Logs</h3>
<p>Why is that? what if we have a very very small probabilities or even when working with multi-label classification<sup>7</sup> it may involve the multiplication of many small numbers, as you may know it will lead to problems like numerical underflow<sup>8</sup> in computers. we want to transform these probabilities to a large values so we can perform mathematical operation on them. And there is a mathematical function that will help us doing that: <em>the logarithm</em> as you can see in the image above</p>
<p>Not stop there tho, we do want to ensure that our model is able to detect the differences between small numbers as our loss need to be sensitive enough to small changes in probabilities(especially when the model’s predictions are very wrong). Say, probabilities of 0.01 and 0.001 those number are very close together, but in probability, 0.001 is 10 times more confident compare to 0.01. Having said that, by taking the log out of our probabilities, we prevent these important different from being ignored.</p>
<p>One more thing that make log being amazing is this relationship:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog(a%5Ctimes%20b)%20=%20%5Clog(a)%20+%20%5Clog(b)%0A"></p>
<p>What this relationship tells us? Well this means the logarithm increases linearly when the argument increases exponentially or multiplicatively. Logarithms are awesome because when we do multiplication which can create really really large or really really small numbers, can be replaced by addition, which produce numbers that our computer can handle</p>
<p>We compute the loss on the column that contains the correct label, because there’s only one right answer per example, we don’t need to consider the others, because by the definition of softmax, the remain columns is indeed equal 1 minus the activation correspond to the correct label, then we’ll have a loss function that tells how well we are predicting each image. Therefore, making the activation of the correct label as high as possible will also decreasing the activations of the remaining columns</p>
</section>
<section id="negative-log-likelihood" class="level3">
<h3 class="anchored" data-anchor-id="negative-log-likelihood">Negative Log Likelihood</h3>
<p>Then what we do next? We will take the mean of negative log of our probabilities in other the word for each sample(image) we take the negative log of the predicted probability for the correct class as above this give us the loss for each individual sample we then calculate the mean of these individual losses across all samples, that give us the negative log likelihood or cross-entropy loss. One thing to note here that the Pytorch <code>nll_loss</code> assume that you already take the log of the softmax, even on it name have the word log but it dose not do it for you unfortunately</p>
<p>So that is cross-entropy loss in Pytorch, this is available as <code>F.cross_entropy</code> ofr <code>nn.CrossEntropyLoss</code> the <code>F</code> namespace version seems to be used more often by people</p>
<div id="cell-78" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">loss_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span></code></pre></div>
</div>
<div id="cell-79" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">loss_func(acts, targ)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>tensor(1.8045)</code></pre>
</div>
</div>
<div id="cell-80" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">F.cross_entropy(acts, targ)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>tensor(1.8045)</code></pre>
</div>
</div>
<p>By default PyTorch loss functions take the mean of the loss of all items. You can use reduction=‘none’ to disable that:</p>
<div id="cell-82" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">nn.CrossEntropyLoss(reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)(acts, targ)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>tensor([0.5067, 0.6973, 2.0160, 5.6958, 0.9062, 1.0048])</code></pre>
</div>
</div>
<p>Let’s look at the loss above those are numbers that the computer can learn from, but with us human, it is hard to look at those number and and tell how good our model is, so that why we need metrics, Those number are not used in the optimization process but just to help us poor human understand what’s going on. We can also use the confusion matrix to see where our model perform good and not</p>
<div id="cell-84" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn)</span>
<span id="cb66-2">interp.plot_confusion_matrix(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-44-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="looking-for-a-learning-rate" class="level2">
<h2 class="anchored" data-anchor-id="looking-for-a-learning-rate">Looking for a learning rate</h2>
<p>One of the most important things we can do is to find the just right learning rate, if our learning rate is too high our optimizer will step too far from the minimal loss, and repeating this multiple time just make it jump around each side of the valley. Alright just make the learning rate really small to make sure it will never pass our minimal loss right? well of course it can take many epochs to train our model to go to the point, and it not only a waste of time but potentially causing overfitting because each epoch we go though our entire data one time, if we repeat it too much time we would give the computer a chance to memorize it.</p>
<p>So how can we find the perfect learning rate? not too low, not too high but just right? In 2015 the researcher Leslie Smith came up with a brilliant idea, called the <em>learning rate finder</em>. His idea was to start with a very, very small learning rate we use that for one mini-batch(not an epoch) and then look at the losses then increase the learning rate, say, x2, and we do it again and again until the loss get worse instead of better, then we know that we’ve gone too far it’s time to slower down by selecting a learning rate a bit smaller that the previous one.</p>
<p>Here’s the advice from fastai:</p>
<ul>
<li>One order of magnitude less than where the minimum loss was achieved (i.e., the minimum divided by 10)</li>
<li>The last point where the loss was clearly decreasing</li>
</ul>
<div id="cell-86" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet26d'</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)</span>
<span id="cb67-2">learn.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(minimum, steep))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/monarch/miniconda3/lib/python3.12/site-packages/fastai/learner.py:53: FutureWarning:

You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>SuggestedLRs(minimum=0.010000000149011612, steep=0.0006918309954926372)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-45-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see in this plot that the range from 1e-6 to 1e-4 the model doesn’t seem to train at all, from 1e-3 the loss start to decrease until it reaches the minimum at 1e-1 then increasing rapidly, obviously we don’t want the learning rate after 1e-1 as i explained above. So choose 1e-1 then? While the loss minimum around the learning rate of 1e-1 it might give a good results, it’s right at the edge of stable as after this point there’s a sharp increase in the loos, in practice it often safer to choose a learning rate slightly lower than this threshold to ensure stability across different runs or datasets. Alright let’s choose 3e-3 to see</p>
<div id="cell-88" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet26d'</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)</span>
<span id="cb70-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, base_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.861936</td>
<td>1.138522</td>
<td>0.362326</td>
<td>00:58</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.208978</td>
<td>0.829224</td>
<td>0.271985</td>
<td>01:04</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.943550</td>
<td>0.610545</td>
<td>0.196060</td>
<td>01:03</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.784365</td>
<td>0.570067</td>
<td>0.183085</td>
<td>01:03</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Alright, we’ve got a pretty good learning rate, let’s look at how we can fine-tune the weights of a pretrained model.</p>
</section>
<section id="transfer-learning" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="transfer-learning">Transfer Learning</h2>
<p>We’ve used transfer learning a lot in fact but, what it really is, and how it work? Pretrained model is trained on millions of data points(such as ImageNet) then it is fine-tuned for other tasks.</p>
<p>We now know that a convolutional neural network consists of many layers with a nonlinear activation between each pairs of layers, followed by one or several final linear layers with an activation function like sofmax at the very end. The final linear layer uses a matrix that has number of columns(which determine the size of the outputs) should match the number of classes in our classification problem. This final layers is useless for us when we fine-tuning it because the number of class is likely different, the specific categories it was trained on to identify are different. So we throw it away and replace it with new linear layer with the correct number of outputs for our specific task.</p>
<p>When we add a new linear layer for our specific task it weights are indeed initialized randomly, despite that the entire pretrained model is not random at all, all the layers before the final layers still retain their pretrained weights, which encoded valuable information, such as finding gradient and edges, and later on layer can identify eyeballs, and fur. We want to train it in a way that make it still remember all of these generally useful ideas that it has trained on, and use that to solve our problem.</p>
<p>So our problem is replace the random weights in our added layers with weights that are correctly achieve our desire task without breaking the carefully pretrained weights. So what we can do is to tell the optimizer to only update the weights in those randomly added final layers, don’t change the weights in the rest of the neuron network at all in other word freezing those pretrained layers. When we use <code>fine-tune</code> fastai automatically freezes all the pretrained layers for us, in fact it does these two things:</p>
<ul>
<li>First it trains the randomly added layers for one epoch, with all other layers frozen</li>
<li>Then it unfreezes all other layers and train them all with the number of epoch we tell it</li>
</ul>
<p>That why when fine-tune we always have a table with one column above then the table with the number of epoch blow it.</p>
<p>In fact <code>fine_tune</code> first does <code>fit_one_cycle</code> then unfreeze and does <code>fit_one_cycle</code> again. Alright let’s do it manually this time</p>

<div class="no-row-height column-margin column-container"><div id="cell-90" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">learn.fine_tune??</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Signature:</span>

learn<span class="ansi-blue-fg">.</span>fine_tune<span class="ansi-blue-fg">(</span>

    epochs<span class="ansi-blue-fg">,</span>

    base_lr<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">0.002</span><span class="ansi-blue-fg">,</span>

    freeze_epochs<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">,</span>

    lr_mult<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">100</span><span class="ansi-blue-fg">,</span>

    pct_start<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">0.3</span><span class="ansi-blue-fg">,</span>

    div<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">5.0</span><span class="ansi-blue-fg">,</span>

    <span class="ansi-blue-fg">*</span><span class="ansi-blue-fg">,</span>

    lr_max<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>

    div_final<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">100000.0</span><span class="ansi-blue-fg">,</span>

    wd<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>

    moms<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>

    cbs<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>

    reset_opt<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span>

    start_epoch<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">,</span>

<span class="ansi-blue-fg">)</span>

<span class="ansi-red-fg">Source:</span>   

<span class="ansi-blue-fg">@</span>patch

<span class="ansi-blue-fg">@</span>delegates<span class="ansi-blue-fg">(</span>Learner<span class="ansi-blue-fg">.</span>fit_one_cycle<span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">def</span> fine_tune<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">:</span>Learner<span class="ansi-blue-fg">,</span> epochs<span class="ansi-blue-fg">,</span> base_lr<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">2e-3</span><span class="ansi-blue-fg">,</span> freeze_epochs<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">,</span> lr_mult<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">100</span><span class="ansi-blue-fg">,</span>

              pct_start<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">0.3</span><span class="ansi-blue-fg">,</span> div<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">5.0</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>

    <span class="ansi-blue-fg">"Fine tune with `Learner.freeze` for `freeze_epochs`, then with `Learner.unfreeze` for `epochs`, using discriminative LR."</span>

    self<span class="ansi-blue-fg">.</span>freeze<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>

    self<span class="ansi-blue-fg">.</span>fit_one_cycle<span class="ansi-blue-fg">(</span>freeze_epochs<span class="ansi-blue-fg">,</span> slice<span class="ansi-blue-fg">(</span>base_lr<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> pct_start<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">0.99</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>

    base_lr <span class="ansi-blue-fg">/=</span> <span class="ansi-cyan-fg">2</span>

    self<span class="ansi-blue-fg">.</span>unfreeze<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>

    self<span class="ansi-blue-fg">.</span>fit_one_cycle<span class="ansi-blue-fg">(</span>epochs<span class="ansi-blue-fg">,</span> slice<span class="ansi-blue-fg">(</span>base_lr<span class="ansi-blue-fg">/</span>lr_mult<span class="ansi-blue-fg">,</span> base_lr<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> pct_start<span class="ansi-blue-fg">=</span>pct_start<span class="ansi-blue-fg">,</span> div<span class="ansi-blue-fg">=</span>div<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>

<span class="ansi-red-fg">File:</span>      ~/miniconda3/lib/python3.12/site-packages/fastai/callback/schedule.py

<span class="ansi-red-fg">Type:</span>      method</pre>
</div>
</div>
</div></div><div id="cell-91" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet26d'</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)</span>
<span id="cb72-2">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.797806</td>
<td>1.022250</td>
<td>0.333974</td>
<td>01:01</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.111010</td>
<td>0.680857</td>
<td>0.217203</td>
<td>01:02</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.841627</td>
<td>0.611456</td>
<td>0.190293</td>
<td>00:59</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>We unfreeze the model</p>
<div id="cell-93" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">learn.unfreeze()</span></code></pre></div>
</div>
<p>We also need to fine a new learning rate because we trained it with more layers, and weights that already train for 3 epochs means our previous founded learning rate isn’t appropriate anymore</p>
<div id="cell-95" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">learn.lr_find()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/monarch/miniconda3/lib/python3.12/site-packages/fastai/learner.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state = torch.load(file, map_location=device, **torch_load_kwargs)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>SuggestedLRs(valley=6.30957365501672e-05)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-50-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>alright let’s pick 1e-4 this time</p>
<div id="cell-97" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, lr_max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.719057</td>
<td>0.490316</td>
<td>0.155694</td>
<td>01:06</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.512388</td>
<td>0.341793</td>
<td>0.097549</td>
<td>01:05</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.364478</td>
<td>0.241446</td>
<td>0.069678</td>
<td>01:04</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.255537</td>
<td>0.206497</td>
<td>0.064392</td>
<td>01:00</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.207048</td>
<td>0.193223</td>
<td>0.059106</td>
<td>01:05</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.171621</td>
<td>0.182925</td>
<td>0.057184</td>
<td>01:03</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Well it improve our model a lot from 0.18 to 0.06, in fact when i submit the predictions from the model we’ve built i got a pretty good result, it’s 0.93778, which improves a lot. Alright let’s see how our model train</p>
<div id="cell-99" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">learn.recorder.plot_loss()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-52-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="how-long-to-train" class="level2">
<h2 class="anchored" data-anchor-id="how-long-to-train">How Long to Train?</h2>
<p>Well the first approach to train should be simply pick a number of epochs that will train in the amount of time that you’re happy to wait for, maybe take a cup of water, scrolling reddit, reading stuff,… then look at the training and validation loss plot like above and if you see it getting better when it comes to your final epochs, then you know that you should train it longer. In other hand you may see that the metrics you chosen really getting worse at the end of the training(remember that it’s not just that we’re looking for the validation loss to get worse, but the actual metrics). While the loss function is essential for optimization, what truly matters are your chosen practical metrics, don’t be overly concerned with validation loss inconstancy if your metric are still improving.</p>
<p>If you find you’ve trained for too long (your metrics getting worse, loss getting worse), what you should do is retrain your model from scratch, really, and this time choose the number of epochs based on where your previous best result was found. One more thing if you have extra time available instead of just simply increasing epochs consider using that time to train more parameters or use deeper architecture, this can potentially yield better results than extended training of a simpler model.</p>
</section>
<section id="mixed-precision-training" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="mixed-precision-training">Mixed Precision Training</h2>
<p>Alright let’s train it for one more time. This time notice i use <code>to_fp16</code> here, it called <em>mixed-precision training</em> it used for speeding time up especially when we using a big architecture. I highly recommend you to read <a href="https://docs.nvidia.com/deeplearning/performance/mixed-precision-training/index.html">this post from NVIDIA</a>.</p>
<p>But basically you first need to understand what is half-precision? Well it’s a floating-point number format uses 16 bits to represent numbers it called half-precision as the more common are 32 bits (single precision) and 64 bits (double precision).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/fp16.png" class="img-fluid figure-img"></p>
<figcaption>half float</figcaption>
</figure>
</div>
<p>As you can see we have one bit to represent sign 5 for exponent bits while 10 for fraction bits. For instance, between 1 and 2, it can only represents the number <img src="https://latex.codecogs.com/png.latex?1,%201+2%5E%7B-10%7D,%201+2%5Cast2%5E%7B-10%7D">,… which mean if we plus 1 with a number smaller than <img src="https://latex.codecogs.com/png.latex?2%5E%7B-10%7D">(approximately 0.0009765625) we will get 1 instead of a number slightly greater than 1. let’s say 1 + 0.0001 = 1 in half precision, that means it less precise than single or double precision, with only about 3 decimal digits of precision. So it helps reduce the memory usage by half compare to single precision, or we can double our batch, model size. Another very nice feature is that NVIDIA developed its latest GPUs (the Volta generation) to take fully advantage of half-precision tensors.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>When we talk about <img src="https://latex.codecogs.com/png.latex?2%5E%7B-10%7D">, we’re referring to the smallest positive value that can be represented in the fraction part of the number. We have 10 bits to represent fraction part which mean it can represent <img src="https://latex.codecogs.com/png.latex?2%5E%7B10%7D%20=%201024"> different values, these 1024 values are distributed eventually between 0 and 1. In fact, it’s the smallest step between these values so we divide the range(which is 1 here) by the possible value (<img src="https://latex.codecogs.com/png.latex?2%5E%7B10%7D">):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1%7D%7B2%5E%7B10%7D%7D%20=%202%5E%7B-10%7D%0A"></p>
</div></div><p>But there’re several problem with half precision when using it:</p>
<ol type="1">
<li>The weight update is imprecise: What your optimizer does under the hood is basically this equation w = w - lr * w.grad for each weights of your network. So the problem is the w.grad is several order of magnitude below w especially as the network starts to converge, these gradient often become very small as the network is making tiny and tiny adjustment, even smaller than <img src="https://latex.codecogs.com/png.latex?2%5E%7B-10%7D"> is very common, so when using half precision, obviously the update doesn’t do anything here as FP16 can’t represent the tiny difference between w and (w - lr * w.grad).</li>
<li>During the backpropagation of gradients, the gradients themselves become so small that they are rounded down to 0 in FP16.</li>
<li>Your activation or loss can be overflow, the opposite problem from the gradients as during forward propagation, activation function like RElU or exponential function like softmax can produce a large values therefore it also make loss result in large numbers (especially in early training), it’s more easier to hit nan(of infinity) in FP16 precision and your training my more likely diverge.</li>
</ol>
<p>So the solution for this is mixed precision training, instead of fully train in FP16 precision some of the operations will be done in FP16, others in FP32. The main idea is that we will do the forward pass and the gradient computation in half precision to go fast, but the update in single precision. So our training loop will look like this:</p>
<ol type="1">
<li>compute the output with FP16 model, and loss</li>
<li>back-propagate the gradients in half-precision</li>
<li>we copy the gradient in FP32 precision</li>
<li>do the update on the master model (in FP32 precision)</li>
<li>copy the master model in the FP16 model</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that we will lose precision during step 5, and that the 1.0001 in one of the weights will go back to 1. But if the next update corresponds to add 0.0001 again, since the optimizer step is done on the master model, the 1.0001 will become 1.0002 and if we eventually go like this up to 1.0005, the FP16 model will be able to tell the difference.</p>
</div>
</div>
<p>Alright that’s solve the first problem. For the second problem we use something call the gradient scaling. To avoid the gradient getting zeroed by FP16 precision we multiple the loss by the scale factor(often scale=512), by multiplying the loss with a large numbers all the gradients are effectively made larger. Of course we don’t want those 512-scaled gradients to be in the weight updates so that after converting them into FP32 we can divide them by this scale. So it change the loop to:</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>In fact the scaling factor that we multiply it with the loss can leads our gradients or our loss to be overflow. So there a way around this, which is just simple as this, first we will try with a very high scale factor and see if it cause overflow to our loss or gradients, if it does, we will try with the half of that big value and again until we get the largest loss scale possible that doesn’t make our gradient overflow.</p>
</div></div><ol type="1">
<li>compute the output with the FP16 model, then the loss</li>
<li>multiply the loss by scale and then back-propagate the gradients in half precision</li>
<li>copy the gradients in FP32 precision then divide them by the scale</li>
<li>do the update on the master model</li>
<li>copy the master model in FP16 model</li>
</ol>
<p>For the last problem, the tricks offered by NVIDIA are to leave the batchnorm layers in single precision (they don’t have many weights so it’s not a big memory challenge) and compute the loss in single precision (which means converting the last output of the model in single precision before passing it to the loss).</p>
<p>Alright let’s apply our mixed precision strategy to our model, when we create a learner we call <code>to_fp16()</code>.</p>
<div id="cell-106" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet26d'</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>).to_fp16()</span>
<span id="cb79-2">learn.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[valley, slide])</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/fastai/learner.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state = torch.load(file, map_location=device, **torch_load_kwargs)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>SuggestedLRs(valley=0.0012022644514217973, slide=0.002511886414140463)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-53-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-107" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>, freeze_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.907815</td>
<td>1.100638</td>
<td>0.353676</td>
<td>00:41</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.442608</td>
<td>1.050639</td>
<td>0.346468</td>
<td>00:41</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1.303783</td>
<td>0.873419</td>
<td>0.289284</td>
<td>00:42</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.892789</td>
<td>0.587087</td>
<td>0.187410</td>
<td>00:42</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.721903</td>
<td>0.487567</td>
<td>0.159058</td>
<td>00:41</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.625562</td>
<td>0.414129</td>
<td>0.140317</td>
<td>00:42</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.559306</td>
<td>0.321464</td>
<td>0.098510</td>
<td>00:41</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.437455</td>
<td>0.248258</td>
<td>0.069678</td>
<td>00:41</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.332489</td>
<td>0.218854</td>
<td>0.059106</td>
<td>00:42</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.265161</td>
<td>0.221709</td>
<td>0.059106</td>
<td>00:41</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.205299</td>
<td>0.193941</td>
<td>0.052859</td>
<td>00:41</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.189015</td>
<td>0.177993</td>
<td>0.044690</td>
<td>00:42</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.141942</td>
<td>0.173127</td>
<td>0.044690</td>
<td>00:42</td>
</tr>
<tr class="odd">
<td>10</td>
<td>0.137524</td>
<td>0.150655</td>
<td>0.041326</td>
<td>00:41</td>
</tr>
<tr class="even">
<td>11</td>
<td>0.111285</td>
<td>0.146560</td>
<td>0.034118</td>
<td>00:41</td>
</tr>
<tr class="odd">
<td>12</td>
<td>0.106115</td>
<td>0.145193</td>
<td>0.034599</td>
<td>00:42</td>
</tr>
<tr class="even">
<td>13</td>
<td>0.105035</td>
<td>0.143570</td>
<td>0.033157</td>
<td>00:41</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Alright let’s see if it’s better, the best way to check is to submit it to kaggle we just do the same thing as above, just copy and past it here.</p>
<div id="cell-109" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample_submission.csv'</span>)</span>
<span id="cb83-2">tst_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_images'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span>
<span id="cb83-3">tst_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls.test_dl(tst_files)</span>
<span id="cb83-4">probs,_,idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tst_dl, with_decoded<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb83-5">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dls.vocab))</span>
<span id="cb83-6">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(idxs.numpy(), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idxs"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(mapping)</span>
<span id="cb83-7">ss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span>
<span id="cb83-8">ss.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subm.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb83-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>head subm.csv</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()
/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>image_id,label
200001.jpg,hispa
200002.jpg,normal
200003.jpg,blast
200004.jpg,blast
200005.jpg,blast
200006.jpg,brown_spot
200007.jpg,dead_heart
200008.jpg,brown_spot
200009.jpg,hispa</code></pre>
</div>
</div>
<p>This time i got a little higher result, i got 0.95967 as score which is pretty understandable as we trained it with 14 epochs, but yeah that was pretty cool.</p>
</section>
<section id="scaling-up" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="scaling-up">Scaling up</h2>
<p>Alright, can we do better, let’s see how far we can go, let’s do some experimenting, we will use different architectures and image processing approaches, for the sake of convenient let’s put our steps together into a little function.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that we can use <code>ImageDataLoader.from_folder</code> for our dataloader for make it shorter, but in general it the same as DataBlock</p>
</div>
</div>
<div id="cell-113" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T10:58:38.001235Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T10:58:38.000944Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T10:58:38.006134Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T10:58:38.005191Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T10:58:38.001214Z&quot;}}" data-trusted="true" data-execution_count="3">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train(arch, item, batch, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb86-2">  dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_folder(train_path, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>item, batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch)</span>
<span id="cb86-3">  learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, arch, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate).to_fp16()</span>
<span id="cb86-4">  learn.fine_tune(epochs, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>)</span>
<span id="cb86-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> learn</span></code></pre></div>
</div>
<p>To have a better result, one way to archive this is to use a better model right, but what to choose, well Jeremy Howard has a really good <a href="https://www.kaggle.com/code/jhoward/the-best-vision-models-for-fine-tuning">notebook</a> that helps us choosing a appropriate architecture for our model based on what kind of problem you’re dealing, the GPU memory, error rate, time,… But basically there are two key to choose the right one:</p>
<ol type="1">
<li>How similar between our dataset and the pretrained model’s dataset.</li>
<li>How large they are.</li>
</ol>
<p>Then it turned out that when it comes to computer vision model <code>convnext</code> model is one of the best, if not the best till now so let’s give it a try shall we?</p>
<div id="cell-115" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T10:58:39.060620Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T10:58:39.060322Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T10:58:39.064862Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T10:58:39.063867Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T10:58:39.060596Z&quot;}}" data-trusted="true" data-execution_count="4">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">arch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"convnext_small_in22k"</span></span></code></pre></div>
</div>
<p>From now on, if you not sure what architecture to use, just use this, right. And of course we have different version of <code>convnext</code> we have tinny, small, large… it will take more time to train but of course lower error rate. alright let’s see how it will go</p>
<div id="cell-117" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(arch, item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>,method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"squish"</span>), batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/timm/models/_factory.py:117: UserWarning: Mapping deprecated model name convnext_small_in22k to current convnext_small.fb_in22k.
  model = create_fn(</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0edc311bb36441c09986cd539a71048e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()
/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.257208</td>
<td>0.790532</td>
<td>0.246997</td>
<td>00:46</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.610890</td>
<td>0.450510</td>
<td>0.146564</td>
<td>00:44</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.504428</td>
<td>0.302570</td>
<td>0.097069</td>
<td>00:44</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.299630</td>
<td>0.194396</td>
<td>0.061989</td>
<td>00:44</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.186308</td>
<td>0.130406</td>
<td>0.036521</td>
<td>00:44</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.134839</td>
<td>0.115092</td>
<td>0.035079</td>
<td>00:43</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Well it did a pretty good job isn’t it? we just do 5 epochs and we archive almost the same as the one we trained with 12 epochs, even our time to go through each epoch is the same(that’s because i reduce the presize to 192X192 for it to run faster but it still produce the same performance as the previous one but with fewer epochs).</p>
<p>So one thing we could try is instead of using squish as our pre-processing let’s try using padding, now we will use bigger presize so that when we use padding here we will get entire image but the downside is we also get few extra zero pixels which literally pointless, but whatever let’s see if it work better</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>padding is interesting because it’s the only way of pre-processing images which doesn’t distort them and doesn’t loose anything, if you crop you lose things, if you squish you distort things</p>
</div></div><div id="cell-120" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_folder(train_path, valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,</span>
<span id="cb91-2">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PadMode.Zeros))</span>
<span id="cb91-3">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-59-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-121" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T09:53:36.244933Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T09:53:36.244542Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T10:03:20.563150Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T10:03:20.562113Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T09:53:36.244902Z&quot;}}" data-trusted="true" data-execution_count="7">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(arch, item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>), method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PadMode.Zeros), batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>), min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/timm/models/_factory.py:117: UserWarning: Mapping deprecated model name convnext_small_in22k to current convnext_small.fb_in22k.
  model = create_fn(</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4ca9382aab4d4b6ebfa4e3d3a37e7e18","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()
/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.091136</td>
<td>0.672584</td>
<td>0.214320</td>
<td>01:12</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.579350</td>
<td>0.418952</td>
<td>0.131187</td>
<td>01:36</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.430034</td>
<td>0.259760</td>
<td>0.086497</td>
<td>01:37</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.275291</td>
<td>0.176225</td>
<td>0.046612</td>
<td>01:38</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.147642</td>
<td>0.123821</td>
<td>0.037963</td>
<td>01:38</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.109251</td>
<td>0.107270</td>
<td>0.030274</td>
<td>01:38</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>As you can see it indeed did better, and its error_rate is the best we can get so far but not huge different yet!</p>
<section id="test-time-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="test-time-augmentation">Test Time Augmentation</h3>
<p>Well first let’s look how can we calculate the error rate manually with our normal prediction</p>
<div id="cell-123" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T10:03:54.927689Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T10:03:54.927216Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T10:04:07.727666Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T10:04:07.726181Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T10:03:54.927654Z&quot;}}" data-trusted="true" data-execution_count="8">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.valid</span>
<span id="cb95-2">preds,targs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid)</span>
<span id="cb95-3">error_rate(preds, targs)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>TensorBase(0.0303)</code></pre>
</div>
</div>
<p>Well that actually the previous error-rate we got above, so what i’m doing here? well let’s take a look at the images blow</p>
<div id="cell-125" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T10:04:10.629694Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T10:04:10.629391Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T10:04:11.977555Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T10:04:11.976421Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T10:04:10.629672Z&quot;}}" data-trusted="true" data-execution_count="9">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1">learn.dls.train.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/index_files/figure-html/cell-62-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Notice that, those are indeed the same picture but it gone through the data augmentation so sometimes it a bit darker, a bit lighter, sometimes it flipped horizontally, some times int zoom into a slightly different section, sometimes it rotate a little bit but those are all the same picture. So the idea of TTA(Test Time Augmentation) is maybe our model would like some of these version better than the others even the original image, so what we can do is we can pass all of these to our model get the prediction of all of them and take the average right, so if you read my previous blog, it’s indeed the mini version of bagging approach. In fastai you can archive this by using the <code>tta</code> in our <code>learn</code> object</p>
<div id="cell-127" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T10:04:12.249981Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T10:04:12.249642Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T10:05:16.237725Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T10:05:16.236670Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T10:04:12.249954Z&quot;}}" data-trusted="true" data-execution_count="10">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">tta_preds,_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.tta(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="0" class="" max="5" style="width:300px; height:20px; vertical-align: middle;"></progress>
      
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
<div id="cell-128" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T10:05:22.943221Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T10:05:22.942752Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T10:05:22.951969Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T10:05:22.951021Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T10:05:22.943184Z&quot;}}" data-trusted="true" data-execution_count="11">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">error_rate(tta_preds, targs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>TensorBase(0.0259)</code></pre>
</div>
</div>
<p>See, we got better result like 10% better our previous. Alright let’s train it with more epochs but this time let’s just make a bigger image and something really interesting is that our images don’t have to be square they just need to be in the same size right, it can be rectangular, having said that all of our original images are nearly 640x480, so we just need to pick one has the same aspect ratio for example 256x192 is good</p>
<div id="cell-130" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T10:58:44.236186Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T10:58:44.235876Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T11:17:32.223793Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T11:17:32.222832Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T10:58:44.236162Z&quot;}}" data-trusted="true" data-execution_count="5">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(arch, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>), method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PadMode.Zeros), batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>), min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/timm/models/_factory.py:117: UserWarning: Mapping deprecated model name convnext_small_in22k to current convnext_small.fb_in22k.
  model = create_fn(</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c6339ec349dc43059e0d43dba1b0454e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()
/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.091136</td>
<td>0.672584</td>
<td>0.214320</td>
<td>01:09</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.534227</td>
<td>0.295779</td>
<td>0.100432</td>
<td>01:25</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.406855</td>
<td>0.259834</td>
<td>0.077847</td>
<td>01:26</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.345489</td>
<td>0.217263</td>
<td>0.065353</td>
<td>01:26</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.272754</td>
<td>0.186886</td>
<td>0.056704</td>
<td>01:26</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.220682</td>
<td>0.205609</td>
<td>0.054781</td>
<td>01:27</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.182489</td>
<td>0.122831</td>
<td>0.037001</td>
<td>01:27</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.118704</td>
<td>0.119720</td>
<td>0.035560</td>
<td>01:26</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.099475</td>
<td>0.117059</td>
<td>0.034118</td>
<td>01:26</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.071605</td>
<td>0.094223</td>
<td>0.025949</td>
<td>01:26</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.055326</td>
<td>0.096391</td>
<td>0.025949</td>
<td>01:26</td>
</tr>
<tr class="odd">
<td>10</td>
<td>0.037327</td>
<td>0.096320</td>
<td>0.024507</td>
<td>01:26</td>
</tr>
<tr class="even">
<td>11</td>
<td>0.035568</td>
<td>0.094268</td>
<td>0.023066</td>
<td>01:27</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Alright our error_rate down to 2.3% which is pretty good, now, let’s what our error_rate when using tta</p>
<div id="cell-132" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T11:18:00.693869Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T11:18:00.693464Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T11:19:00.635588Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T11:19:00.634596Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T11:18:00.693833Z&quot;}}" data-trusted="true" data-execution_count="6">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1">tta_preds,targs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.tta(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learn.dls.valid)</span>
<span id="cb104-2">error_rate(tta_preds, targs)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="0" class="" max="12" style="width:300px; height:20px; vertical-align: middle;"></progress>
      
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>TensorBase(0.0235)</code></pre>
</div>
</div>
<p>Oops! it’s worse this time, that’s strange, i think it won’t always produce a better error_rate, but maybe it will work well in practice i guess, alright forget about it, let’s submit it</p>
<div id="cell-134" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2025-01-02T11:19:00.637385Z&quot;,&quot;iopub.status.busy&quot;:&quot;2025-01-02T11:19:00.637036Z&quot;,&quot;iopub.status.idle&quot;:&quot;2025-01-02T11:20:43.617429Z&quot;,&quot;shell.execute_reply&quot;:&quot;2025-01-02T11:20:43.616028Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2025-01-02T11:19:00.637353Z&quot;}}" data-trusted="true" data-execution_count="7">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample_submission.csv'</span>)</span>
<span id="cb106-2">tst_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_images'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span>
<span id="cb106-3">tst_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.test_dl(tst_files)</span>
<span id="cb106-4">preds,_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.tta(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tst_dl)</span>
<span id="cb106-5">idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preds.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb106-6">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(learn.dls.vocab)</span>
<span id="cb106-7">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(vocab[idxs], name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idxs"</span>)</span>
<span id="cb106-8">ss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span>
<span id="cb106-9">ss.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subm.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb106-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>head subm.csv</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()
/usr/local/lib/python3.10/dist-packages/fastai/callback/fp16.py:47: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.autocast,self.learn.scaler,self.scales = autocast(dtype=dtype),GradScaler(**self.kwargs),L()</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="0" class="" max="12" style="width:300px; height:20px; vertical-align: middle;"></progress>
      
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>image_id,label
200001.jpg,hispa
200002.jpg,normal
200003.jpg,blast
200004.jpg,blast
200005.jpg,blast
200006.jpg,brown_spot
200007.jpg,dead_heart
200008.jpg,brown_spot
200009.jpg,hispa</code></pre>
</div>
</div>
<p>This time i got a little bit higher result, around 0.98 which is quite impressive. So we’ve gone through all of the essential concepts that we need to get familiar with as later we will delve deeper and deeper into more amazing thing later on, understand these concepts is like a solid groundwork for us to exploring even more fascinating topics in the future.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Interpolation in image processing is the technique of estimating new pixel values when resizing or transforming a digital image. It’s like filling in the blanks between known pixels to create a smooth transition when changing an image’s size, rotation or shape↩︎</p></li>
<li id="fn2"><p>While the crop is indeed random, but it’s not entirely arbitrary. The goal is to create diversity in the training data, which helps the model learn to recognize objects and features from various perspectives and scales. In practice, it often use multiple crops from a single image during training, this increase the chances of capturing important features at least some of the crops.↩︎</p></li>
<li id="fn3"><p>a resize method which resizes the image to fit within the target dimensions and adds padding (usually black) to fill the rest, it keeps the original aspect ratio and all image information, however it can lead to artificial background which might affect model performance. Use it when you have to keep the entire image and the its aspect ratio is important and of course be a wear of extra background↩︎</p></li>
<li id="fn4"><p>a resize method which resizes the image to fit the target dimensions, potentially distorting the aspect ratio. it helps preserves all information in the image, but at the same time it can distort the image, potentially altering important features. Use it when the aspect ratio is not crucial for your task, or when your imagees are already mostly square↩︎</p></li>
<li id="fn5"><p>Resizes the image and then crops it to fit the target dimensions. Help maintains aspect ratio of the visible part and doesn’t introduce distortion, however it may lose important information at the edges of the image. Use it when the main subject is typically centered in your images, or when edge information is less important.↩︎</p></li>
<li id="fn6"><p>It will attempt to create a batch from the source you give it, with a lot of details. Also, if it fails, you will see exactly at which point the error happens, and the library will try to give you some help. For instance, one common mistake is to forget to use a Resize transform, so you end up with pictures of different sizes and are not able to batch them.↩︎</p></li>
<li id="fn7"><p>in multi label classification, each instance can belong to multiple classes simultaneously, imagine working on a dog cat classification, where an image could contain both dog and cat at the same time so in this problem it requires us to do multiplications on probabilities which will lead to numerical underflow problem in computer science↩︎</p></li>
<li id="fn8"><p>Number underflow occurs when a computation results in a number too small for computer to represent accurately, often leading to be rounded to 0↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>kaggle</category>
  <category>competition</category>
  <category>deep learning</category>
  <guid>https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/</guid>
  <pubDate>Sun, 29 Dec 2024 17:00:00 GMT</pubDate>
  <media:content url="https://bhdai.github.io/blog/posts/2024-12-30-deep-learning-concepts/paddy-disease-farmer.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Exploring Random Forest, Bagging, Boosting?</title>
  <dc:creator>Bui Huu Dai</dc:creator>
  <link>https://bhdai.github.io/blog/posts/2024-11-12-random-forest/</link>
  <description><![CDATA[ 






<p>What’s up! It’s been a long time since the last post, i’m quite lazy recently, but from know i will try to write more blog post though. I’ve revisited the Titanic dataset, this time through the lens of ensemble learning techniques. Previously I wrote about this dataset in this <a href="https://bhdai.github.io/blog/posts/titanic_competition/">blog</a>, but now, let’s dive into why random forests and gradient boosting machine are particularly suitable for tabular data.</p>
<p>You might ask, “Why not just use logistic regression?” While it seems simple, logistic regression can be surprisingly difficult to get right especially with transformation, interactions, and outlier handling. Random forests, on the other hand, offers resilience and robustness that are hard to match, which I’ll explain today.</p>
<p>To start, building a random forest is insightful help demystify the intricacies of machine learning algorithm. I’ll also touch on bagging and boosting, giving a clear view of their strengths</p>
<p>On a practical note, a helpful tip I’ve stumbled upon is using fastai’s import to efficiently bringing in essential libraries like Numpy an pandas. Here’s the snippet to simplify your setup:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2">np.set_printoptions(linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>)</span></code></pre></div>
</div>
<p>These tools and techniques have enhanced my learning journey, and I’m excited to share these insights with you. Alright without any further ado let’s get right into it.</p>
<section id="decision-tree" class="level2">
<h2 class="anchored" data-anchor-id="decision-tree">Decision Tree</h2>
<section id="data-processing" class="level3">
<h3 class="anchored" data-anchor-id="data-processing">Data Processing</h3>
<p>First off, ensure that you have the Titanic dataset downloaded, Here’s the quick setup:</p>
<div id="cell-7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zipfile, kaggle</span>
<span id="cb2-2"></span>
<span id="cb2-3">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titanic'</span>)</span>
<span id="cb2-4">kaggle.api.competition_download_cli(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(path))</span>
<span id="cb2-5">zipfile.ZipFile(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>).extractall(path)</span>
<span id="cb2-6"></span>
<span id="cb2-7">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train.csv'</span>)</span>
<span id="cb2-8">tst_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.csv'</span>)</span>
<span id="cb2-9">modes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.mode().iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading titanic.zip to /home/monarch/workplace/random_forest</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 34.1k/34.1k [00:00&lt;00:00, 365kB/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
</div>
<p>I’ve previously detailed the intricacies of processing the Titanic dataset in a separate blog post which you might find useful. For now, let’s breeze through some basic data processing steps without going into too much detail:</p>
<div id="cell-9" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> proc_data(df):</span>
<span id="cb7-2">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.Fare.fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-3">    df.fillna(modes, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-4">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log1p(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>])</span>
<span id="cb7-5">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Categorical(df.Embarked)</span>
<span id="cb7-6">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sex'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Categorical(df.Sex)</span>
<span id="cb7-7"></span>
<span id="cb7-8">proc_data(df)</span>
<span id="cb7-9">proc_data(tst_df)</span></code></pre></div>
</div>
<p>Our next task involves organizing the data by identifying continuous and categorical variables, along with dependent variable we’re predicting</p>
<div id="cell-11" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">cats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Embarked"</span>]</span>
<span id="cb8-2">conts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SibSp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Parch'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pclass"</span>]</span>
<span id="cb8-3">dep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survived"</span></span></code></pre></div>
</div>
<p>Now, a brief look at how <code>Pandas</code> handles categorical variables. Let’s consider the <code>Sex</code> column:</p>
<div id="cell-13" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df.Sex.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>0      male
1    female
2    female
3    female
4      male
Name: Sex, dtype: category
Categories (2, object): ['female', 'male']</code></pre>
</div>
</div>
<p>It’s fascinating, although it appears unchanged(still just <code>Male</code> and <code>Female</code>), it’s now a category with a predefine list. Behind the magic, Pandas cleverly assigns numerical codes for these categories for efficient processing:</p>
<div id="cell-15" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">df.Sex.cat.codes.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>0    1
1    0
2    0
3    0
4    1
dtype: int8</code></pre>
</div>
</div>
<p>It’s actually turned them into numbers. This transformation sets the stage for our decision tree modeling</p>
</section>
<section id="binary-split" class="level3">
<h3 class="anchored" data-anchor-id="binary-split">Binary Split</h3>
<p>A random forest is essentially an ensemble of decision trees, and each tree is constructed from a series of binary split. But what exactly is a binary split?</p>
<p>Imagine taking all the passengers on the Titanic and dividing them into males and females to examine their survival rates.</p>
<div id="cell-19" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb13-2"></span>
<span id="cb13-3">fig,axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb13-4">sns.barplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dep, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survival rate"</span>)</span>
<span id="cb13-5">sns.countplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>we see a stark difference: about a 20% survival rate for males and 75% for females, there are roughly twice as many males as females. If you base a model solely on sex, predicting survival becomes surprisingly effective: men likely didn’t survive, while woman likely did this division by sex exemplifies a binary split - it simple divide the data into two distinct groups.</p>
<p>To test the efficacy of this basic model, we first split our data into training and test dataset and encode our categorical variables.</p>
<div id="cell-21" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb14-3"></span>
<span id="cb14-4">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb14-5">trn_df,val_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb14-6">trn_df[cats] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trn_df[cats].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.cat.codes)</span>
<span id="cb14-7">val_df[cats] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> val_df[cats].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.cat.codes)</span></code></pre></div>
</div>
<p>Next, let’s create function to to extract independent variables (<code>xs</code>) and the dependent variable (<code>y</code>).</p>
<div id="cell-23" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> xs_y(df):</span>
<span id="cb15-2">    xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[cats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>conts].copy()</span>
<span id="cb15-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> xs,df[dep] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> dep <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb15-4"></span>
<span id="cb15-5">trn_xs,trn_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs_y(trn_df)</span>
<span id="cb15-6">val_xs,val_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs_y(val_df)</span></code></pre></div>
</div>
<p>From here we make predictions:</p>
<div id="cell-25" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mean_absolute_error</span>
<span id="cb16-2">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> val_xs.Sex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb16-3">mean_absolute_error(val_y, preds)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>0.21524663677130046</code></pre>
</div>
</div>
<p>A 21.5% error rate isn’t too shabby for such a simple model. Can we do better? Let’s try another variable such as <code>Fare</code> which is continuous.</p>
<div id="cell-27" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">df_fare <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trn_df[trn_df.LogFare<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-2">fig,axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb18-3">sns.boxenplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_fare, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dep, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LogFare"</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb18-4">sns.kdeplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_fare, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LogFare"</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The boxenplot shows that those who survived generally paid higher fares.</p>
<p>So here’s another model <code>LogFare</code> greater than 2.7:</p>
<div id="cell-29" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> val_xs.LogFare<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.7</span></span>
<span id="cb19-2">mean_absolute_error(val_y, preds)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>0.336322869955157</code></pre>
</div>
</div>
<p>Oh, much worse</p>
<p>To evaluate binary split uniformly, regardless of the datatype, We measure how similar the dependent variable values are within each split. We aim for standard deviations within groups, multiplied by group sizes to account for impact differences.</p>
<div id="cell-31" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _side_score(side, y):</span>
<span id="cb21-2">    tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> side.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y[side].std()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tot</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> score(col, y, split):</span>
<span id="cb21-7">    lhs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>split</span>
<span id="cb21-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (_side_score(lhs,y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> _side_score(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>lhs,y))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)</span></code></pre></div>
</div>
<p>So for example, if we split by Sex, is greater than or less than 0.5.That’ll create two groups, males and females, and that gives us this score.</p>
<div id="cell-33" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">score(trn_xs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>], trn_y, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>0.4078753098206398</code></pre>
</div>
</div>
<p>And if we do LogFare greater than or less than 2.7, it gives us this score.</p>
<div id="cell-35" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">score(trn_xs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LogFare"</span>], trn_y, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>0.4718087395209973</code></pre>
</div>
</div>
<p>Lower scores indicates better splits, with <code>Sex</code> outperforming <code>LogFare</code>. But how can we find a best split point i mean we have to try ourself right? In every values and see if the score improve or not right, well that was pretty inefficient. It would be nice if we could find some automatic wway to do al that. Well, of course we can. If we want to find the best split point for <code>Age</code>, and try each one in turn, and see what score we get, if we made a binary split on that level of <code>Age</code>. So here’s a list of all the possible binary split threshold of <code>Age</code></p>
<div id="cell-37" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trn_xs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>]</span>
<span id="cb26-2">unq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col.unique()</span>
<span id="cb26-3">unq.sort()</span>
<span id="cb26-4">unq</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array([ 0.42,  0.67,  0.75,  0.83,  0.92,  1.  ,  2.  ,  3.  ,  4.  ,  5.  ,  6.  ,  7.  ,  8.  ,  9.  , 10.  , 11.  , 12.  ,
       13.  , 14.  , 14.5 , 15.  , 16.  , 17.  , 18.  , 19.  , 20.  , 21.  , 22.  , 23.  , 24.  , 24.5 , 25.  , 26.  , 27.  ,
       28.  , 28.5 , 29.  , 30.  , 31.  , 32.  , 32.5 , 33.  , 34.  , 34.5 , 35.  , 36.  , 36.5 , 37.  , 38.  , 39.  , 40.  ,
       40.5 , 41.  , 42.  , 43.  , 44.  , 45.  , 45.5 , 46.  , 47.  , 48.  , 49.  , 50.  , 51.  , 52.  , 53.  , 54.  , 55.  ,
       55.5 , 56.  , 57.  , 58.  , 59.  , 60.  , 61.  , 62.  , 64.  , 65.  , 70.  , 70.5 , 74.  , 80.  ])</code></pre>
</div>
</div>
<p>Let’s go through all of them. For each of them calculate the score and then <code>Numpy</code> and <code>Pytorch</code> have an <code>argmin()</code> function, which tells you what index into that list is the smallest.</p>
<div id="cell-39" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([score(col, trn_y, o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> unq <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> np.isnan(o)])</span>
<span id="cb28-2">unq[scores.argmin()]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>6.0</code></pre>
</div>
</div>
<p>Here’s the scores.</p>
<div id="cell-41" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">scores</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>array([0.48447755, 0.48351588, 0.48158676, 0.48061929, 0.47964987, 0.480937  , 0.48347294, 0.48171397, 0.47987776, 0.47884826,
       0.47831672, 0.47949847, 0.47957573, 0.48092137, 0.48130659, 0.48200571, 0.48163287, 0.48124801, 0.48151498, 0.48183316,
       0.48105614, 0.48202484, 0.48178211, 0.48337829, 0.48439618, 0.48501782, 0.48545475, 0.48556795, 0.48550856, 0.48554074,
       0.48550094, 0.48504976, 0.48480161, 0.48561331, 0.4852559 , 0.48513473, 0.48529147, 0.48530156, 0.48543741, 0.48569729,
       0.48571309, 0.48571467, 0.4856701 , 0.48563657, 0.48579877, 0.48579767, 0.4858019 , 0.48580095, 0.48580002, 0.48580178,
       0.48580211, 0.48579777, 0.4857996 , 0.48580236, 0.48579236, 0.48580043, 0.48580303, 0.4858034 , 0.4857613 , 0.4855666 ,
       0.48579394, 0.48580506, 0.48580434, 0.48580707, 0.48579364, 0.48580788, 0.48581017, 0.48580597, 0.48581077, 0.48576815,
       0.48580167, 0.48545792, 0.48567909, 0.48542059, 0.48557468, 0.48492654, 0.4852198 , 0.48548666, 0.48590271, 0.48601112,
       0.48447755, 0.48543732])</code></pre>
</div>
</div>
<p>Create a function to calculate this for any column:</p>
<div id="cell-43" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> min_col(df, nm):</span>
<span id="cb32-2">    col,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[nm],df[dep]</span>
<span id="cb32-3">    unq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col.dropna().unique()</span>
<span id="cb32-4">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([score(col, y, o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> unq <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> np.isnan(o)])</span>
<span id="cb32-5">    idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores.argmin()</span>
<span id="cb32-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> unq[idx],scores[idx]</span>
<span id="cb32-7"></span>
<span id="cb32-8">min_col(trn_df, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>(6.0, 0.47831671750899085)</code></pre>
</div>
</div>
<p>Revealing that is at 6.0 for <code>Age</code>. So now we can just go through and calculates the score for the best split point for each column.</p>
<div id="cell-45" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>conts</span>
<span id="cb34-2">{o:min_col(trn_df, o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cols}</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>{'Sex': (0, 0.4078753098206398),
 'Embarked': (0, 0.478833425731479),
 'Age': (6.0, 0.47831671750899085),
 'SibSp': (4, 0.4783740258817423),
 'Parch': (0, 0.4805296527841601),
 'LogFare': (2.4390808375825834, 0.4620823937736595),
 'Pclass': (2, 0.4604826188580666)}</code></pre>
</div>
</div>
<p>And if we do that, we find that the lowest score is Sex. So that is how to calculate the best binary split. So we now know that the model we created earlier with <code>Sex</code> is the best single binary split model we can find.</p>
<p>And this simple thing we just did which is finding a single binary split, actually is a type of model, it has a name too, it’s called OneR. And OneR model it turned out in a review of machine learning methods in the 90s is one of the best, if not the best. It’s not a bad idea to always start creating a baseline of OneR, a decision tree with a single binary split.</p>
</section>
<section id="creating-a-tree" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-tree">Creating a Tree</h3>
<p>“OneR” is probably not going to cut it for a lot of things, though it’s surprisingly effective, but maybe we could go a step further. And the other step further we could go is by creating a maybe “TwoR”. What if we took each of those groups, males and females in the Titanic dataset, and split each of these into two other groups? So split the males into two groups and split the females into two groups. To do that, we can repeat the exact same piece of code we just did, but let’s remove sex from it:</p>
<div id="cell-49" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">cols.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>)</span>
<span id="cb36-2">ismale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trn_df.Sex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb36-3">males,females <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trn_df[ismale],trn_df[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>ismale]</span></code></pre></div>
</div>
<p>Then, run the same piece of code that we just did before, but just for the males:</p>
<div id="cell-51" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">{o:min_col(males, o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cols}</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>{'Embarked': (0, 0.387558187041091),
 'Age': (6.0, 0.37398283710105873),
 'SibSp': (4, 0.38758642275862637),
 'Parch': (0, 0.3874704821461953),
 'LogFare': (2.803360380906535, 0.38048562317581447),
 'Pclass': (1, 0.3815544200436083)}</code></pre>
</div>
</div>
<p>This provides a “OneR” rule for how to predict which males survived the Titanic, Interestingly, age turns out to be the biggest predictor for males whether they were greater than or less than 6 determined their survival odds</p>
<p>Similarity, for females:</p>
<div id="cell-53" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">{o:min_col(females, o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cols}</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>{'Embarked': (0, 0.4295252982857326),
 'Age': (50.0, 0.4225927658431646),
 'SibSp': (4, 0.42319212059713585),
 'Parch': (3, 0.4193314500446157),
 'LogFare': (4.256321678298823, 0.413505983329114),
 'Pclass': (2, 0.3335388911567602)}</code></pre>
</div>
</div>
<p>The passenger class <code>Pclass</code>, or whether they were in first class or not, was the biggest predictor of survival.</p>
<p>This process generates a decision tree - a serries of binary splits that gradually categorize our data so that in the leaf nodes, we derive strong predictions about survival</p>
<p>We can continue these steps for each of the four groups manually with a couple of extra lines of code, or we can use a decision tree classifier. This class automates the process we just outlined:</p>
<div id="cell-55" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.tree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DecisionTreeClassifier, export_graphviz</span>
<span id="cb41-2"></span>
<span id="cb41-3">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeClassifier(max_leaf_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>).fit(trn_xs, trn_y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>And one very nice thing it has is it can draw the tree for us. So here’s a tiny little draw_tree function:</p>
<div id="cell-57" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> graphviz</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_tree(t, df, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb42-4">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>export_graphviz(t, out_file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, feature_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.columns, filled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, rounded<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb42-5">                      special_characters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, rotate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb42-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> graphviz.Source(re.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tree {'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Tree </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">{{</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> size=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; ratio=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ratio<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, s))</span>
<span id="cb42-7"></span>
<span id="cb42-8">draw_tree(m, trn_xs, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-26-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And you can see here it’s going to first of all split on sex. Now, it looks a bit weird to say sex is less than or equal to 0.5, but remember our binary characteristics are coded as zero or one. This is just an easy way to denote males versus females.</p>
<p>For females, the next split is based on their class. For males, age is the dedicating factor. This creates our four leaf nodes. For instance, of the females in the first class, 116 survived, and only 4 didn’t showing that being a wealthy woman on the Titanic was quite advantageous. On the other hand, among adult males, 68 survived while 350 perished, illustrating the peril they faced.</p>
<p>This quick summary showcases why decision trees are favoured in exploratory data analysis; they provide a clear picture of key variables driving the dataset and their predictive power</p>
<p>One additional point is the <code>Gini</code> measure, a way of evaluating how good a split is, which i’ve illustrated in the code below:</p>
<div id="cell-59" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gini(cond):</span>
<span id="cb43-2">    act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[cond, dep]</span>
<span id="cb43-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> act.mean()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>act).mean()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<p>To understand this mathematically: if <img src="https://latex.codecogs.com/png.latex?p"> is a probability of an instance being classified as a positive class, and <img src="https://latex.codecogs.com/png.latex?(1%20-%20p)"> for the negative class, <img src="https://latex.codecogs.com/png.latex?p%5E2"> denotes the chance of both randomly selected instances being positive and <img src="https://latex.codecogs.com/png.latex?(1-p)%5E2"> being negative. The term <img src="https://latex.codecogs.com/png.latex?(1-p%5E2%20-%20(1-p)%5E2)"> gives us the probability of misclassification, subtracting the chances of correctly classifying instances.</p>
<p>Here’s an example of <code>Gini</code> calculation for gender:</p>
<div id="cell-61" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">gini(df.Sex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'female'</span>), gini(df.Sex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'male'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>(0.3828350034484158, 0.3064437162277842)</code></pre>
</div>
</div>
<p>Here, <code>act.mean()**2</code> is the probability that two randomly selected individual both survived, and <code>(1 - act.mean())**2</code> that both did not. Lower <code>Gini</code> impurity suggests a strong skew in survival outcomes, which can be insightful for decision making or predicting survival likelihood based on gender.</p>
<p>Decision trees thus provide not only visual insights but quantitative ways to discern what’s happening within your dataset.</p>
<div id="cell-63" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">mean_absolute_error(val_y, m.predict(val_xs))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>0.2242152466367713</code></pre>
</div>
</div>
<p>So that was for the “OneR” version. For the decision tree with four leaf nodes, the mean absolute error was 0.224, which is actually a bit worse. This outcome suggest that due to the small size of the dataset, the “OneR” method was impressively effective, and enhancements weren’t substantial enough to be discerned among the randomness of such a small validation set.</p>
<p>To take it further, let’s implement a decision tree with a minimum of 50 samples per leaf node:</p>
<div id="cell-65" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeClassifier(min_samples_leaf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb48-2">m.fit(trn_xs, trn_y)</span>
<span id="cb48-3">draw_tree(m, trn_xs, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-30-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This indicates that each leaf will contain at least 50 samples, in this context passengers on the Titanic. For example, suppose you’ve identified that 67 people were female, first-class, and under 28. That’s the point where the tree ceases splitting further</p>
<p>Let’s evaluate this decision tree:</p>
<div id="cell-67" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">mean_absolute_error(val_y, m.predict(val_xs))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>0.18385650224215247</code></pre>
</div>
</div>
<p>With an absolute error of 0.183, this approach shows a bit of improvement.</p>
<p>An interesting aspect of decision trees is the minimal preprocessing required you may have noticed this advantage. There was no need for dummy variables for category features, and although you can create them, it isn’t necessary. Decision trees can manage without these adjustments. We only took the logarithm of the fare to enhance the visual appearance of our graph but the split would operate identically on the original scale, focusing only on data ordering</p>
<p>Moreover, decision trees are indifferent to outliers, long-tailed distributions, and categorical variables: they handle all these situations effectively.</p>
<p>The take away here is that for tabular data, starting with a decision tree-based approach is prudent. It helps create baselines because they are remarkably resilient and offer a robust performance without intricate tuning</p>
</section>
</section>
<section id="random-forest" class="level2">
<h2 class="anchored" data-anchor-id="random-forest">Random Forest</h2>
<p>Now, what if we wanted to make this more accurate? Could we grow the tree further? We could, but with only 50 samples in these leaves, further splitting would result in the leaf nodes having so little data that their predictions wouldn’t be very meaningful. Naturally, there are limitation to how accurate a decision tree can be. so, what we can do? Enter a fascinating strategy called <a href="https://www.stat.berkeley.edu/~breiman/bagging.pdf">bagging</a>.</p>
<p>Here’s the procedure of bagging:</p>
<ol type="1">
<li>Randomly choose a subset of data rows (a “bootstrap replicate” of the learning set).</li>
<li>Train a model using this subset.</li>
<li>Save that model, then go back to step 1 and repeat several times.</li>
<li>This will give you multiple trained models. Predict with all models, and then average their predictions to make the final prediction.</li>
</ol>
<p>The core insight of bagging is that although models trained on data subsets will make more errors than a model trained on the full dataset, these errors aren’t correlated across models. Different models will make different errors, and when averaged, those errors offset each other. Thus, average the predictions of all the model sharpens the final prediction with more models providing finer estimations.</p>
<p>In essence, a random forest averages the predictions of numerous decision trees, which are generated randomly varying parameters such as training dataset or tree parameters. Bagging is a particular approach to “ensembling” or combining results from multiple models.</p>
<p>Let’s create one in a few lines. Here’s a function to generate a decision tree:</p>
<div id="cell-71" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_tree(prop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>):</span>
<span id="cb51-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(trn_y)</span>
<span id="cb51-3">    idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(n, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>prop))</span>
<span id="cb51-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> DecisionTreeClassifier(min_samples_leaf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).fit(trn_xs.iloc[idxs], trn_y.iloc[idxs])</span></code></pre></div>
</div>
<p>Here, <code>prop</code> denotes the data proportion used, say 75% each time with <code>n</code> as the sample size. Random samples <code>idxs</code> are selected based on the specified proportion, and a decision tree is built from this subset.</p>
<p>Let’s get 100 trees and compile them into a list:</p>
<div id="cell-73" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [get_tree() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)]</span>
<span id="cb52-2">all_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [t.predict(val_xs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trees]</span>
<span id="cb52-3">avg_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack(all_probs).mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb52-4"></span>
<span id="cb52-5">mean_absolute_error(val_y, avg_probs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>0.2272645739910314</code></pre>
</div>
</div>
<p>By collecting predictions from these trees, stacking them, and averaging their predictions, we have our random forest.</p>
<p>Random forests are remarkably simple yet powerful. A key feature is that they also randomly select subset of columns to build decision trees, changing the column subset with each node split. The idea is to maintain randomness, yet retain usefulness. For more efficient implementation, we use <code>RandomForestClassifier</code>:</p>
<div id="cell-75" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb54-2"></span>
<span id="cb54-3">rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, min_samples_leaf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb54-4">rf.fit(trn_xs, trn_y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb54-5">mean_absolute_error(val_y, rf.predict(val_xs))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>0.18834080717488788</code></pre>
</div>
</div>
<p>Here, we specify the number of trees and samples per leaf, then fit the classifier. While our mean absolute error might not surpass a single decision tree due to dataset constraints, it remains robust</p>
<p>One can inspect the built decision trees to identify split columns. Monitoring column improvements in <code>Gini</code> across decision trees yields a <strong>feature importance plot</strong>:</p>
<div id="cell-77" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trn_xs.columns, imp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m.feature_importances_)).plot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cols'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'barh'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Feature importance plots demonstrate a feature’s significance by indicating how frequently and effectively it was used for splits. The <code>Sex</code> variable emerges as most significant, follow by <code>Pclass</code>, with other variables less crucial. And this is another reason, by the way, why the random forest isn’t really particularly helpful, because it’s just a easy split to do, basically all the matter is what class you are in and whether you’re male of female.</p>
<p>Random Forests, due to their versatility with data distribution and categorical variable handling, allow immediate and insightful datasets analyses. For large datasets, they quickly reveal key features, facilitating further focused analysis.</p>
</section>
<section id="what-else-can-we-do-with-random-forest" class="level2">
<h2 class="anchored" data-anchor-id="what-else-can-we-do-with-random-forest">What else can we do with Random Forest</h2>
<p>There are other things that you can do with Random Forests and the Titanic dataset is a small one, so it doesn’t highlight the full power of Random Forests. For a bigger and more numerically interesting dataset, let’s consider the auction price of heavy industrial equipment. This dataset is from The <a href="https://www.kaggle.com/c/bluebook-for-bulldozers/overview">Blue Book for Bulldozers</a> Kaggle competition. I highly recommended taking a peek at the overview and the dataset on the competition page before we start.</p>
<section id="preparing-stuff" class="level3">
<h3 class="anchored" data-anchor-id="preparing-stuff">Preparing Stuff</h3>
<section id="downloading-the-dataset" class="level4">
<h4 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h4>
<div id="cell-83" class="cell">
<details class="code-fold">
<summary>Import stuff click to show the code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastbook <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb57-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas.api.types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> is_string_dtype, is_numeric_dtype, is_categorical_dtype</span>
<span id="cb57-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.tabular.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb57-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestRegressor</span>
<span id="cb57-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.tree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DecisionTreeRegressor</span>
<span id="cb57-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dtreeviz.trees <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb57-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, display_svg, SVG</span>
<span id="cb57-8"></span>
<span id="cb57-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb57-10">warnings.simplefilter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FutureWarning</span>)</span>
<span id="cb57-11"></span>
<span id="cb57-12">pd.options.display.max_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb57-13">pd.options.display.max_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span></code></pre></div>
</details>
</div>
<p>Pick a path to download the dataset:</p>
<div id="cell-86" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">comp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bluebook-for-bulldozers'</span></span>
<span id="cb58-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> URLs.path(comp)</span>
<span id="cb58-3">path</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>Path('/home/monarch/.fastai/archive/bluebook-for-bulldozers')</code></pre>
</div>
</div>
<p>Use the Kaggle API to download the data to the specified path and extract it:</p>
<div id="cell-88" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kaggle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> api</span>
<span id="cb60-2"></span>
<span id="cb60-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> path.exists():</span>
<span id="cb60-4">    path.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true)</span>
<span id="cb60-5">    api.competition_download_cli(comp, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path)</span>
<span id="cb60-6">    shutil.unpack_archive(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>comp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(path))</span>
<span id="cb60-7"></span>
<span id="cb60-8">path.ls(file_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading bluebook-for-bulldozers.zip to /home/monarch/.fastai/archive/bluebook-for-bulldozers</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 48.4M/48.4M [00:07&lt;00:00, 6.52MB/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>(#7) [Path('/home/monarch/.fastai/archive/bluebook-for-bulldozers/Machine_Appendix.csv'),Path('/home/monarch/.fastai/archive/bluebook-for-bulldozers/Test.csv'),Path('/home/monarch/.fastai/archive/bluebook-for-bulldozers/TrainAndValid.csv'),Path('/home/monarch/.fastai/archive/bluebook-for-bulldozers/Valid.csv'),Path('/home/monarch/.fastai/archive/bluebook-for-bulldozers/ValidSolution.csv'),Path('/home/monarch/.fastai/archive/bluebook-for-bulldozers/median_benchmark.csv'),Path('/home/monarch/.fastai/archive/bluebook-for-bulldozers/random_forest_benchmark_test.csv')]</code></pre>
</div>
</div>
<p>I’ll now walk you through the dataset. If you examine the <a href="https://www.kaggle.com/c/bluebook-for-bulldozers/data">Data tab</a> on the competition page, here are the key fields found in train.csv:</p>
<ul>
<li><code>SalesID</code>: The unique identifier of the sale.</li>
<li><code>MachineID</code>: the unique identifier of the machine. A machine can be sold multiple times.</li>
<li><code>saleprice</code>: The auction sale price of the machine (only provided in train.csv)</li>
<li><code>saledate</code>: The date the sale occurred.</li>
</ul>
<p>We begin by reading the training set into Pandas <code>DataFrame</code>. It’s generally advisable to specify <code>low_memory=False</code> unless Pandas runs out of memory and throws an error. By default, <code>low_memory</code> is <code>True</code>, instructing Pandas to process data in chucks, which may lead to inconsistent column data types and subsequent data processing or modeling errors.</p>
<div id="cell-90" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TrainAndValid.csv'</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb65-2">df.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>Index(['SalesID', 'SalePrice', 'MachineID', 'ModelID', 'datasource',
       'auctioneerID', 'YearMade', 'MachineHoursCurrentMeter', 'UsageBand',
       'saledate', 'fiModelDesc', 'fiBaseModel', 'fiSecondaryDesc',
       'fiModelSeries', 'fiModelDescriptor', 'ProductSize',
       'fiProductClassDesc', 'state', 'ProductGroup', 'ProductGroupDesc',
       'Drive_System', 'Enclosure', 'Forks', 'Pad_Type', 'Ride_Control',
       'Stick', 'Transmission', 'Turbocharged', 'Blade_Extension',
       'Blade_Width', 'Enclosure_Type', 'Engine_Horsepower', 'Hydraulics',
       'Pushblock', 'Ripper', 'Scarifier', 'Tip_Control', 'Tire_Size',
       'Coupler', 'Coupler_System', 'Grouser_Tracks', 'Hydraulics_Flow',
       'Track_Type', 'Undercarriage_Pad_Width', 'Stick_Length', 'Thumb',
       'Pattern_Changer', 'Grouser_Type', 'Backhoe_Mounting', 'Blade_Type',
       'Travel_Controls', 'Differential_Type', 'Steering_Controls'],
      dtype='object')</code></pre>
</div>
</div>
<p>That’s many columns to scour! Start by exploring the dataset to familiarize yourself with the data content in each column. Soon we’ll focus on the most compelling bits.</p>
<p>With ordinal columns, it’s beneficial to specify meaningful order. These columns contain strings with an inherent sequence. For example, check out the <code>ProducSize</code> levels:</p>
<div id="cell-92" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>array([nan, 'Medium', 'Small', 'Large / Medium', 'Mini', 'Large', 'Compact'], dtype=object)</code></pre>
</div>
</div>
<p>Instruct Pandas about the relevant order of these levels:</p>
<div id="cell-94" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Large'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Large / Medium'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Medium'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Small'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mini'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Compact'</span></span>
<span id="cb69-2"></span>
<span id="cb69-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>].astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category'</span>)</span>
<span id="cb69-4">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>].cat.set_categories(sizes, ordered<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>0            NaN
1         Medium
2            NaN
3          Small
4            NaN
           ...  
412693      Mini
412694      Mini
412695      Mini
412696      Mini
412697      Mini
Name: ProductSize, Length: 412698, dtype: category
Categories (6, object): ['Large' &lt; 'Large / Medium' &lt; 'Medium' &lt; 'Small' &lt; 'Mini' &lt; 'Compact']</code></pre>
</div>
</div>
<p>In this dataset, Kaggle suggests using Root Mean Square Log Error (RMSLE) as the metric for comparing actual versus predicted auction prices.</p>
<div id="cell-96" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">dep_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SalePrice'</span></span>
<span id="cb71-2">df[dep_var] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df[dep_var])</span></code></pre></div>
</div>
<p>This transformation ensures that the target variables is in format suitable for modeling.</p>
</section>
<section id="data-preparation" class="level4">
<h4 class="anchored" data-anchor-id="data-preparation">Data Preparation</h4>
<p>The first piece of data preparation we need to to do is enrich our representation of dates. The fundamental basis of the decision tree that we just discussed is bisection (dividing a group into two). We look at the ordinal variables and divide the dataset based on whether the variable’s value is greater (ow lower) than a threshold, and we look at the categorical variables and divide the dataset based on whether the variable’s level is a particular level. This algorithm divides the dataset based on both original and categorical data</p>
<p>But how does this apply to a common data type, the date? You might want to tree at date as an ordinal value because it is meaningful to say that one date is greater than other. However, dates are a bit different from most ordinal values in that some dates are qualitatively different from others, which is often relevant to the systems we are modeling.</p>
<p>To help our algorithm handle dates intelligently, we’d like our model to know ore than whether a date is more recent or less recent than other. We might want our model to make decisions based on that date’s day of the week, on whether a day is holiday, on what month it is in, and so forth. To accomplish this, we replace every date column with a set of date metadata columns, such as holiday, day of the week, and month. These columns provide categorical data that we suspect will be useful.</p>
<p>Fastai comes with a function to do this for us that mean we only need to pass in a column name that contains dates:</p>
<div id="cell-100" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> add_datepart(df, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saledate'</span>)</span>
<span id="cb72-2"></span>
<span id="cb72-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do the same for the test set</span></span>
<span id="cb72-4">df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test.csv'</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb72-5">df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> add_datepart(df_test, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saledate'</span>)</span></code></pre></div>
</div>
<p>We can see that there are now many new columns in our <code>DataFrame</code>:</p>
<div id="cell-102" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">' '</span>.join(o <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.columns <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> o.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sale'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>'saleYear saleMonth saleWeek saleDay saleDayofweek saleDayofyear saleIs_month_end saleIs_month_start saleIs_quarter_end saleIs_quarter_start saleIs_year_end saleIs_year_start saleElapsed'</code></pre>
</div>
</div>
<p>This a solid first step, but we need further data cleaning. For this, we will use fastai objects called <code>TabularPandas</code> and <code>TabularProc</code>.</p>
<p>Another aspect of preparatory processing is ensuring we can handle strings and missing data. We will use fastai’s class <code>TabularPandas</code>, which wraps a Pandas <code>DataFrame</code> and offers some conveniences. when we say it “wraps” a <code>DataFrame</code>, it means taking a Pandas <code>DataFrame</code> as input and adding additional specifically useful for machine-learning tasks with tabular data. To populate a <code>TabularPandas</code>, we will utilize two <code>TabularProcs</code>: <code>Categorify</code> and <code>FillMissing</code>.</p>
<p><code>TabularProcs</code> are unique data transformation process used in fastai designed to prepare you data to ML models. We introduce two specific <code>TabularProcs</code> here:</p>
<ul>
<li><code>Categorify</code>: convert categorical columns text or non numeric data into numeric categories. For instance, a column <code>Color</code> with values like “Red”, “Blue”, “Green” could be encoded as 1, 2, 3.</li>
<li><code>FillMissing</code>: Manages missing data in your dataset. it replaces missing values with the column’s median value and creates a new boolean column to flag rows that originally had missing values.</li>
</ul>
<p>How <code>TabularProc</code> differs from regular transforms:</p>
<ul>
<li>Returns the exact same object that’s passed to it, after modifying the object in place, which optimizes memory efficiency especially with large datasets.</li>
<li>Executes the transformation immediately when the data is first passed in rather than delaying until the data is accessed.</li>
</ul>
<p>In practical terms, when using <code>TabularPandas</code> with <code>TabularProcs</code>:</p>
<ol type="1">
<li>Start with your raw data in a Pandas <code>DataFrame</code>.</li>
<li>Wrap this <code>DataFrame</code> with <code>TabularPandas</code>.</li>
<li>Apply <code>TabularProcs</code> (<code>Categorify</code> and <code>FillMissing</code>)</li>
<li>These procs instantly process all your data, converting categories to numbers and filling in missing values.</li>
<li>The outcome is a dataset ready for machine learning models, with all categorical data converted and missing values addressed.</li>
</ol>
<p>This methodology streamlines the data preparation process, ensure consistent data processing ready for model training or inference.</p>
<div id="cell-104" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">procs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Categorify, FillMissing]</span></code></pre></div>
</div>
<p><code>TabularPandas</code> will also manage the dataset split into training and validation sets for us.</p>
</section>
<section id="handling-a-time-series" class="level4">
<h4 class="anchored" data-anchor-id="handling-a-time-series">Handling a Time Series</h4>
<p>When dealing with time series data, randomly selecting a subset of data points for training and validation is not sufficient, as sequence of data is vital. The test set represents a future six-month period starting from May 2012, thus not overlapping with the training set. This setup is intentional because the competition sponsor aims to evaluate the model’s predictive capability selected from a later time than your training dataset.</p>
<p>The provided Kaggle training data concludes in April 2012. Therefore, we’ll construct to focused training dataset comprising data from before November 2011 and establish a validation set with data from after November 2011.</p>
<p>This is achieved using <code>np.where</code>, which helps in obtaining indices for specific conditions:</p>
<div id="cell-108" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">cond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df.saleYear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (df.saleMonth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb76-2">train_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where( cond)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb76-3">valid_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>cond)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb76-4"></span>
<span id="cb76-5">splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(train_idx),<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(valid_idx))</span></code></pre></div>
</div>
<p>TabularPandas requires knowledge of which columns are continuous and which are categorical. We can simplify this with the <code>cont_cat_split</code> helper function:</p>
<div id="cell-110" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">cont,cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cont_cat_split(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dep_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dep_var)</span>
<span id="cb77-2">to <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPandas(df, procs, cat, cont, y_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dep_var, splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>splits)</span></code></pre></div>
</div>
<p>This setup turns <code>TabularPandas</code>into something akin to a fastai <code>Dataset</code> object, with accessible train and valid attributes:</p>
<div id="cell-112" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(to.train),<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(to.valid)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>(404710, 7988)</code></pre>
</div>
</div>
<p>It’s possible to view the dataset’s categorical variables still represented as strings:</p>
<div id="cell-114" class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">to.show(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">UsageBand</th>
<th data-quarto-table-cell-role="th">fiModelDesc</th>
<th data-quarto-table-cell-role="th">fiBaseModel</th>
<th data-quarto-table-cell-role="th">fiSecondaryDesc</th>
<th data-quarto-table-cell-role="th">fiModelSeries</th>
<th data-quarto-table-cell-role="th">fiModelDescriptor</th>
<th data-quarto-table-cell-role="th">ProductSize</th>
<th data-quarto-table-cell-role="th">fiProductClassDesc</th>
<th data-quarto-table-cell-role="th">state</th>
<th data-quarto-table-cell-role="th">ProductGroup</th>
<th data-quarto-table-cell-role="th">ProductGroupDesc</th>
<th data-quarto-table-cell-role="th">Drive_System</th>
<th data-quarto-table-cell-role="th">Enclosure</th>
<th data-quarto-table-cell-role="th">Forks</th>
<th data-quarto-table-cell-role="th">Pad_Type</th>
<th data-quarto-table-cell-role="th">Ride_Control</th>
<th data-quarto-table-cell-role="th">Stick</th>
<th data-quarto-table-cell-role="th">Transmission</th>
<th data-quarto-table-cell-role="th">Turbocharged</th>
<th data-quarto-table-cell-role="th">Blade_Extension</th>
<th data-quarto-table-cell-role="th">Blade_Width</th>
<th data-quarto-table-cell-role="th">Enclosure_Type</th>
<th data-quarto-table-cell-role="th">Engine_Horsepower</th>
<th data-quarto-table-cell-role="th">Hydraulics</th>
<th data-quarto-table-cell-role="th">Pushblock</th>
<th data-quarto-table-cell-role="th">Ripper</th>
<th data-quarto-table-cell-role="th">Scarifier</th>
<th data-quarto-table-cell-role="th">Tip_Control</th>
<th data-quarto-table-cell-role="th">Tire_Size</th>
<th data-quarto-table-cell-role="th">Coupler</th>
<th data-quarto-table-cell-role="th">Coupler_System</th>
<th data-quarto-table-cell-role="th">Grouser_Tracks</th>
<th data-quarto-table-cell-role="th">Hydraulics_Flow</th>
<th data-quarto-table-cell-role="th">Track_Type</th>
<th data-quarto-table-cell-role="th">Undercarriage_Pad_Width</th>
<th data-quarto-table-cell-role="th">Stick_Length</th>
<th data-quarto-table-cell-role="th">Thumb</th>
<th data-quarto-table-cell-role="th">Pattern_Changer</th>
<th data-quarto-table-cell-role="th">Grouser_Type</th>
<th data-quarto-table-cell-role="th">Backhoe_Mounting</th>
<th data-quarto-table-cell-role="th">Blade_Type</th>
<th data-quarto-table-cell-role="th">Travel_Controls</th>
<th data-quarto-table-cell-role="th">Differential_Type</th>
<th data-quarto-table-cell-role="th">Steering_Controls</th>
<th data-quarto-table-cell-role="th">saleIs_month_end</th>
<th data-quarto-table-cell-role="th">saleIs_month_start</th>
<th data-quarto-table-cell-role="th">saleIs_quarter_end</th>
<th data-quarto-table-cell-role="th">saleIs_quarter_start</th>
<th data-quarto-table-cell-role="th">saleIs_year_end</th>
<th data-quarto-table-cell-role="th">saleIs_year_start</th>
<th data-quarto-table-cell-role="th">auctioneerID_na</th>
<th data-quarto-table-cell-role="th">MachineHoursCurrentMeter_na</th>
<th data-quarto-table-cell-role="th">SalesID</th>
<th data-quarto-table-cell-role="th">MachineID</th>
<th data-quarto-table-cell-role="th">ModelID</th>
<th data-quarto-table-cell-role="th">datasource</th>
<th data-quarto-table-cell-role="th">auctioneerID</th>
<th data-quarto-table-cell-role="th">YearMade</th>
<th data-quarto-table-cell-role="th">MachineHoursCurrentMeter</th>
<th data-quarto-table-cell-role="th">saleYear</th>
<th data-quarto-table-cell-role="th">saleMonth</th>
<th data-quarto-table-cell-role="th">saleWeek</th>
<th data-quarto-table-cell-role="th">saleDay</th>
<th data-quarto-table-cell-role="th">saleDayofweek</th>
<th data-quarto-table-cell-role="th">saleDayofyear</th>
<th data-quarto-table-cell-role="th">saleElapsed</th>
<th data-quarto-table-cell-role="th">SalePrice</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Low</td>
<td>521D</td>
<td>521</td>
<td>D</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>Wheel Loader - 110.0 to 120.0 Horsepower</td>
<td>Alabama</td>
<td>WL</td>
<td>Wheel Loader</td>
<td>#na#</td>
<td>EROPS w AC</td>
<td>None or Unspecified</td>
<td>#na#</td>
<td>None or Unspecified</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>2 Valve</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>None or Unspecified</td>
<td>None or Unspecified</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>Standard</td>
<td>Conventional</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>1139246</td>
<td>999089</td>
<td>3157</td>
<td>121</td>
<td>3.0</td>
<td>2004</td>
<td>68.0</td>
<td>2006</td>
<td>11</td>
<td>46</td>
<td>16</td>
<td>3</td>
<td>320</td>
<td>1.163635e+09</td>
<td>11.097410</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Low</td>
<td>950FII</td>
<td>950</td>
<td>F</td>
<td>II</td>
<td>#na#</td>
<td>Medium</td>
<td>Wheel Loader - 150.0 to 175.0 Horsepower</td>
<td>North Carolina</td>
<td>WL</td>
<td>Wheel Loader</td>
<td>#na#</td>
<td>EROPS w AC</td>
<td>None or Unspecified</td>
<td>#na#</td>
<td>None or Unspecified</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>2 Valve</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>23.5</td>
<td>None or Unspecified</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>Standard</td>
<td>Conventional</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>1139248</td>
<td>117657</td>
<td>77</td>
<td>121</td>
<td>3.0</td>
<td>1996</td>
<td>4640.0</td>
<td>2004</td>
<td>3</td>
<td>13</td>
<td>26</td>
<td>4</td>
<td>86</td>
<td>1.080259e+09</td>
<td>10.950807</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>High</td>
<td>226</td>
<td>226</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>Skid Steer Loader - 1351.0 to 1601.0 Lb Operating Capacity</td>
<td>New York</td>
<td>SSL</td>
<td>Skid Steer Loaders</td>
<td>#na#</td>
<td>OROPS</td>
<td>None or Unspecified</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>Auxiliary</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>None or Unspecified</td>
<td>None or Unspecified</td>
<td>None or Unspecified</td>
<td>Standard</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>#na#</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>1139249</td>
<td>434808</td>
<td>7009</td>
<td>121</td>
<td>3.0</td>
<td>2001</td>
<td>2838.0</td>
<td>2004</td>
<td>2</td>
<td>9</td>
<td>26</td>
<td>3</td>
<td>57</td>
<td>1.077754e+09</td>
<td>9.210340</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>However, all underlying data has been converted to numeric form:</p>
<div id="cell-116" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">to.items.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SalesID</th>
<th data-quarto-table-cell-role="th">SalePrice</th>
<th data-quarto-table-cell-role="th">MachineID</th>
<th data-quarto-table-cell-role="th">ModelID</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">saleIs_year_start</th>
<th data-quarto-table-cell-role="th">saleElapsed</th>
<th data-quarto-table-cell-role="th">auctioneerID_na</th>
<th data-quarto-table-cell-role="th">MachineHoursCurrentMeter_na</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1139246</td>
<td>11.097410</td>
<td>999089</td>
<td>3157</td>
<td>...</td>
<td>1</td>
<td>1.163635e+09</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1139248</td>
<td>10.950807</td>
<td>117657</td>
<td>77</td>
<td>...</td>
<td>1</td>
<td>1.080259e+09</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1139249</td>
<td>9.210340</td>
<td>434808</td>
<td>7009</td>
<td>...</td>
<td>1</td>
<td>1.077754e+09</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>

<p>3 rows × 67 columns</p>
</div>
</div>
</div>
<p>Categorical columns undergo transformation by substituting each unique category with a number. These numbers are assigned consecutively as they first appear, implying no intrinsic value to these numbers, unless ordered categories (like <code>ProductSize</code>) pre-specify the sequence. You can check the mapping through the classes attribute:</p>
<div id="cell-118" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">to.classes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>['#na#', 'Compact', 'Large', 'Large / Medium', 'Medium', 'Mini', 'Small']</code></pre>
</div>
</div>
<p>A neat feature in fastai is the ability to save processed data, which can be time-consuming. Saving the data allows you to resume further work without repeating the preprocessing steps. Fastai utilizes Python’s pickle system for this purpose:</p>
<div id="cell-120" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">save_pickle(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to.pkl'</span>,to)</span></code></pre></div>
</div>
<p>to retrieve it later you’ll simply do:</p>
<div id="cell-122" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">to <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_pickle(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to.pkl'</span>)</span></code></pre></div>
</div>
<p>With preprocessing complete, we’re set to create a decision tree.</p>
</section>
</section>
<section id="decision-tree-ensembles" class="level3">
<h3 class="anchored" data-anchor-id="decision-tree-ensembles">Decision Tree Ensembles</h3>
<p>Let’s consider how we find the right questions to ask when creating decision trees. Fortunately we don’t have to do this manually computer are designed for this purpose! Here’s a simple overview of training a decision tree:</p>
<ol type="1">
<li>Loop through each column of the dataset in turn.</li>
<li>For each column, loop through each possible level of that column in turn.</li>
<li>Try splitting the data into two groups, based on whether they are greater than or less than that value (or if it is a categorical variable, based on whether they are equal to or not equal to that level of that categorical variable).</li>
<li>Find the average sale price for each of those two groups, and see how close that is to the actual sale price of each of the items of equipment in that group. That is, treat this as a very simple “model” where our predictions are simply the average sale price of the item’s group.</li>
<li>After looping through all of the columns and all the possible levels for each, pick the split point that gave the best predictions using that simple model.</li>
<li>We now have two different groups for our data, based on this selected split. Treat each of these as separate datasets, and find the best split for each by going back to step 1 for each group.</li>
<li>Continue this process recursively, until you have reached some stopping criterion for each group—for instance, stop splitting a group further when it has only 20 items in it.</li>
</ol>
<p>To implement this, start by defining your independent and dependent variables:</p>
<div id="cell-126" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">xs,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to.train.xs,to.train.y</span>
<span id="cb86-2">valid_xs,valid_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to.valid.xs,to.valid.y</span></code></pre></div>
</div>
<div id="cell-127" class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">xs.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">UsageBand</th>
<th data-quarto-table-cell-role="th">fiModelDesc</th>
<th data-quarto-table-cell-role="th">fiBaseModel</th>
<th data-quarto-table-cell-role="th">fiSecondaryDesc</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">saleDay</th>
<th data-quarto-table-cell-role="th">saleDayofweek</th>
<th data-quarto-table-cell-role="th">saleDayofyear</th>
<th data-quarto-table-cell-role="th">saleElapsed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2</td>
<td>963</td>
<td>298</td>
<td>43</td>
<td>...</td>
<td>16</td>
<td>3</td>
<td>320</td>
<td>1.163635e+09</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>1745</td>
<td>529</td>
<td>57</td>
<td>...</td>
<td>26</td>
<td>4</td>
<td>86</td>
<td>1.080259e+09</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1</td>
<td>336</td>
<td>111</td>
<td>0</td>
<td>...</td>
<td>26</td>
<td>3</td>
<td>57</td>
<td>1.077754e+09</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1</td>
<td>3716</td>
<td>1381</td>
<td>0</td>
<td>...</td>
<td>19</td>
<td>3</td>
<td>139</td>
<td>1.305763e+09</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>3</td>
<td>4261</td>
<td>1538</td>
<td>0</td>
<td>...</td>
<td>23</td>
<td>3</td>
<td>204</td>
<td>1.248307e+09</td>
</tr>
</tbody>
</table>

<p>5 rows × 66 columns</p>
</div>
</div>
</div>
<p>Once your data is numeric and lacks missing values, you can create a decision tree:</p>
<div id="cell-129" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeRegressor(max_leaf_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb88-2">m.fit(xs, y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>Here, we’ve instructed sklearn to create four leaf nodes. To visualize what the model has learned, we can display the tree:</p>
<div id="cell-131" class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">draw_tree(m, xs, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, leaves_parallel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-58-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Understanding this visualization helps in graphing decision tree:</p>
<ol type="1">
<li><p>Top node: Represents the entire dataset before any splits. Average sale price (log) is 10.10, with a mean squared error of 0.48.</p></li>
<li><p>First split: Based on coupler_system.</p></li>
</ol>
<ul>
<li>Left branch: coupler_system &lt; 0.5 (360,847 records, avg. 10.21)</li>
<li>Right branch: coupler_system &gt; 0.5 (43,863 records, avg. 9.21)</li>
</ul>
<ol start="3" type="1">
<li>Second split (on left branch): Based on <code>YearMade</code>.</li>
</ol>
<ul>
<li>Left sub-branch: <code>YearMade</code> &lt;= 1991.5 (155,724 records, avg. 9.97)</li>
<li>Right sub-branch: <code>YearMade</code> &gt; 1991.5 (205,123 records, avg. 10.4)</li>
</ul>
<ol start="4" type="1">
<li>Leaf nodes: The bottom row, where no more splits occur.</li>
</ol>
<p>We can display this information using Terence Parr’s dtreeviz library to enhance visualization:</p>
<div id="cell-133" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">samp_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.permutation(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y))[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>]</span>
<span id="cb90-2">dtreeviz(m, xs.iloc[samp_idx], y.iloc[samp_idx], xs.columns, dep_var,</span>
<span id="cb90-3">        fontname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DejaVu Sans'</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, label_fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb90-4">        orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LR'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-59-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This visualization illuminates data distribution, showcasing issues like bulldozers dated to the year 1000, likely placeholders for missing data. For modeling precision, these can be substituted with 1950 to improve visualization clarity without significantly influencing model results:</p>
<div id="cell-135" class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">xs.loc[xs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'YearMade'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1900</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'YearMade'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1950</span></span>
<span id="cb91-2">valid_xs.loc[valid_xs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'YearMade'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1900</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'YearMade'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1950</span></span></code></pre></div>
</div>
<p>This update clarifies the tree visualization while maintaining the models integrity. After making this change, re-evaluate the decision tree:</p>
<div id="cell-137" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeRegressor(max_leaf_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>).fit(xs, y)</span>
<span id="cb92-2"></span>
<span id="cb92-3">dtreeviz(m, xs.iloc[samp_idx], y.iloc[samp_idx], xs.columns, dep_var,</span>
<span id="cb92-4">        fontname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DejaVu Sans'</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, label_fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb92-5">        orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LR'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-61-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now, let’s leverage the decision tree algorithm to generate a more complex model. This time, we’ll refrain from specifying any stopping criteria, such as <code>max_leaf_nodes</code>:</p>
<div id="cell-139" class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeRegressor()</span>
<span id="cb93-2">m.fit(xs, y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>To evaluate our model’s performance, we’ll define a function to compute the root mean squared error(RMSE) which was the scoring criterion in this competition:</p>
<div id="cell-141" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> r_mse(pred,y): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(math.sqrt(((pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb94-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> m_rmse(m, xs, y): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> r_mse(m.predict(xs), y)</span>
<span id="cb94-3">m_rmse(m, xs, y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>0.0</code></pre>
</div>
</div>
<p>The output is 0.0. At the first glance, it appears that our model is flawless. But hold on, we need to evalueate the validation set to check for overfitting:</p>
<div id="cell-143" class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">m_rmse(m, valid_xs, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>0.332239</code></pre>
</div>
</div>
<p>The validation set RMSE is 0.332239, indicating potential overfitting. Let’s investigating further</p>
<div id="cell-145" class="cell">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">m.get_n_leaves(), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>(324338, 404710)</code></pre>
</div>
</div>
<p>It turns out our model has nearly as many leaves as data point! This occurs because sklearn’s default setting allow continual splitting until there’s just one item per leaf node. We can address this by adjusting the stopping rule to require each leaf node to have at least 25 auction records:</p>
<div id="cell-147" class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeRegressor(min_samples_leaf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb100-2">m.fit(to.train.xs, to.train.y)</span>
<span id="cb100-3">m_rmse(m, xs, y), m_rmse(m, valid_xs, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>(0.243049, 0.308857)</code></pre>
</div>
</div>
<p>This results in a more balanced model. Let’s verify the new number of leaves:</p>
<div id="cell-149" class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">m.get_n_leaves()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="66">
<pre><code>12432</code></pre>
</div>
</div>
<p>Decision trees are adept at modelling data due to their adaptability to nonlinear relationships and variable interactions. Nonetheless, a compromise exist between generallizability (achieved with smaller trees) and training accuracy (achieved with larger trees)</p>
<p>How do wee balance these strengths? We’ll explore further after covering essential aspect handling categorical variables.</p>
<p>In deep learning, categorical variables are often one-hot encoded and fed into embedding layers. However, decision trees lack embedding layers so how can we leverage untreated categorical variables efficiently? let’s consider a use-case with product codes.</p>
<p>Suppose we have an auction dataset with product codes (categorical variables) and sale prices. “Product X” for instance, consistently sells at a premium. Decision trees split data based on features optimally partition the target variable. A split distinguishing “Product X” from others creates:</p>
<ul>
<li>Group A: containing product X</li>
<li>Group B: containing all other products</li>
</ul>
<p>This chose arises because “Product X” is notably pricier, leading Group A to have a higher average price than Group B. This split provides valuable insights for price prediction, prompting the algorithm to prefer it. The decision tree isolates “Product X” quickly, allowing precise price predictions while evaluating other products’ prices.</p>
<p>One-hot encoding is another option; it transforms a single categorical column into multiple binary columns, each representing a category level. Pandas offers the <code>get_dummies</code> method which does just that.</p>
<p>However, there’s little evidence that one-hot encoding enhances results. Thus, we tend to avoid it when unnecessary, as it complicates data handling.</p>
</section>
<section id="creating-a-random-forest" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-random-forest">Creating a Random Forest</h3>
<p>Creating a random forest involves a process similar to crafting a decision tree, but with added flexibility through parameters that determine the number of trees, data point subset size(rows), and field subset size(columns):</p>
<div id="cell-153" class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rf(xs, y, n_estimators<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, max_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200_000</span>,</span>
<span id="cb104-2">       max_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, min_samples_leaf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb104-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> RandomForestRegressor(n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_estimators<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_estimators,</span>
<span id="cb104-4">        max_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_samples, max_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_features,</span>
<span id="cb104-5">        min_samples_leaf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>min_samples_leaf, oob_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).fit(xs, y)</span></code></pre></div>
</div>
<p>Here’s an explanation of the parameters used in the function:</p>
<ul>
<li><code>n_estimators</code>: specifies the number of tree in the forest.</li>
<li><code>max_samples</code>: indicates how many rows to sample when training each tree.</li>
<li><code>max_features</code>: sets the number of columns to sample at each split (e.g., 0.5 means using half of the columns).</li>
<li><code>min_samples_leaf</code>: determines the minimum number of samples required in the leaf node, controlling the tree depth.</li>
</ul>
<p>Additionally, <code>n_jobs=-1</code> ensures that all available CPUs are utilized for parallel tree building. This function allows quick experimentation with different configurations.</p>
<p>Initiating the random forest model is straightforward:</p>
<div id="cell-155" class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf(xs, y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>By using multiple trees rather than a single <code>DecisionTreeRegressor</code>, the validation RMSE significantly improves:</p>
<div id="cell-157" class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">m_rmse(m, xs, y), m_rmse(m, valid_xs, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>(0.171371, 0.233223)</code></pre>
</div>
</div>
<p>A distinctive feature of random forests is the resilience hyperparameter configurations, particularly <code>max_features</code>.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>When we say random forests show resilience to hyperparameter configurations, it means that the algorithm performs well across a range of different hyperparameter settings. It doesn’t require very precise tuning to achieve good results, making it a flexible option in many applications.</p>
</div>
</div>
<p>The N_estimators parameter can be set to as high as value as feasible, the more trees, the greater the accuracy potential</p>
<p>For visualizing effects of varying max_features with increasing tree counts, refer to sklearn’s documentation which provides insightful plots.</p>
<p><img src="https://scikit-learn.org/stable/_images/sphx_glr_plot_ensemble_oob_001.png"></p>
<p>The image demonstrates:</p>
<ul>
<li>Blue line: represents minimal features usage.</li>
<li>Green line: represents maximal feature usage (full feature set). Subsets of features combined with numerous trees usualy yield the lowest error.</li>
</ul>
<p>To explore the impact of <code>n_estimators</code> analyze predictions from each individual tree within the forest (accessible via the <code>estimators_</code> attribute):</p>
<div id="cell-159" class="cell">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack([t.predict(valid_xs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> m.estimators_])</span></code></pre></div>
</div>
<div id="cell-160" class="cell">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">r_mse(preds.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>0.233223</code></pre>
</div>
</div>
<p>This calculation, <code>preds.mean(0)</code>, parallels the overall random forest prediction. Observe RMSE progression as trees are added:</p>
<div id="cell-162" class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1">plt.plot([r_mse(preds[:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), valid_y) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-73-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Despite improved RMSE in training, the validation set’s performance may deteriorate due to potential overfitting or time discrepancies. This challenge is addressable by leveraging the out-of-bag (OOB) error methodology in random forests, offering valuable insights.</p>
<p>In the next section, we’ll delve deeper into creating a random forest and optimizing it’s performance.</p>
</section>
<section id="out-of-bag-error" class="level3">
<h3 class="anchored" data-anchor-id="out-of-bag-error">Out of Bag Error</h3>
<p>In a random forest, each tree is trained on different subset of data. Consequently, there’s a unique opportunity: each tree has an implicit validation set composed of the data rows not selected for its training, know as out-of-bag (OOB) data.</p>
<p>OOB error is particularly useful when dealing with a limited dataset, as it offers a measure of model generalization without needing to withhold data for a separate validation set. These OOB predictions are stored in the <code>oob_prediction_</code> attribute. Remember, these are compared with training labels, as the OOB calculation involves the training set:</p>
<div id="cell-166" class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1">r_mse(m.oob_prediction_, y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="73">
<pre><code>0.211234</code></pre>
</div>
</div>
<p>The OOB error frequently appears lower than the validation set error, hinting that other factors might contribute to the validation error, hinting that other factors might contribute to the validation error outside mere generalization discrepancies. We’ll delve into these causes soon.</p>
</section>
<section id="model-interpretation" class="level3">
<h3 class="anchored" data-anchor-id="model-interpretation">Model Interpretation</h3>
<p>Interpreting models trained on tabular data presents valuable insights. Higher understanding can be sought in ares like:</p>
<ul>
<li>How confident are we in our predictions using a particular row of data?</li>
<li>For predicting with a particular row of data, what were the most important factors, and how did they influence that prediction?</li>
<li>Which columns are the strongest predictors, which can we ignore?</li>
<li>Which columns are effectively redundant with each other, for purposes of prediction?</li>
<li>How do predictions vary, as we vary these columns?</li>
</ul>
<p>Random forests are adept at addressing these questions. Let’s start with evaluating confidence in predictions!</p>
<p>Model predictions are an average of individual tree predictions, providing an estimated value. But how can we gauge the confidence of this estimate? One simplistic approach is using the standard deviations of tree predictions - higher deviations imply less confidence, suggesting that caution is needed, especially in scenarios where tree predictions are inconsistent.</p>
<p>In creating the random forest, predictions over the validations set were obtained using Python’s list comprehension:</p>
<div id="cell-170" class="cell">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack([t.predict(valid_xs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> m.estimators_])</span></code></pre></div>
</div>
<div id="cell-171" class="cell">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1">preds.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="75">
<pre><code>(40, 7988)</code></pre>
</div>
</div>
<p>This results in a prediction for each tree across all validation set auctions (40 trees, 7,988 auctions). With this data, compute the standard deviation of predictions for each auction:</p>
<div id="cell-173" class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1">preds_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preds.std(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb117-2">preds_std[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="76">
<pre><code>array([0.2000169 , 0.08355874, 0.113672  , 0.2747    , 0.12065141])</code></pre>
</div>
</div>
<p>The standard deviations highlight varying levels of confidence across auctions. A lower deviation signals stronger agreement among trees, leading to higher confidence. Conversely, higher deviations indicate disagreement, pointing towards lower confidence. In practical applications like auction bidding, this information is useful; you might reconsider bidding when predictions show low certainty.</p>
<section id="feature-importance" class="level4">
<h4 class="anchored" data-anchor-id="feature-importance">Feature Importance</h4>
<p>Knowing a model’s predictive accuracy is critical, but equally important is understanding how those predictions are made. Feature importance offers valuable insight into this process. Sklearn’s random forest model provides feature importance scores via the <code>feature_importance_</code> attributes. Here’s a simple function load these scores into a DataFrame and sort them</p>
<div id="cell-177" class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rf_feat_importance(m, df):</span>
<span id="cb119-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cols'</span>:df.columns, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imp'</span>:m.feature_importances_}</span>
<span id="cb119-3">                       ).sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imp'</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb119-4">fi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf_feat_importance(m, xs)</span>
<span id="cb119-5">fi[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">cols</th>
<th data-quarto-table-cell-role="th">imp</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">57</td>
<td>YearMade</td>
<td>0.166375</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">30</td>
<td>Coupler_System</td>
<td>0.113599</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>ProductSize</td>
<td>0.103802</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>fiProductClassDesc</td>
<td>0.078686</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>fiSecondaryDesc</td>
<td>0.054542</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">54</td>
<td>ModelID</td>
<td>0.052919</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">65</td>
<td>saleElapsed</td>
<td>0.050521</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>Grouser_Tracks</td>
<td>0.041514</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>Enclosure</td>
<td>0.039451</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">32</td>
<td>Hydraulics_Flow</td>
<td>0.035355</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Evaluating the features importances reveals that a few columns significantly contribute to the model’s predictions, most notably, <code>YearMade</code> and <code>ProductSize</code>.</p>
<p>To visualize these importance, plotting them can clarify their relative value:</p>
<div id="cell-179" class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_fi(fi):</span>
<span id="cb120-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fi.plot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cols'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'barh'</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb120-3"></span>
<span id="cb120-4">plot_fi(fi[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-79-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="removing-low-importance-variables" class="level4">
<h4 class="anchored" data-anchor-id="removing-low-importance-variables">Removing Low-Importance Variables</h4>
<p>A subset of columns might suffice to maintain accuracy while enhancing simplicity by discarding low-importance variables. Let’s retain only those with an importance score above 0.005:</p>
<div id="cell-182" class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">to_keep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fi[fi.imp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>].cols</span>
<span id="cb121-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(to_keep)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">
<pre><code>22</code></pre>
</div>
</div>
<p>Retrain the model using this refined feature set:</p>
<div id="cell-184" class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1">xs_imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs[to_keep]</span>
<span id="cb123-2">valid_xs_imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_xs[to_keep]</span>
<span id="cb123-3"></span>
<span id="cb123-4">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf(xs_imp, y)</span>
<span id="cb123-5">m_rmse(m, xs_imp, y), m_rmse(m, valid_xs_imp, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>(0.180965, 0.231633)</code></pre>
</div>
</div>
<p>The models accuracy remain consistent, yet fewer columns necessitate examination:</p>
<div id="cell-186" class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xs.columns), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xs_imp.columns)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<pre><code>(66, 22)</code></pre>
</div>
</div>
<p>Simplifying a model is often the initial step in enhancing it having 78 columns can be overwhelming for deep analysis. Particularly, a learner, more interpretable model is simpler to deploy and manage.</p>
<p>Revisiting the feature importance plot provides clearer insights:</p>
<div id="cell-188" class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1">plot_fi(rf_feat_importance(m, xs_imp))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-83-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>While interpreting, redundancy may arise as seen with <code>ProductGroup</code> and <code>ProductGroupDesc</code>. Attempting to remove such redundant features can further streamline interpretation.</p>
</section>
<section id="removing-redundant-variables" class="level4">
<h4 class="anchored" data-anchor-id="removing-redundant-variables">Removing Redundant Variables</h4>
<p>We’ll begin by clustering columns to identify pairs that are closely aligned often suggesting redundancy:</p>
<div id="cell-192" class="cell" data-execution_count="83">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb128-1">cluster_columns(xs_imp)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-84-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The chart generated from clustering will reveal which columns were merged early on. Notably, pairs like <code>ProductGroup</code> with <code>ProductGroupDesc</code>, <code>saleYear</code> with <code>saleElapsed</code>, and <code>fiModelDesc</code> with <code>fiBaseModel</code> are likely correlated to the point of redundancy.</p>
<p>Next, we will attempt to simplify the model by removing these related features. We begin by defining a function to quickly train a random forest and capture the out-of-bag(OOB) score. This score, ranging from 1.0 for perfection to near-zero, provides a relative comparison metric as we remove redundant columns:</p>
<div id="cell-194" class="cell" data-execution_count="84">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_oob(df):</span>
<span id="cb129-2">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestRegressor(n_estimators<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, min_samples_leaf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb129-3">        max_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, max_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, oob_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb129-4">    m.fit(df, y)</span>
<span id="cb129-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> m.oob_score_</span></code></pre></div>
</div>
<p>First, we’ll confirm our baseline score with all columns:</p>
<div id="cell-196" class="cell" data-execution_count="85">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb130-1">get_oob(xs_imp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="85">
<pre><code>0.8760739540611289</code></pre>
</div>
</div>
<p>Next, test the impact of removing each potentially redundant variable individually:</p>
<div id="cell-198" class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb132-1">{c:get_oob(xs_imp.drop(c, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (</span>
<span id="cb132-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saleYear'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saleElapsed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductGroupDesc'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductGroup'</span>,</span>
<span id="cb132-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fiModelDesc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fiBaseModel'</span>,</span>
<span id="cb132-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hydraulics_Flow'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouser_Tracks'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coupler_System'</span>)}</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="86">
<pre><code>{'saleYear': 0.8742959821922331,
 'saleElapsed': 0.8698149904307536,
 'ProductGroupDesc': 0.8755334280543031,
 'ProductGroup': 0.8745495772129529,
 'fiModelDesc': 0.8743458666758965,
 'fiBaseModel': 0.8748827464781819,
 'Hydraulics_Flow': 0.8762012623754625,
 'Grouser_Tracks': 0.8755826405754699,
 'Coupler_System': 0.8758570604637711}</code></pre>
</div>
</div>
<p>We’ll also explore the effect of dropping one columns from each identified pair:</p>
<div id="cell-200" class="cell" data-execution_count="87">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1">to_drop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saleYear'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductGroupDesc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fiBaseModel'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouser_Tracks'</span>]</span>
<span id="cb134-2">get_oob(xs_imp.drop(to_drop, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="87">
<pre><code>0.8743053306321846</code></pre>
</div>
</div>
<p>Encouragingly, the model’s performance remains largely unchanged. We will now finalize this reduce dataset:</p>
<div id="cell-202" class="cell" data-execution_count="88">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb136-1">xs_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs_imp.drop(to_drop, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb136-2">valid_xs_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_xs_imp.drop(to_drop, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb136-3"></span>
<span id="cb136-4">save_pickle(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xs_final.pkl'</span>, xs_final)</span>
<span id="cb136-5">save_pickle(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_xs_final.pkl'</span>, valid_xs_final)</span></code></pre></div>
</div>
<p>For later retrieval, you can load these condensed datasets with:</p>
<div id="cell-204" class="cell" data-execution_count="89">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">xs_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_pickle(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xs_final.pkl'</span>)</span>
<span id="cb137-2">valid_xs_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_pickle(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_xs_final.pkl'</span>)</span></code></pre></div>
</div>
<p>Let’s verify that the RMSE remains consistent after this reduction:</p>
<div id="cell-206" class="cell" data-execution_count="90">
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb138-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf(xs_final, y)</span>
<span id="cb138-2">m_rmse(m, xs_final, y), m_rmse(m, valid_xs_final, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="90">
<pre><code>(0.182663, 0.231313)</code></pre>
</div>
</div>
<p>By concentrating on key variables and eliminating redundancies, we’ve streamlined our model significantly. Now, let’s further explore how these influential variables affect predictions using partial dependence plots.</p>
</section>
<section id="partial-dependence" class="level4">
<h4 class="anchored" data-anchor-id="partial-dependence">Partial Dependence</h4>
<p>Alright, let’s get a feel for these predictions. Imagine checking out the menu at a restaurant. Before ordering, you’d want to know what’s popular, right? We do the same thing with our data. For <code>ProductSize</code>, we count how many times each size appears using something like Pandas’ <code>value_counts</code> method and then plot this on a bar chart. Here’s our code in action:</p>
<div id="cell-210" class="cell" data-execution_count="91">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_xs_final[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>].value_counts(sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).plot.barh()</span>
<span id="cb140-2">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to.classes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>]</span>
<span id="cb140-3">plt.yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c)), c)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-92-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Turns out, the biggest “dish” on our menu is labeled <code>Compact</code> but look at #na#, fastai’s way of showing missing values. No big surprise there!</p>
<p>What about YearMade? This time, instead of a bar chart, we whip out a histogram.</p>
<div id="cell-212" class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb141" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb141-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_xs_final[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'YearMade'</span>].hist()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-93-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Apart from 1950, which we used as placeholder for unknown years, most machines were crafted post-1990. Vintage anyone?</p>
<p>Partial dependence plots help us see what would happen to the sale price if one feature changed while everything else stayed the same.</p>
<p>For YearMade, we can’t just average sale prices by year because many things change over time. Instead, we replace every year value with a single year, like 1950, and calculate the average predicted sale price. We repeat this for each year, up to 2011, to see how YearMade alone affects price.</p>
<p>Then, we plot the results:</p>
<div id="cell-214" class="cell" data-execution_count="93">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.inspection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PartialDependenceDisplay</span>
<span id="cb142-2">fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb142-3">PartialDependenceDisplay.from_estimator(m, valid_xs_final, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'YearMade'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>],</span>
<span id="cb142-4">                                        grid_resolution<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-94-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>For YearMade, after 1990, there’s a clear pattern: prices rise as the year increase. This make sense because older items depreciate.</p>
<p>The plot for ProductSize show that the group with missing values has the lowest prices. Understanding why these values are missing is crucial, as sometimes they can be good predictors, or they could indicate an issue like data leakage</p>
</section>
<section id="data-leakage" class="level4">
<h4 class="anchored" data-anchor-id="data-leakage">Data Leakage</h4>
<p>In the world of data mining, there’s a tricky issue known as data leakage, described in detail by Shachar Kaufman, Saharon Rosset, and Claudia Perlich in their paper, <a href="https://dl.acm.org/doi/10.1145/2020408.2020496">Leakage in Data Mining: Formulation, Detection, and Avoidance.</a> They define it as the unintentional introduction of information about the target of a data mining problem that shouldn’t be available to mine from. To put it simply, it’s like saying ‘it rains on rainy days,’ where the model mistakenly uses the target itself as an input.</p>
<p>Data leakage can be subtle, appearing in various forms, and one such form is through missing values. Here are the straightforward steps to spot data leakage:</p>
<ul>
<li>Assess whether your model’s accuracy seems too perfect. If it feels too good to be true, leakage might be playing a part.</li>
<li>Evaluate the significant predictors. If they don’t add up in a practical sense, then something might be off.</li>
<li>Analyze the partial dependence plots. If they yield nonsensical results, you could be facing a leakage issue.</li>
</ul>
<p>Additionally, tools like tree interpreters can aid in understanding which factors are influencing specific predictions.</p>
<p>Avoiding data leakage demands meticulous attention through all phases of data handling—from collection to preparation. The key is adopting a “learn-now, predict-later” approach, ensuring that models are built without any preview of the answers.</p>
</section>
<section id="tree-interpreter" class="level4">
<h4 class="anchored" data-anchor-id="tree-interpreter">Tree Interpreter</h4>
<p>Before we go in please make sure you’re already have <code>treeinterpreter</code> and <code>waterfallcharts</code> installed if not run this in your terminal</p>
<div class="sourceCode" id="cb143" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb143-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install treeinterpreter</span>
<span id="cb143-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install waterfallcharts</span></code></pre></div>
<p>At the start of this section, we said that we wanted to be able to answer five questions:</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>How confident are we in our predictions using particular row of data?</li>
<li>For predicting with a particular row of data, what were the most important factors, and how did they influence that predictions?</li>
<li>Which columns are the strongest predictors, which can we ignore?</li>
<li>Which columns are effectively redundant with each other, for purpose of prediction?</li>
<li>How do predictions vary, as we vary these columns?</li>
</ul>
</div>
</div>
<p>We’ve addressed four of these, leaving only the second question. To tackle this, we’ll use the <code>treeinterpreter</code> library, along with the <code>waterfallcharts</code> library for visualization.</p>
<div id="cell-220" class="cell" data-execution_count="94">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> treeinterpreter <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> treeinterpreter</span>
<span id="cb144-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> waterfall_chart <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> waterfall</span></code></pre></div>
</div>
<p>While we’ve computed feature importances across entire random forest, we can apply a similar concept to a single row of data. This approach examines the contribution of each variable to improving the model at each branch of every tree, then sums these contributions per variables for a specific data point.</p>
<p>For example, if we’re analyzing a particular auction item predicted to be expensive, we can understand why by examining that single row of data. We’ll process it through each decision tree, observing the split used at each point and calculating the increase or decrease in addition compared to the parent node. This process is repeated for every tree, summing up the total change in importance by split variable.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>For example, if you’re predicting house prices:</p>
<ul>
<li>The bias might be the average house price in your dataset.</li>
<li>A positive contribution from the “number of bedrooms” feature would indicate that having more bedrooms increased the predicted price.</li>
<li>A negative contribution from the “distance from city center” feature might indicate that being further from the city center decreased the predicted price.</li>
</ul>
</div>
</div>
<p>Let’s select the first few rows of our validation set:</p>
<div id="cell-222" class="cell" data-execution_count="95">
<div class="sourceCode cell-code" id="cb145" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb145-1">row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_xs_final.iloc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
</div>
<p>We can then use <code>treeinterpreter</code>:</p>
<div id="cell-224" class="cell" data-execution_count="96">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1">prediction,bias,contributions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> treeinterpreter.predict(m, row.values)</span></code></pre></div>
</div>
<p>Here, <code>prediction</code> is the random forest’s prediction, <code>bias</code> is the prediction based on the mean of the dependent variable, and <code>contributions</code> shows how each feature (independent variable) in your input data contributed to moving the prediction away from the bias. The sum of <code>contributions</code> plus <code>bias</code> equals the <code>prediction</code> for each row</p>
<div id="cell-226" class="cell" data-execution_count="97">
<div class="sourceCode cell-code" id="cb147" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb147-1">prediction[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bias[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], contributions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="97">
<pre><code>(array([10.06313964]), 10.104746057831763, -0.04160642242374439)</code></pre>
</div>
</div>
<p>To visualize the contributions clearly, we can use waterfall plot:</p>
<div id="cell-228" class="cell" data-execution_count="98">
<div class="sourceCode cell-code" id="cb149" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb149-1">waterfall(valid_xs_final.columns, contributions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>,</span>
<span id="cb149-2">          rotation_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>,formatting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.3f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-99-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This plot demonstrates how positive and negative contributes from all independent variables sum up to create the final prediction, show in the rightmost column labeled <code>net</code>.</p>
<p>This type of information is particularly valuable in production environments, rather than during model development. It can provide users of your data product with insightful information about the underlying reasoning behind the predictions.</p>
<p>Having explored these classic machine learning techniques, we’re now ready to see how deep learning can contribute to solving this problem</p>
</section>
</section>
</section>
<section id="extrapolation-and-neuron-networks" class="level2">
<h2 class="anchored" data-anchor-id="extrapolation-and-neuron-networks">Extrapolation and Neuron Networks</h2>
<p>Random forests, like all machine learning or deep learning algorithms, don’t always generalize well to new data. Lets explore this issue, particularly focusing on the extrapolation problem that random forests face.</p>
<section id="the-extrapolation-problem" class="level3">
<h3 class="anchored" data-anchor-id="the-extrapolation-problem">The Extrapolation Problem</h3>
<p>Consider a simple task: making prediction from 40 data points showing a slightly noisy linear relationship. We’ll create this data and visualize it:</p>
<div id="cell-234" class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb150-1">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb150-2">x_lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb150-3">y_lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.randn_like(x_lin)</span>
<span id="cb150-4">plt.scatter(x_lin, y_lin)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-100-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We need to reshape our data for sklearn, which expect a matrix of independent variables:</p>
<div id="cell-236" class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb151" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb151-1">xs_lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_lin.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb151-2">x_lin.shape,xs_lin.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>(torch.Size([40]), torch.Size([40, 1]))</code></pre>
</div>
</div>
<div id="cell-237" class="cell" data-execution_count="101">
<div class="sourceCode cell-code" id="cb153" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb153-1">x_lin[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="101">
<pre><code>torch.Size([40, 1])</code></pre>
</div>
</div>
<p>Now, let’s create a random forest using the first 30 rows for training:</p>
<div id="cell-239" class="cell" data-execution_count="102">
<div class="sourceCode cell-code" id="cb155" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb155-1">m_lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestRegressor().fit(xs_lin[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>],y_lin[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>])</span></code></pre></div>
</div>
<p>We’ll test the model on the full dataset and visualize the results:</p>
<div id="cell-241" class="cell" data-execution_count="103">
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb156-1">plt.scatter(x_lin, y_lin, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb156-2">plt.scatter(x_lin, m_lin.predict(xs_lin), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-104-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Here’s where we encounter a significant issue: our predictions outside the training data domain are consistently too low. This happens because a random forest average value of the rows in a leaf. Consequently, a random forest can’t predict values outside the rage of its training data.</p>
<p>This limitation is particularly problematic for data with time-based trends, like inflation, where future predictions are needed. Your predictions will systematically be too low.</p>
<p>The problem isn’t limited to time variables, though. Random forest struggle to extrapolate beyond the types of data they’ve seen in a more general sense. That’s wy it’s crucial to ensure our validation set doesn’t contain out-of-domain data</p>
</section>
<section id="finding-out-of-domain-data" class="level3">
<h3 class="anchored" data-anchor-id="finding-out-of-domain-data">Finding Out-of-Domain Data</h3>
<p>Identifying whether your test set is distributed differently from your training data can be challenging. Interestingly, we can use a random forest to help us with this task. Here’s how:</p>
<p>Instead of predicting our actual dependent variable, we’ll try to predict whether a row belongs to the validation set or the training set. Let’s combine our training and validation sets, create a new dependent variable representing the dataset origin, and build a random forest:</p>
<div id="cell-245" class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb157" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb157-1">df_dom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([xs_final, valid_xs_final])</span>
<span id="cb157-2">is_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xs_final) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_xs_final))</span>
<span id="cb157-3"></span>
<span id="cb157-4">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf(df_dom, is_valid)</span>
<span id="cb157-5">rf_feat_importance(m, df_dom)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="104">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">cols</th>
<th data-quarto-table-cell-role="th">imp</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>saleElapsed</td>
<td>0.910266</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>SalesID</td>
<td>0.073707</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>MachineID</td>
<td>0.012246</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0</td>
<td>YearMade</td>
<td>0.000813</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>fiModelDesc</td>
<td>0.000535</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>ModelID</td>
<td>0.000471</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>This reveals three columns that differ significantly between the sets: <code>saleElapsed</code>, <code>SalesID</code> and <code>MachineID</code>. <code>saleElapsed</code> directly encoded the date, while <code>SalesID</code> and <code>MachineID</code> likely represent incrementing identifiers over time.</p>
<p>Let’s compare the RMSE of our original model with versions that exclude these columns:</p>
<div id="cell-247" class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb158-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf(xs_final, y)</span>
<span id="cb158-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orig'</span>, m_rmse(m, valid_xs_final, valid_y))</span>
<span id="cb158-3"></span>
<span id="cb158-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SalesID'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saleElapsed'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MachineID'</span>):</span>
<span id="cb158-5">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf(xs_final.drop(c,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), y)</span>
<span id="cb158-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(c, m_rmse(m, valid_xs_final.drop(c,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), valid_y))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>orig 0.231001
SalesID 0.230214
saleElapsed 0.235865
MachineID 0.231447</code></pre>
</div>
</div>
<p>It appears that we can remove SalesID and MachineID without losing accuracy:</p>
<div id="cell-249" class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb160-1">time_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SalesID'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MachineID'</span>]</span>
<span id="cb160-2">xs_final_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs_final.drop(time_vars, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb160-3">valid_xs_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_xs_final.drop(time_vars, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb160-4"></span>
<span id="cb160-5">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf(xs_final_time, y)</span>
<span id="cb160-6">m_rmse(m, valid_xs_time, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="106">
<pre><code>0.228264</code></pre>
</div>
</div>
<p>Removing these variables slightly improves the model’s accuracy and should make it more resilient over time, easier to maintain, and understand.</p>
<p>Sometimes, using only recent data can help. Let’s try using data from the most recent years:</p>
<div id="cell-251" class="cell" data-execution_count="107">
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb162-1">xs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saleYear'</span>].hist()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-108-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-252" class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb163" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb163-1">filt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saleYear'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2004</span></span>
<span id="cb163-2">xs_filt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs_final_time[filt]</span>
<span id="cb163-3">y_filt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[filt]</span>
<span id="cb163-4"></span>
<span id="cb163-5"></span>
<span id="cb163-6">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf(xs_filt, y_filt)</span>
<span id="cb163-7">m_rmse(m, xs_filt, y_filt), m_rmse(m, valid_xs_time, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="108">
<pre><code>(0.176448, 0.228537)</code></pre>
</div>
</div>
<p>This yields a slightly improvement, demonstrating that using your entire dataset isn’t always the best approach; sometimes subset can perform better.</p>
<p>I recommend building a model with <code>is_valid</code> as the dependent variable for all datasets. This can uncover subtle domain shift issues that might otherwise go unnoticed.</p>
<p>Next, we’ll explore whether using a neural network can further improve our results</p>
</section>
<section id="using-neural-networks" class="level3">
<h3 class="anchored" data-anchor-id="using-neural-networks">Using Neural Networks</h3>
<p>To build a neural network model, we’ll follow a similar approach to our random forest setup. First, let’s replicate the steps for creating the TabularPandas object:</p>
<div id="cell-256" class="cell">
<div class="sourceCode cell-code" id="cb165" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb165-1">df_nn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TrainAndValid.csv'</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb165-2">df_nn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_nn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>].astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category'</span>)</span>
<span id="cb165-3">df_nn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ProductSize'</span>].cat.set_categories(sizes, ordered<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb165-4">df_nn[dep_var] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df_nn[dep_var])</span>
<span id="cb165-5">df_nn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> add_datepart(df_nn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saledate'</span>)</span></code></pre></div>
</div>
<p>We can utilize the column selection from our random forest model for the neural network:</p>
<div id="cell-258" class="cell" data-execution_count="110">
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb166-1">df_nn_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_nn[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(xs_final_time.columns) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [dep_var]]</span></code></pre></div>
</div>
<p>Neural networks handle categorical columns differently than decision trees. Embedding are an effective method for categorical variables in neural nets. Fastai determines which columns should be treated as categorical by comparing the number of distinct levels to the <code>max_card</code> parameter. We’ll use 9,000 as our <code>max_card</code> to avoid unnecessarily large embeddings:</p>
<div id="cell-260" class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb167" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb167-1">cont_nn,cat_nn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cont_cat_split(df_nn_final, max_card<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9000</span>, dep_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dep_var)</span></code></pre></div>
</div>
<p>It’s crucial to ensure that <code>saleElapsed</code> isn’t treated as a categorical variable as we need to predict auction sale prices in the feature. Let’s verify the continuous variable</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>As a continuous variable, <code>saleElapsed</code> can capture trends over time. If it were treated as a categorical variable, you’d lose the ability to interpolate or extrapolate between known values, which is crucial for prediction.</p>
<p>When you’re predicting auction sale prices for future dates, you’ll be dealing with ‘saleElapsed’ values that weren’t in your training data. If ‘saleElapsed’ were categorical, your model wouldn’t know how to handle these new values.</p>
</div>
</div>
<div id="cell-262" class="cell" data-execution_count="112">
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb168-1">cont_nn</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="112">
<pre><code>['saleElapsed']</code></pre>
</div>
</div>
<p>Now, let’s examine the cardinality of our chosen categorical variables:</p>
<div id="cell-264" class="cell" data-execution_count="113">
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb170-1">df_nn_final[cat_nn].nunique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="113">
<pre><code>YearMade                73
Coupler_System           2
ProductSize              6
fiProductClassDesc      74
fiSecondaryDesc        177
ModelID               5281
Enclosure                6
Hydraulics_Flow          3
fiModelDesc           5059
fiModelDescriptor      140
Hydraulics              12
ProductGroup             6
Drive_System             4
Tire_Size               17
Track_Type               2
dtype: int64</code></pre>
</div>
</div>
<p>We notice two “model” variables with similar high cardinalities, suggesting potential redundancy. To reduce the embedding matrix size. Let’s assess the impact of removing one of these model columns on our random forest:</p>
<div id="cell-266" class="cell" data-execution_count="114">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb172-1">xs_filt2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs_filt.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fiModelDescriptor'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb172-2">valid_xs_time2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_xs_time.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fiModelDescriptor'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb172-3">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf(xs_filt2, y_filt)</span>
<span id="cb172-4">m_rmse(m2, xs_filt2, y_filt), m_rmse(m2, valid_xs_time2, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="114">
<pre><code>(0.178386, 0.229505)</code></pre>
</div>
</div>
<p>given the minimal impact, We’ll remove <code>fiModelDescriptor</code> from our neural network predictors:</p>
<div id="cell-268" class="cell" data-execution_count="115">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb174-1">cat_nn.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fiModelDescriptor'</span>)</span></code></pre></div>
</div>
<p>When creating our <code>TabularPandas</code> object for the neural network, we need to add normalization, which is crucial for neural networks but unnecessary for random forests:</p>
<div id="cell-270" class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb175" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb175-1">procs_nn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Categorify, FillMissing, Normalize]</span>
<span id="cb175-2">to_nn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPandas(df_nn_final, procs_nn, cat_nn, cont_nn,</span>
<span id="cb175-3">                      splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>splits, y_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dep_var)</span></code></pre></div>
</div>
<p>Since tabular models and data generally don’t require much GPU RAM, we can use larger batch sizes:</p>
<div id="cell-272" class="cell" data-execution_count="117">
<div class="sourceCode cell-code" id="cb176" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb176-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_nn.dataloaders(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span></code></pre></div>
</div>
<p>For regression models, it’s advisable to set y_range. Let’s find the min and max of our dependent variable:</p>
<div id="cell-274" class="cell" data-execution_count="118">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb177-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_nn.train.y</span>
<span id="cb177-2">y.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),y.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="118">
<pre><code>(8.465899467468262, 11.863582611083984)</code></pre>
</div>
</div>
<p>Now we can create the <code>Learner</code> for our tabular model. We’ll use MSE as the loss function and increase the default layer sizes to 500 and 250 for our large dataset:</p>
<div id="cell-276" class="cell" data-execution_count="119">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tabular_learner(dls, y_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>],</span>
<span id="cb179-2">                        n_out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>F.mse_loss)</span>
<span id="cb179-3">learn.lr_find()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="119">
<pre><code>SuggestedLRs(valley=0.00013182566908653826)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/index_files/figure-html/cell-120-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We’ll train with <code>fit_one_cycle</code> for a few epochs:</p>
<div id="cell-278" class="cell" data-execution_count="120">
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb181-1">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.061921</td>
<td>0.067224</td>
<td>00:05</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.051130</td>
<td>0.056330</td>
<td>00:04</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.046388</td>
<td>0.054012</td>
<td>00:03</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.041853</td>
<td>0.054157</td>
<td>00:03</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.040173</td>
<td>0.052207</td>
<td>00:03</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Let’s compare the result to our earlier random forest using the <code>r_mse</code> function:</p>
<div id="cell-280" class="cell" data-execution_count="121">
<div class="sourceCode cell-code" id="cb182" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb182-1">preds,targs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.get_preds()</span>
<span id="cb182-2">r_mse(preds,targs)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="121">
<pre><code>0.228488</code></pre>
</div>
</div>
<p>The neural network performs better than the random forest, although it take longer to train and requires more careful hyprerparameter tuning</p>
<p>We’ll save our model for future use:</p>
<div id="cell-282" class="cell" data-execution_count="122">
<div class="sourceCode cell-code" id="cb184" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb184-1">learn.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nn'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="122">
<pre><code>Path('models/nn.pth')</code></pre>
</div>
</div>
<p>To further improve generalization, we can use ensemble learning, which evolves averaging predictions from several models.</p>
</section>
</section>
<section id="ensembling" class="level2">
<h2 class="anchored" data-anchor-id="ensembling">Ensembling</h2>
<p>The success of random forests is rooted in the principle that while individual trees have errors, these errors are not correlated. With enough trees, the average of these errors should approach zero. We can apply similar reasoning to combine predictions from different algorithms.</p>
<p>In our case, we have two distinct models: a random forest and a neural network. Their different approaches likely result in different types of errors. Therefore, averaging their predictions could potentially outperform either model individually.</p>
<p>It’s worth nothing that a random forest is itself an ensemble, By combining it with a neural network, we’re creating an ensemble of ensembles! While ensembling may not revolutionize your modeling process, it can provide a welcome boost to your exiting model.</p>
<p>One small challenge we face is the different output types from our Pytorch and sklearn models. Pytorch gives a rank-2 tensor (a column matrix), while sklearn produces a rank-1 array (a vector). We can address this using <code>squeeze</code> to remove unit axes and <code>to_np</code> to convert to Numpy array</p>
<div id="cell-286" class="cell" data-execution_count="123">
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb186-1">rf_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.predict(valid_xs_time)</span>
<span id="cb186-2">ens_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (to_np(preds.squeeze()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rf_preds) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<p>This ensemble approach yield better result than either model individually:</p>
<div id="cell-288" class="cell" data-execution_count="124">
<div class="sourceCode cell-code" id="cb187" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb187-1">r_mse(ens_preds,valid_y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="124">
<pre><code>0.222895</code></pre>
</div>
</div>
</section>
<section id="boosting" class="level2">
<h2 class="anchored" data-anchor-id="boosting">Boosting</h2>
<p>While our previous ensembling approach used bagging (combination many models trained on different data subsets by averaging), another important technique is boosting, where models are added instead of averaged.</p>
<p>Boosting works as follow:</p>
<ol type="1">
<li>Train a small, underfitting model on you dataset.</li>
<li>Calculate this model predictions for the training set.</li>
<li>Subtract these predictions from the actual targets to get the “residuals”(the error for each training point).</li>
<li>Return to step 1, but use the residuals as the new training targets.</li>
<li>Repeat this process until reaching a stopping criterion(e.g., maximum number of trees or worsening validation set error).</li>
</ol>
<p>In this approach, each new tree attempts to fit the combined error of all previous trees. As we continually create new residuals by subtracting each new tree’s predictions from the previous residuals, these residuals progressively decrease.</p>
<p>To make predictions with a boosted tree ensemble, we calculate predictions from each tree and sum them. This approach has many variations and names, including Gradient Boosting Machines (GBMs) and Gradient Boosted Decision Trees (GBDTs). XGBoost is currently the most popular implementation.</p>
<p>Unlike random forests, boosting can lead to overfitting. In random forests, adding more trees doesn’t cause overfitting because each tree is independent. However, in a boosted ensemble, more trees continuously improve the training error, potentially leading to overfitting on the validation set.</p>
</section>
<section id="key-takeaway" class="level2">
<h2 class="anchored" data-anchor-id="key-takeaway">Key takeaway</h2>
<p>We have discussed two approaches to tabular modeling: decision tree ensembles and neural networks. We’ve also mentioned two different decision tree ensembles: random forests, and gradient boosting machines. Each is very effective, but each also has compromises:</p>
<ul>
<li><em>Random forests</em> are the easiest to train, because they are extremely resilient to hyperparameter choices and require very little preprocessing. They are very fast to train, and should not overfit if you have enough trees. But they can be a little less accurate, especially if extrapolation is required, such as predicting future time periods.</li>
<li><em>Gradient boosting</em> machines in theory are just as fast to train as random forests, but in practice you will have to try lots of different hyperparameters. They can overfit, but they are often a little more accurate than random forests.</li>
<li><em>Neural networks</em> take the longest time to train, and require extra preprocessing, such as normalization; this normalization needs to be used at inference time as well. They can provide great results and extrapolate well, but only if you are careful with your hyperparameters and take care to avoid overfitting.</li>
</ul>
<p>We suggest starting your analysis with a random forest. This will give you a strong baseline, and you can be confident that it’s a reasonable starting point. You can then use that model for feature selection and partial dependence analysis, to get a better understanding of your data.</p>
<p>From that foundation, you can try neural nets and GBMs, and if they give you significantly better results on your validation set in a reasonable amount of time, you can use them. If decision tree ensembles are working well for you, try adding the embeddings for the categorical variables to the data, and see if that helps your decision trees learn better.</p>
<p>Alright guys, it’s been a long post huh? Thanks for reading all of those, catch you on the flip side, and I’ll see you… next time!</p>


</section>

 ]]></description>
  <category>kaggle</category>
  <category>competition</category>
  <category>random forest</category>
  <category>bagging</category>
  <category>boosting</category>
  <guid>https://bhdai.github.io/blog/posts/2024-11-12-random-forest/</guid>
  <pubDate>Sat, 09 Nov 2024 17:00:00 GMT</pubDate>
  <media:content url="https://bhdai.github.io/blog/posts/2024-11-12-random-forest/random_forest.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Fundamentals of Text Classification and Correlation in Natural Language Processing</title>
  <dc:creator>Bui Huu Dai</dc:creator>
  <link>https://bhdai.github.io/blog/posts/nlp-beginner/</link>
  <description><![CDATA[ 






<p>Hello and welcome, aspiring data scientist and NLP enthusiasts!</p>
<p>Today, we’re going to explore the fascinating of Natural Language Processing (NLP) and its application in text classification.</p>
<p>In this blog post, we’ll walk through the process of tackling a text similarity problem using modern NLP techniques. We’ll cover everything from data preparation to model training and evaluation. Along a way, we’ll also delve into correlation analysis using a classic dataset, helping us understand the importance of metrics in machine learning.</p>
<p>We’ll be using popular libraries like Transformers, pandas, matplotlib to bring our data to life and gain meaningful insights.</p>
<p>Alright enough chit chat, let’s roll up our sleeves and dive into the world of NLP.</p>
<section id="data-preparation" class="level2">
<h2 class="anchored" data-anchor-id="data-preparation">Data Preparation</h2>
<p>Alright, let’s drive into the data preparation for the <a href="https://www.kaggle.com/c/us-patent-phrase-to-phrase-matching">U.S. Patent Phrase to Phrase Matching</a> challenge. To start, you need to download the dataset using the <a href="https://github.com/Kaggle/kaggle-api">Kaggle APi</a>. Follow the installation instruction in their Github page, and then you can grab the dataset with the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kaggle</span> competitions download <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> us-patent-phrase-to-phrase-matching</span></code></pre></div>
<p>With the data in hand, let’s firer up python environment and take a closer look:</p>
<div id="cell-2" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:27.553966Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:27.553574Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:28.047935Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:28.046907Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:27.553920Z&quot;}}" data-trusted="true" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the path to the data</span></span>
<span id="cb2-7">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data"</span>)</span>
<span id="cb2-8">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train.csv"</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the dataframe</span></span>
<span id="cb2-11">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">anchor</th>
<th data-quarto-table-cell-role="th">target</th>
<th data-quarto-table-cell-role="th">context</th>
<th data-quarto-table-cell-role="th">score</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>37d61fd2272659b1</td>
<td>abatement</td>
<td>abatement of pollution</td>
<td>A47</td>
<td>0.50</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>7b9652b17b68b7a4</td>
<td>abatement</td>
<td>act of abating</td>
<td>A47</td>
<td>0.75</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>36d72442aefd8232</td>
<td>abatement</td>
<td>active catalyst</td>
<td>A47</td>
<td>0.25</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>5296b0c19e1ce60e</td>
<td>abatement</td>
<td>eliminating process</td>
<td>A47</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>54c1e3b9184cb5b6</td>
<td>abatement</td>
<td>forest region</td>
<td>A47</td>
<td>0.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Examining the data is always the first step. Let’s peek at some summery statics to get an initial sense of what we’re working with:</p>
<div id="cell-4" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:28.050828Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:28.049953Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:28.138670Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:28.137731Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:28.050773Z&quot;}}" data-trusted="true" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.describe(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">anchor</th>
<th data-quarto-table-cell-role="th">target</th>
<th data-quarto-table-cell-role="th">context</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>36473</td>
<td>36473</td>
<td>36473</td>
<td>36473</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">unique</td>
<td>36473</td>
<td>733</td>
<td>29340</td>
<td>106</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">top</td>
<td>8d135da0b55b8c88</td>
<td>component composite coating</td>
<td>composition</td>
<td>H01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">freq</td>
<td>1</td>
<td>152</td>
<td>24</td>
<td>2186</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Notice something interesting? The <code>anchor</code> field has only 733 unique values in a dataset of 36,000 entries. That’s a clear sign of repetition, suggesting some phrases appear frequently.</p>
<p>Now, onto preparing data for our model. In this task, our goal is to determine if two phrases have similar meanings. To give our model more context. Let’s add structure labels like “TEXT1:” and “TEXt2:”. This helps in making data more informative, alright because we have to do the same thing to our test set so i will write a function for this:</p>
<div id="cell-6" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:28.140148Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:28.139835Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:28.145008Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:28.143927Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:28.140115Z&quot;}}" data-trusted="true" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preprocess_function(examples):</span>
<span id="cb4-2">    examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TEXT1: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"context"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"; TEXT2: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"; ANC1: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anchor"</span>]</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> examples</span></code></pre></div>
</div>
<p>Adding context can be incredibly valuable providing the model with the background it need to understand nuanced of differences or similarities, especially in specialized field like patents.</p>
<p>Next we convert our Pandas DataFrame into a Dataset Object and apply the process function:</p>
<div id="cell-8" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:28.147941Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:28.147576Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:33.692824Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:33.691599Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:28.147905Z&quot;}}" data-trusted="true" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DatasetDict</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the DataFrame to a Dataset</span></span>
<span id="cb5-4">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset.from_pandas(df)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the preprocessing function</span></span>
<span id="cb5-7">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(preprocess_function)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the first 5 preprocessed inputs</span></span>
<span id="cb5-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7a825ce8cb0642a2bbdf994de7305847","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>['TEXT1: A47; TEXT2: abatement of pollution; ANC1: abatement', 'TEXT1: A47; TEXT2: act of abating; ANC1: abatement', 'TEXT1: A47; TEXT2: active catalyst; ANC1: abatement', 'TEXT1: A47; TEXT2: eliminating process; ANC1: abatement', 'TEXT1: A47; TEXT2: forest region; ANC1: abatement']</code></pre>
</div>
</div>
<p>By structuring the data in this manner, we offer the model clear, consistent inputs, improving its ability to analyze and match the patent accurately</p>
</section>
<section id="tokenization" class="level2">
<h2 class="anchored" data-anchor-id="tokenization">Tokenization</h2>
<p>In the previous section, we got the data ready, Now, let’s dive into tokenization. a crucial step before feeding the data into a neuron network.</p>
<p>As i already talk about it in the previous blog post, Neuron network work with numbers not text so how do we bridge this gab, there are to main steps: <strong>Tokenization</strong> and <strong>Numericalization</strong>.</p>
<section id="step-1-tokenization" class="level3">
<h3 class="anchored" data-anchor-id="step-1-tokenization">Step 1: Tokenization</h3>
<p>Tokenizations involves splitting the text into smaller units called tokens. Tokens can be words, subwords or even character depending on the tokenization technique. For simplicity let’s think tokens are words</p>
<p>Once we split the text into tokens, we compile a list of all unique tokens, this list is known as the <code>vocabulary</code>. Every token in this vocabulary gets assigned a unique number. This mapping from tokens to numbers allows a neural network to process the text data.</p>
<p>However, there’s a catch! The larger the vocabulary, the more memory and data you need for training. To keep thing manageable, modern tokenization techniques often break words into subwords. Which help to minimize the vocabulary size. This process of breaking text into smaller units is called tokenization, and the smaller units are referred as tokens.</p>
</section>
<section id="step-2-numericalization" class="level3">
<h3 class="anchored" data-anchor-id="step-2-numericalization">Step 2: Numericalization</h3>
<p>In this step each token is converted into its unique ID based on its position in the vocabulary this process is called numericalization</p>
</section>
<section id="choosing-a-tokenizer" class="level3">
<h3 class="anchored" data-anchor-id="choosing-a-tokenizer">Choosing a Tokenizer</h3>
<p>Choosing a tokenizer involves several little decisions. The good news? you don’t have to these decisions yourself. Pre-trained models come with their own tokenization methods, and to use these model effectively, you need to use same tokenization approach they were trained with.</p>
<p>Enter HuggingFace’s <code>transformers</code> library. It provides a convenient way to load pre-trained models and their corresponding tokenizers. One highly versatile model is <code>deberta-v3</code></p>
<p>Here’s how you can set it up:</p>
<div id="cell-10" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:33.694602Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:33.694192Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:33.701758Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:33.700663Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:33.694553Z&quot;}}" data-trusted="true" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">model_nm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"microsoft/deberta-v3-base"</span></span></code></pre></div>
</div>
<p>We choose this model to ensure our tokenization matches the pre-trained model’s tokenization process. This consistency is crucial.</p>
<p>To load the tokenizer that correspond to our chosen model, we you <code>AutoTokenizer</code> from Hugging Face’s <em>transformer</em> library. This utility automatically fetches the correct tokenizer for our model:</p>
<div id="cell-12" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:33.703615Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:33.703190Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:39.793473Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:39.792624Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:33.703539Z&quot;}}" data-trusted="true" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForSequenceClassification, AutoTokenizer</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the tokenizer for our model</span></span>
<span id="cb8-4">tokz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_nm)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"75afef4e5c204198a10dacf90de6db7d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b1cc4b63c5954fb9ad5e7c2fba389852","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b14a9c4cd54e468bbdfc06137c23bbcf","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884
  warnings.warn(
/opt/conda/lib/python3.10/site-packages/transformers/convert_slow_tokenizer.py:551: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.
  warnings.warn(</code></pre>
</div>
</div>
<p>With the tokenizer loaded, you can now tokenize your text data in the same way the model was trained to do.</p>
<p>Alright, at this point we can use our tokenization to process strings. Let’s start with a simple example. If we pass this string “Hi folks, I’m Dai from my mother!” to the tokenizer, we can see how it breaks the text in to tokens</p>
<div id="cell-14" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:39.795000Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:39.794529Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:39.801779Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:39.800703Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:39.794968Z&quot;}}" data-trusted="true" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">tokz.tokenize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi folks, I'm Dai from my mother!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>['▁Hi', '▁folks', ',', '▁I', "'", 'm', '▁Dai', '▁from', '▁my', '▁mother', '!']</code></pre>
</div>
</div>
<p>You’ll notice doesn’t just split the text into words. If you’ve wondered “I’m” is one word or two, you’ll find that it’s actually three tokens according to this tokenizer. These tokens include partial words and punctuations. The character looks like underscore here signify the start of the word</p>
<p>Here’s a less common sentence: “A platypus is an ornithorhynchus anatinus”.</p>
<div id="cell-16" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:39.803758Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:39.803341Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:39.810185Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:39.809254Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:39.803712Z&quot;}}" data-trusted="true" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">tokz.tokenize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A platypus is an ornithorhynchus anatinus."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>['▁A',
 '▁platypus',
 '▁is',
 '▁an',
 '▁or',
 'ni',
 'tho',
 'rhynch',
 'us',
 '▁an',
 'at',
 'inus',
 '.']</code></pre>
</div>
</div>
<p>In this vocabulary, “platypus” gets its own token, but “ornithorhynchus” is split into smaller parts. Each of these tokens corresponds to an entry in a predefined vocabulary list created during the model’s pre-training. Somewhere in that list, we’ll find “A”, and it will have a specific number. This process of converting tokens to numbers is called numericalization. To accomplish this for our dataset, we create a function that tokenizes the “input” field:</p>
<div id="cell-18" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:39.811661Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:39.811196Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:39.817274Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:39.816323Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:39.811600Z&quot;}}" data-trusted="true">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tok_func(x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tokz(x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>])</span></code></pre></div>
</div>
<p>Since tokenization can be time-consuming, especially for large dataset. Leveraging parallel processing can save time. we’ll utilize batching to process multiple entries simultaneously</p>
<div id="cell-20" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:39.821290Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:39.820998Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:41.693450Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:41.692501Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:39.821258Z&quot;}}" data-trusted="true" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">tok_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tok_func, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b020769c3cd44445ad730ebf9fa46a61","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>Ensure that <code>batched=True</code> is passed to enable batch processing. This approach uses the <code>tokenizer</code> library optimized for performance wit Rust. Batch processing can significantly speed up the tokenization process</p>
<p>Now let’s examine a row from our tokenized dataset:</p>
<div id="cell-22" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:41.700204Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:41.699928Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:41.709420Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:41.708449Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:41.700172Z&quot;}}" data-trusted="true" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">tok_ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>], tok_ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_ids"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>('TEXT1: A47; TEXT2: abatement of pollution; ANC1: abatement',
 [1,
  54453,
  435,
  294,
  336,
  5753,
  346,
  54453,
  445,
  294,
  47284,
  265,
  6435,
  346,
  23702,
  435,
  294,
  47284,
  2])</code></pre>
</div>
</div>
<p>The output show that the dataset retains the original string in the “input” field and includes a new “input_ids” field with the numerical representation of each token. The numbers here are the numerical positions of tokens in the vocabulary. This step efficiently convert our text into number, readying it for model input.</p>
<p>Alright, we now need to prepare our labels. <code>Transformer</code> always assumes that your labels has column name <code>labels</code>, but it our data set there’s no <code>labels</code> but <code>score</code>, we need to rename it.</p>
<div id="cell-24" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:41.710835Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:41.710479Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:41.719753Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:41.718805Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:41.710784Z&quot;}}" data-trusted="true" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">tok_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_ds.rename_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"labels"</span>)</span></code></pre></div>
</div>
<p>Now let’s split our dataset into train and validation set</p>
<div id="cell-26" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:41.721333Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:41.721012Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:41.750278Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:41.749410Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:41.721296Z&quot;}}" data-trusted="true" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">dds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_ds.train_test_split(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb19-2">dds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>DatasetDict({
    train: Dataset({
        features: ['id', 'anchor', 'target', 'context', 'labels', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 29178
    })
    test: Dataset({
        features: ['id', 'anchor', 'target', 'context', 'labels', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 7295
    })
})</code></pre>
</div>
</div>
</section>
</section>
<section id="metric-and-loss" class="level2">
<h2 class="anchored" data-anchor-id="metric-and-loss">Metric and Loss</h2>
<p>When working with a validation set, one of the key steps is to measure some metrics. A metric, such as “accuracy” gives us a quantifiable measure of how good our model is.</p>
<p>For example, if you look at <a href="https://www.kaggle.com/competitions/us-patent-phrase-to-phrase-matching/overview/evaluation">the competition’s overview page</a>, you’ll see that they use the <a href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient">Pearson correlation coefficient</a> to evaluate submissions. Consequently, we will also use this metric to measure our model performance.</p>
<p>A common question arises here: is the metric the same as the loss function? The answer is nuanced. The metric used to evaluate model performance isn’t necessarily the one to be used for optimization during the training. Taking the derivative of accuracy to find the gradient for parameter updates, for example, isn’t very effective.</p>
<p>Why? You ask! Because accuracy doesn’t change significantly unless predictions switch from incorrect to correct, resulting in gradients being nearly zero everywhere. Instead, we prefer smooth functions like <em>MSE</em> or <em>MAE</em> for the loss function. These provide better gradients for optimization, helping improve the model more effectively.</p>
</section>
<section id="pearson-correlation-coefficient" class="level2">
<h2 class="anchored" data-anchor-id="pearson-correlation-coefficient">Pearson Correlation Coefficient</h2>
<p>Let’s focus on our metric of interest today, the <strong>Pearson Correlation Coefficient</strong> often abbreviated as <code>r</code>. This coefficient is a widely used measure that evaluates the similarity between two variable, if our predictions closely match the actual values, <code>r</code> will be high, ranging between -1 and 1. An <code>r</code> of -1 means predictions are exactly the wrong answers (which could still be useful, as reversing the answer would yield perfect results), while <code>r</code> of 1 signifies perfect predictions.</p>
<p>You can read <a href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient">this</a> for more info about the formula and example but i think the best way to understand how data behaves is to look at real-life data. Scikit-learn offers numerous datasets, one of which is the “California housing” dataset. Here’s how you can explore this dataset:</p>
<div id="cell-28" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:41.751720Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:41.751335Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:43.858980Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:43.857993Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:41.751667Z&quot;}}" data-trusted="true" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fetch_california_housing</span>
<span id="cb21-2">housing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fetch_california_housing(as_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-3">housing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> housing[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>].join(housing[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>]).sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>)</span>
<span id="cb21-4">housing.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">MedInc</th>
<th data-quarto-table-cell-role="th">HouseAge</th>
<th data-quarto-table-cell-role="th">AveRooms</th>
<th data-quarto-table-cell-role="th">AveBedrms</th>
<th data-quarto-table-cell-role="th">Population</th>
<th data-quarto-table-cell-role="th">AveOccup</th>
<th data-quarto-table-cell-role="th">Latitude</th>
<th data-quarto-table-cell-role="th">Longitude</th>
<th data-quarto-table-cell-role="th">MedHouseVal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">7506</td>
<td>3.0550</td>
<td>37.0</td>
<td>5.152778</td>
<td>1.048611</td>
<td>729.0</td>
<td>5.062500</td>
<td>33.92</td>
<td>-118.28</td>
<td>1.054</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4720</td>
<td>3.0862</td>
<td>35.0</td>
<td>4.697897</td>
<td>1.055449</td>
<td>1159.0</td>
<td>2.216061</td>
<td>34.05</td>
<td>-118.37</td>
<td>3.453</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12888</td>
<td>2.5556</td>
<td>24.0</td>
<td>4.864905</td>
<td>1.129222</td>
<td>1631.0</td>
<td>2.395007</td>
<td>38.66</td>
<td>-121.35</td>
<td>1.057</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13344</td>
<td>3.0057</td>
<td>32.0</td>
<td>4.212687</td>
<td>0.936567</td>
<td>1378.0</td>
<td>5.141791</td>
<td>34.05</td>
<td>-117.64</td>
<td>0.969</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7173</td>
<td>1.9083</td>
<td>42.0</td>
<td>3.888554</td>
<td>1.039157</td>
<td>1535.0</td>
<td>4.623494</td>
<td>34.05</td>
<td>-118.19</td>
<td>1.192</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>To compute the Pearson correlation coefficient, Numpy provides the <code>corrcoef()</code> function, which return a correlation matrix:</p>
<div id="cell-30" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:43.860736Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:43.860257Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:43.870686Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:43.869672Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:43.860695Z&quot;}}" data-trusted="true" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">np.set_printoptions(precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb22-2">np.corrcoef(housing, rowvar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>array([[ 1.  , -0.12,  0.43, -0.08,  0.01, -0.07, -0.12,  0.04,  0.68],
       [-0.12,  1.  , -0.17, -0.06, -0.31,  0.  ,  0.03, -0.13,  0.12],
       [ 0.43, -0.17,  1.  ,  0.76, -0.09, -0.07,  0.12, -0.03,  0.21],
       [-0.08, -0.06,  0.76,  1.  , -0.08, -0.07,  0.09,  0.  , -0.04],
       [ 0.01, -0.31, -0.09, -0.08,  1.  ,  0.16, -0.15,  0.13,  0.  ],
       [-0.07,  0.  , -0.07, -0.07,  0.16,  1.  , -0.16,  0.17, -0.27],
       [-0.12,  0.03,  0.12,  0.09, -0.15, -0.16,  1.  , -0.93, -0.16],
       [ 0.04, -0.13, -0.03,  0.  ,  0.13,  0.17, -0.93,  1.  , -0.03],
       [ 0.68,  0.12,  0.21, -0.04,  0.  , -0.27, -0.16, -0.03,  1.  ]])</code></pre>
</div>
</div>
<p>However, we need a single correlation number rather than a matrix. Fortunately, if we pass in a pair of variable, we could still get a matrix, from which we can extract the desired coefficient.</p>
<div id="cell-32" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:43.872481Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:43.872056Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:43.880205Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:43.879019Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:43.872427Z&quot;}}" data-trusted="true" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">np.corrcoef(housing.MedInc, housing.MedHouseVal)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array([[1.  , 0.68],
       [0.68, 1.  ]])</code></pre>
</div>
</div>
<p>To get a specific correlation coefficient, simply select the zeroth row and the first column:</p>
<div id="cell-34" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:43.882512Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:43.881745Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:43.890041Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:43.888916Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:43.882472Z&quot;}}" data-trusted="true" data-execution_count="17">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> corr(x, y):  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.corrcoef(x, y)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb26-2"></span>
<span id="cb26-3">corr(housing.MedInc, housing.MedHouseVal)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>0.6760250732906</code></pre>
</div>
</div>
<p>To visualize the correlation, we can plot the data and display the correlation coefficient <code>r</code>:</p>
<div id="cell-36" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:43.891498Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:43.891191Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:43.897796Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:43.896695Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:43.891458Z&quot;}}" data-trusted="true" data-execution_count="18">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> show_corr(df, a, b):</span>
<span id="cb28-4">    x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[a], df[b]</span>
<span id="cb28-5">    plt.scatter(x, y, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb28-6">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> vs </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; r: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr(x, y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<p>For instance, the plot of “median income” vs.&nbsp;“median house value” shows an r of 0.68.</p>
<div id="cell-38" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:43.899464Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:43.899133Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:44.220457Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:44.219533Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:43.899422Z&quot;}}" data-trusted="true" data-execution_count="19">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">show_corr(housing, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedInc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedHouseVal'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/nlp-beginner/index_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Exploring other pairs, like “median income” vs.&nbsp;“number of rooms per house,” gives an r of 0.43.</p>
<div id="cell-40" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:44.222199Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:44.221811Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:44.546412Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:44.545562Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:44.222156Z&quot;}}" data-trusted="true" data-execution_count="20">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">show_corr(housing, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedInc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AveRooms'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/nlp-beginner/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This plot reveals interesting insights and anomalies. Certain houses have many rooms but lower incomes, potentially indicate shared accommodations. Pearson’s <code>r</code> can be sensitive to outliers, and removing them can significantly change the correlation.</p>
<div id="cell-42" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:44.547839Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:44.547515Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:44.855975Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:44.854993Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:44.547807Z&quot;}}" data-trusted="true" data-execution_count="21">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> housing[housing.AveRooms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb31-2">show_corr(subset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedInc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AveRooms'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/nlp-beginner/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>By removing outliers, the correlation increase fromm 0.43 to 0.68, emphasizing the importance of carefully considering outliers</p>
<p>Here’s another example correlating “median hours value” with “average number of room”:</p>
<div id="cell-44" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:44.857479Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:44.857171Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:45.148894Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:45.147911Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:44.857440Z&quot;}}" data-trusted="true" data-execution_count="22">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">show_corr(subset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedHouseVal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AveRooms'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/nlp-beginner/index_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And another one correlating “house age” with “average number of rooms”:</p>
<div id="cell-46" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:45.151139Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:45.150354Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:45.446860Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:45.446019Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:45.151088Z&quot;}}" data-trusted="true" data-execution_count="23">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">show_corr(subset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedHouseVal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AveRooms'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/nlp-beginner/index_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>To keep track of our training progress, it’s important to report the Pearson correlation coefficient after each epoch. Hugging Face’s Trainer API expects a dictionary as output, with keys labeling each metrics. Here’s how you can define a function to calculate and return the Pearson correlation coefficient:</p>
<div id="cell-48" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:45.448445Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:45.448133Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:45.453322Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:45.452366Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:45.448403Z&quot;}}" data-trusted="true" data-execution_count="24">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> corr_d(eval_pred): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearson'</span>: corr(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>eval_pred)}</span></code></pre></div>
</div>
</section>
<section id="training-with-hugging-face-transformers" class="level2">
<h2 class="anchored" data-anchor-id="training-with-hugging-face-transformers">Training with Hugging Face Transformers</h2>
<p>In the world of Hugging Face, the concept of a “learner” in fast.ai is paralleled by the <code>trainer</code>. Let’s start by importing necessary components:</p>
<div id="cell-50" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:45.454909Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:45.454503Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:58.129589Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:58.128824Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:45.454863Z&quot;}}" data-trusted="true" data-execution_count="25">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TrainingArguments, Trainer</span></code></pre></div>
</div>
<p>When training a model, we don’t process the entire dataset at once; instead we use a “batch” or “mini-batch” of data for each training step. This approach leverages the parallel processing capabilities of GPUs.</p>
<p>In our case, let’s set the batch size to 128. Large batch size speed up training by maximizing GPU utilization but beware of potential “out of memory” errors if set too high.</p>
<p>Next, configure the training arguments:</p>
<div id="cell-52" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:58.134662Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:58.134064Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:24:58.245326Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:24:58.244507Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:58.134614Z&quot;}}" data-trusted="true" data-execution_count="26">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb36-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb36-3">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8e-5</span></span>
<span id="cb36-4"></span>
<span id="cb36-5">args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainingArguments(</span>
<span id="cb36-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outputs'</span>,</span>
<span id="cb36-7">    learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr,</span>
<span id="cb36-8">    warmup_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb36-9">    lr_scheduler_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cosine'</span>,</span>
<span id="cb36-10">    fp16<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable mixed precision training</span></span>
<span id="cb36-11">    eval_strategy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epoch"</span>,</span>
<span id="cb36-12">    per_device_train_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs,</span>
<span id="cb36-13">    per_device_eval_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb36-14">    num_train_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs,</span>
<span id="cb36-15">    weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb36-16">    report_to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>,</span>
<span id="cb36-17">)</span></code></pre></div>
</div>
<p>Most of these arguments can be left as defaults, but the key ones to focus on are the batch size (<code>bs</code>), number of epoches (<code>epoches</code>), and learning rate (<code>lr</code>).</p>
<p>To begin model training for sequence classification, we use <code>AutoModelForSequenceClassification</code>:</p>
<div id="cell-54" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:24:58.246751Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:24:58.246384Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:25:01.429509Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:25:01.428680Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:24:58.246700Z&quot;}}" data-trusted="true" data-execution_count="27">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(model_nm, num_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb37-2">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Trainer(</span>
<span id="cb37-3">    model, args, </span>
<span id="cb37-4">    train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>], eval_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>],</span>
<span id="cb37-5">    tokenizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokz, compute_metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>corr_d</span>
<span id="cb37-6">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7a6b7c81aedd412f847a410e75387083","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of DebertaV2ForSequenceClassification were not initialized from the model checkpoint at microsoft/deberta-v3-base and are newly initialized: ['classifier.bias', 'classifier.weight', 'pooler.dense.bias', 'pooler.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/opt/conda/lib/python3.10/site-packages/accelerate/accelerator.py:488: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.scaler = torch.cuda.amp.GradScaler(**kwargs)</code></pre>
</div>
</div>
<p>This function sets up our model, instantiates the trainer with the relevant datasets and tokenizer, and specifies the metric function.</p>
<p>Finally, we sart the trainign process:</p>
<div id="cell-56" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:25:01.431521Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:25:01.430842Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:34:32.580031Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:34:32.579155Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:25:01.431474Z&quot;}}" data-trusted="true" data-execution_count="28">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">trainer.train()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py:79: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.device(device), torch.cuda.stream(stream), autocast(enabled=autocast_enabled):
/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn('Was asked to gather along dimension 0, but all '</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
      
      <progress value="732" max="732" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [732/732 09:27, Epoch 4/4]
    </div>
    
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Epoch</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
<th data-quarto-table-cell-role="th">Validation Loss</th>
<th data-quarto-table-cell-role="th">Pearson</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>No log</td>
<td>0.027016</td>
<td>0.784697</td>
</tr>
<tr class="even">
<td>2</td>
<td>No log</td>
<td>0.022490</td>
<td>0.818065</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.027900</td>
<td>0.021511</td>
<td>0.834274</td>
</tr>
<tr class="even">
<td>4</td>
<td>0.027900</td>
<td>0.021852</td>
<td>0.836955</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py:79: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.device(device), torch.cuda.stream(stream), autocast(enabled=autocast_enabled):
/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn('Was asked to gather along dimension 0, but all '
/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py:79: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.device(device), torch.cuda.stream(stream), autocast(enabled=autocast_enabled):
/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn('Was asked to gather along dimension 0, but all '</code></pre>
</div>
</div>
<p>Upon starting the training, we achieve an inspiring correlation of 0.836. This impressive result was obtain in about ten minutes, demonstrating the power of leveraging pre-trained models.</p>
<p>Achieving the high correlation score underscore the value of using a pre-trained model. The deberta-v3 model we used already possesses an immense amount of linguistic knowledge, allowing it to assess the similarity between phrases effectively right out of the box. By fine-tuning it on our specific task, we capitalized on this foundation, leading to rapid and accurate results</p>
<p>As we continue training, monitoring the Pearson correlations coefficient helps ensure our model is moving in the right direction, improving its ability to match phrases accurately.</p>
</section>
<section id="evaluating-model-predictions" class="level2">
<h2 class="anchored" data-anchor-id="evaluating-model-predictions">Evaluating Model Predictions</h2>
<p>With our model trained and achieving a promising Pearson correlation coefficient, it’s time to evaluate its performance on the test set.</p>
<p>Just as we did with the training data we need to load and preprocess our test dataset.</p>
<div id="cell-58" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:34:32.581831Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:34:32.581404Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:34:32.673541Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:34:32.672609Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:34:32.581784Z&quot;}}" data-trusted="true" data-execution_count="29">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">eval_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test.csv"</span>)</span>
<span id="cb42-2">eval_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset.from_pandas(eval_df)</span>
<span id="cb42-3">eval_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eval_ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(preprocess_function).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tok_func, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2c1d5a2bc73540d2bcf4bcc7195704dc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8e3fb9cd89ef4ea3bcd6c3dc3c9c8647","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>Next we use trainer to make predictions on the test dataset, and at this point it crucial to inspect the predictions.</p>
<div id="cell-60" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.predict(eval_ds).predictions.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb43-2">preds</span></code></pre></div>
</div>
<div id="cell-61" class="cell output" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:34:32.674982Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:34:32.674713Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:34:32.816702Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:34:32.815744Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:34:32.674952Z&quot;}}" data-trusted="true" data-execution_count="30">
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py:79: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.device(device), torch.cuda.stream(stream), autocast(enabled=autocast_enabled):</code></pre>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>array([[ 0.7 ],
       [ 0.73],
       [ 0.58],
       [ 0.37],
       [-0.02],
       [ 0.53],
       [ 0.48],
       [-0.01],
       [ 0.25],
       [ 1.06],
       [ 0.26],
       [ 0.24],
       [ 0.8 ],
       [ 0.8 ],
       [ 0.81],
       [ 0.41],
       [ 0.27],
       [-0.  ],
       [ 0.66],
       [ 0.41],
       [ 0.55],
       [ 0.23],
       [ 0.09],
       [ 0.23],
       [ 0.53],
       [ 0.  ],
       [ 0.01],
       [-0.01],
       [ 0.  ],
       [ 0.69],
       [ 0.34],
       [-0.  ],
       [ 0.7 ],
       [ 0.58],
       [ 0.38],
       [ 0.21]])</code></pre>
</div>
</div>
<p>Observing the prediction might reveal that some value fall outside the [0, 1] range. This highlights the important of examining your data at every stage. To fix these out-of-bound predictions, we employ clamping:</p>
<div id="cell-63" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.clip(preds, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb46-2">preds</span></code></pre></div>
</div>
<div id="cell-64" class="cell output" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-09-13T14:34:32.818248Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T14:34:32.817917Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T14:34:32.824993Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T14:34:32.824100Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T14:34:32.818216Z&quot;}}" data-trusted="true" data-execution_count="31">
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>array([[0.7 ],
       [0.73],
       [0.58],
       [0.37],
       [0.  ],
       [0.53],
       [0.48],
       [0.  ],
       [0.25],
       [1.  ],
       [0.26],
       [0.24],
       [0.8 ],
       [0.8 ],
       [0.81],
       [0.41],
       [0.27],
       [0.  ],
       [0.66],
       [0.41],
       [0.55],
       [0.23],
       [0.09],
       [0.23],
       [0.53],
       [0.  ],
       [0.01],
       [0.  ],
       [0.  ],
       [0.69],
       [0.34],
       [0.  ],
       [0.7 ],
       [0.58],
       [0.38],
       [0.21]])</code></pre>
</div>
</div>
<p>So, that’s a wrap! We’ve navigated through the essentials of training and evaluating a machine learning model using Hugging Face Transformer. From understanding metrics and loss functions to fine-tune a pre-trained model and keeping a close eye on our Pearson Correlation Coefficient we’ve covered a lot of ground.</p>
<p>The key take a way? Always keep an eye on your data and metrics. Those little tweaks can make a big difference. Leveraging pre-trained models can save you tons of time and give you a major head start.</p>
<p>Keep experimenting and stay curious, and don’t forget to have fun with your models. Machine learning is all about trying a new things and learn from each step.</p>
<p>And hey, thanks nerds!</p>


</section>

 ]]></description>
  <category>kaggle</category>
  <category>huggingface spaces</category>
  <category>nlp</category>
  <guid>https://bhdai.github.io/blog/posts/nlp-beginner/</guid>
  <pubDate>Thu, 12 Sep 2024 17:00:00 GMT</pubDate>
  <media:content url="https://bhdai.github.io/blog/posts/nlp-beginner/nlp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Looking Inside Neural Networks, How It Really Work?</title>
  <dc:creator>Bui Huu Dai</dc:creator>
  <link>https://bhdai.github.io/blog/posts/2024-07-28-from-neuron-to-gradient/</link>
  <description><![CDATA[ 






<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Hey there. It’s been a couple of week since my last post - blame exams and obsessive quest to tweak every configuration setting for my workflow (which is turned into a week-long habit hole - i regret nothing). But today, I’m excited to dive back into the world of AI and share my latest escapades from <a href="https://youtu.be/hBBOjCiFcuo?si=dfuUYTPelGOYCogb">Lesson 3</a> of the FastAI course taught by the indomitable Jeremy Horawd. Spoiler alert: it’s packed with enough neural wonders to make your brain do a happy dance.</p>
<p>In the coming post, I’ll guide you through:</p>
<ul>
<li>Picking of right AI model that’s just right for you</li>
<li>Dissecting the anatomy of these models (paramedics not required)</li>
<li>The inner workings of neuron networks</li>
<li>The <a href="https://www.kaggle.com/competitions/titanic">Titanic competition</a></li>
</ul>
<p>So, hold onto your neural nets and let’s jump right into it, shall we?</p>
</section>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"></h2>
</section>
<section id="choosing-the-right-model" class="level2">
<h2 class="anchored" data-anchor-id="choosing-the-right-model">Choosing the Right Model</h2>
<p>We’ll explore how to choose an image model that’s efficient, reliable, and cost-effective—much like selecting the perfect gadget. I’ll walk you through a practical example comparing two popular image models by training a pet detector model.</p>
<p>Let’s start by setting up our environment.</p>
<div id="cell-4" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-07-27T12:50:55.115169Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-07-27T12:50:55.114829Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-07-27T12:51:04.408985Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-07-27T12:51:04.408185Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-07-27T12:50:55.115141Z&quot;}}" data-trusted="true" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timm</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-07-27T12:51:04.410784Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-07-27T12:51:04.410469Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-07-27T12:52:28.319857Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-07-27T12:52:28.318947Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-07-27T12:51:04.410759Z&quot;}}" data-trusted="true" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> untar_data(URLs.PETS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"></span>
<span id="cb2-4">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_name_func(</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>,</span>
<span id="cb2-6">    get_image_files(path),</span>
<span id="cb2-7">    valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb2-8">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,</span>
<span id="cb2-9">    label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RegexLabeller(pat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[^/]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>),</span>
<span id="cb2-10">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>)</span>
<span id="cb2-11">)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="811712512" class="" max="811706944" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [811712512/811706944 01:13&lt;00:00]
    </div>
    
</div>
</div>
<p>Let’s break down what’s happening here. We’re using <a href="https://academictorrents.com/details/b18bbd9ba03d50b0f7f479acc9f4228a408cecc1">The Oxford-IIIT Pet dataset</a>, fetched with a nifty little URL constant provide by FastAI. If you’re staring at the pattern <code>pat=r'^([^/]+)\_\d+'</code> like it’s some alien script, fear not! It’s just a regular expression used to extract label from filenames using fastai <code>RegexLabeller</code></p>
<p>Here’s the cheat sheet for the pattern:</p>
<ul>
<li><code>^</code> asserts the start of a string.</li>
<li><code>([^/]+)</code> matches one or more characters that are not forward slash and captures them as a group.</li>
<li><code>_</code> matches an underscore.</li>
<li><code>\d+</code> matches one ore more digits.</li>
</ul>
<p>Now, let’s visualize our data:</p>
<div id="cell-7" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-07-28-from-neuron-to-gradient/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And, it’s training time! We start with a ResNet34 architecture:</p>
<div id="cell-9" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb4-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://download.pytorch.org/models/resnet34-b627a593.pth" to /root/.cache/torch/hub/checkpoints/resnet34-b627a593.pth

100%|██████████| 83.3M/83.3M [00:00&lt;00:00, 147MB/s] </code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.491942</td>
<td>0.334319</td>
<td>0.105548</td>
<td>00:26</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.454661</td>
<td>0.367568</td>
<td>0.112991</td>
<td>00:32</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.272869</td>
<td>0.274704</td>
<td>0.081867</td>
<td>00:33</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.144361</td>
<td>0.246424</td>
<td>0.073072</td>
<td>00:33</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>After about two minutes, we reached a 7% error rate—not too shabby! However, there’s one catch: while ResNet34 is dependable like a classic family car, it isn’t the fastest option out there. To really amp things up, we need to find a more advanced, high-performance model.</p>
<section id="exploring-the-model-landscape" class="level3">
<h3 class="anchored" data-anchor-id="exploring-the-model-landscape">Exploring the Model Landscape</h3>
<p>The PyTorch image model library offers a wide range of architectures—not quite a zillion, but enough to give you plenty of options. Many of these models are built on mathematical functions like ReLUs (Rectified Linear Units), which we’ll discuss in more detail later. Ultimately, choosing the right model comes down to three key factors:</p>
<ol type="1">
<li>Speed<br>
</li>
<li>Memory Usage<br>
</li>
<li>Accuracy</li>
</ol>
</section>
<section id="the-which-image-model-is-best-notebook" class="level3">
<h3 class="anchored" data-anchor-id="the-which-image-model-is-best-notebook">The “Which Image Model is Best?” Notebook</h3>
<p>I highly recommend taking a look at Jeremy Howard’s excellent notebook, <a href="https://www.kaggle.com/code/jhoward/which-image-models-are-best/">“Which image models are best?”</a>. It’s a valuable resource for finding the best architecture for your needs. If you find it helpful, do check it out and consider giving it an upvote—Jeremy’s insights are solid.</p>
<p>I’ve also included a copy of the plot below for quick reference. Enjoy exploring the model landscape!</p>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb6" data-startfrom="1" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb6-1">Plotly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://cdn.plot.ly/plotly-latest.min.js'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-2">df_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FileAttachment</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"results-imagenet.csv"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>()</span>
<span id="cb6-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FileAttachment</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"benchmark-infer-amp-nhwc-pt111-cu113-rtx3090.csv"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>()</span>
<span id="cb6-4"></span>
<span id="cb6-5">df_merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb6-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> df_results_processed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> ({ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">model_org</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] }))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> dfColumns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Object</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">keys</span>(df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> dfResultsColumns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Object</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">keys</span>(df_results_processed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-10"></span>
<span id="cb6-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flatMap</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> matches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_results_processed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> matches<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(match <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb6-14">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> mergedRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-15">      dfColumns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb6-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (dfResultsColumns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">includes</span>(col) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>) { mergedRow[<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">_x`</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d[col]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> { mergedRow[col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d[col]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb6-17">      })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-18">      dfResultsColumns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb6-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (dfColumns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">includes</span>(col) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>) { mergedRow[<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">_y`</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> match[col]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> { mergedRow[col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> match[col]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb6-20">      })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> mergedRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-22">    })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-23">  })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-24">}</span>
<span id="cb6-25"></span>
<span id="cb6-26">df_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_merged</span>
<span id="cb6-27">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> ({<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">secs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Number</span>(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">infer_samples_per_sec</span>)}))</span>
<span id="cb6-28">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb6-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> familyMatch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^([a-z]+?(?</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:v2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)?)(?</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\d|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> family <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> familyMatch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> familyMatch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">includes</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in22'</span>)) family <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_in22'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resnet.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">d/</span>)) family <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">family</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> family}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-34">  })</span>
<span id="cb6-35">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">endsWith</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gn'</span>))</span>
<span id="cb6-36">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">re</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[sg]</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">netd</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">beit</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">convnext</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">levit</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">efficient</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">vit</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">vgg</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">swin/</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-37">{</span>
<span id="cb6-38">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> uniqueFamilies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Set</span>(df_final<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family</span>))]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-39">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> colorScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniqueFamilies<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>((family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> index) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> { <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`hsl(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> uniqueFamilies<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">, 70%, 50%)`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-40">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> traces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniqueFamilies<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>((family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> index) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb6-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> familyData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_final<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> family)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb6-43">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-44">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> familyData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">secs</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-45">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> familyData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Number</span>(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top1</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-46">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-47">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-48">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> familyData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pow</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Number</span>(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">infer_img_size</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5700</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> colorScale[index]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-49">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> familyData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;br&gt; family=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;br&gt; secs=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">secs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;br&gt; top1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Number</span>(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;br&gt; size=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">param_count_x</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;br&gt; infer_img_size=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">infer_img_size</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-50">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hoverinfo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-51">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hoverlabel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bgcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> colorScale[index] }</span>
<span id="cb6-52">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-53">  })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-54">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb6-55">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inference'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-56">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">795</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-57">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-58">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">autosize</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-59">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'secs'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">autorange</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">gridcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rgb(233,233,233)'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-60">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">yaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">gridcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rgb(233,233,233)'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-61">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">plot_bgcolor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rgb(240,240,255)'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-62">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">showlegend</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-63">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">legend</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family'</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">itemclick</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'toggle'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">itemdoubleclick</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'toggleothers'</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-64">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">hovermode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'closest'</span></span>
<span id="cb6-65">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-66">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">responsive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-67">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-68">  Plotly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newPlot</span>(plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> traces<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> config)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-69">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-70">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-4" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-5" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-6" data-nodetype="expression">

</div>
</div>
</div>
</div>
<p>Here’s a breakdown of the plot from the notebook:</p>
<ul>
<li>The X-axis represents seconds per sample (the lower, the better performance).</li>
<li>The Y-axis reflects the accuracy (higher is preferable).</li>
</ul>
<p>In an ideal scenario, you would choose models that are located in the upper left corner of the plot. Although ResNet34 is a reliable choice—like a pair of trusty jeans—it’s no longer considered state-of-the-art. It’s time to explore the ConvNeXT models!</p>
<p>Before you get started, ensure that you have the timm package installed. You can install it using pip or conda:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install timm</span></code></pre></div>
<p>or</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install timm</span></code></pre></div>
<p>After that, let’s search for all available ConvNeXT models.</p>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">timm.list_models(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"convnext*"</span>)</span></code></pre></div>
</div>
<div id="cell-14" class="cell output" data-execution_count="7">
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>['convnext_atto',
 'convnext_atto_ols',
 'convnext_base',
 'convnext_femto',
 'convnext_femto_ols',
 'convnext_large',
 'convnext_large_mlp',
 'convnext_nano',
 'convnext_nano_ols',
 'convnext_pico',
 'convnext_pico_ols',
 'convnext_small',
 'convnext_tiny',
 'convnext_tiny_hnf',
 'convnext_xlarge',
 'convnext_xxlarge',
 'convnextv2_atto',
 'convnextv2_base',
 'convnextv2_femto',
 'convnextv2_huge',
 'convnextv2_large',
 'convnextv2_nano',
 'convnextv2_pico',
 'convnextv2_small',
 'convnextv2_tiny']</code></pre>
</div>
</div>
<p>Found one? Awesome! Now, let’s put it to the test. We’ll specify the architecture as a string when we call <code>vision_learner</code>, Why previous time when we use ResNet34 we don’t need to pass it as string? you say! That’s because ResNet34 was built in fastai library so you just need to call it but with ConvNext you have to pass the arch as a string for it to work, alright let’s see what it look like:</p>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">arch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'convnext_tiny.fb_in22k'</span></span>
<span id="cb11-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, arch, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate).to_fp16()</span>
<span id="cb11-3">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4f6fe7d85b6d4f86bd7cbc3a6de8e93c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.123377</td>
<td>0.240116</td>
<td>0.081191</td>
<td>00:27</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.260218</td>
<td>0.225793</td>
<td>0.071719</td>
<td>00:34</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.199426</td>
<td>0.169573</td>
<td>0.059540</td>
<td>00:33</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.132157</td>
<td>0.166686</td>
<td>0.056834</td>
<td>00:33</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="results-are-in" class="level3">
<h3 class="anchored" data-anchor-id="results-are-in">Results Are In!</h3>
<p>The training time increased slightly—by about 3 to 4 seconds—but here’s the exciting part: the error rate dropped from 7.3% to 5.6%!</p>
<p>Now, those model names might seem a bit cryptic at first glance. Here’s a quick guide to help you decode them:</p>
<ul>
<li>Names like Tiny, Small, Large, etc.: These indicate the model’s size and resource requirements.</li>
<li>fb_in22k: This means the model was trained on the ImageNet dataset with 22,000 image categories by <a href="https://ai.meta.com/research/">Facebook AI Research (FAIR)</a>.</li>
</ul>
<p>In general, ConvNeXT models tend to outperform others in accuracy for standard photographs of natural objects. In summary, we’ve seen how choosing the right architecture can make a significant difference by balancing speed, memory usage, and accuracy. Stay tuned as we dive even deeper into the intricacies of neural networks next!</p>
</section>
</section>
<section id="whats-in-the-model" class="level2">
<h2 class="anchored" data-anchor-id="whats-in-the-model">What’s in the Model?</h2>
<p>Alright, you see? Our model did better, right? Now, you’ve probably wondering, how do we turn this awesome piece of neural magic into an actual application? They key is to save the trained model so that users won’t have to wait for the training time.</p>
<p>To do that, we export our learner with the following command, creating a magical file called <code>model.pkl</code>:</p>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">learn.export(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model.pkl'</span>)</span></code></pre></div>
</div>
<p>For those of you who’ve followed my previous blog posts, you’ll recall that when I deploy an application on HuggingFace Spaces, I simply load the <code>model.pkl</code> file. This way, the learner functions almost identically to the trained <code>learn</code> object—and the best part is, you no longer have to wait forever!</p>
<p>Now, you might be wondering, “What exactly did we do here? What’s inside this <code>model.pkl</code> file?”</p>
<section id="dissecting-the-model.pkl-file" class="level3">
<h3 class="anchored" data-anchor-id="dissecting-the-model.pkl-file">Dissecting the <code>model.pkl</code> File</h3>
<p>Let’s take a closer look. The <code>model.pkl</code> file is essentially a saved learner, and it contains two main components:</p>
<ol type="1">
<li><strong>Pre-processing Steps</strong>: These include all the procedures needed to transform your raw images into a format that the model can understand. In other words, it stores the information from your <code>DataLoaders</code> (<code>dls</code>), DataBlock, or any other pre-processing pipeline you’ve set up.</li>
<li><strong>The Trained Model</strong>: This is the core component—a trained model that’s ready to make predictions.</li>
</ol>
<p>To inspect its contents, we can load the model back up and examine it.</p>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.model</span>
<span id="cb13-2">m</span></code></pre></div>
</div>
<div id="cell-22" class="cell output" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-07-27T13:00:24.084613Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-07-27T13:00:24.084212Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-07-27T13:00:24.096155Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-07-27T13:00:24.095135Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-07-27T13:00:24.084580Z&quot;}}" data-trusted="true" data-execution_count="4">
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>Sequential(
  (0): TimmBody(
    (model): ConvNeXt(
      (stem): Sequential(
        (0): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
        (1): LayerNorm2d((96,), eps=1e-06, elementwise_affine=True)
      )
      (stages): Sequential(
        (0): ConvNeXtStage(
          (downsample): Identity()
          (blocks): Sequential(
            (0): ConvNeXtBlock(
              (conv_dw): Conv2d(96, 96, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=96)
              (norm): LayerNorm((96,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=96, out_features=384, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=384, out_features=96, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (1): ConvNeXtBlock(
              (conv_dw): Conv2d(96, 96, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=96)
              (norm): LayerNorm((96,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=96, out_features=384, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=384, out_features=96, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (2): ConvNeXtBlock(
              (conv_dw): Conv2d(96, 96, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=96)
              (norm): LayerNorm((96,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=96, out_features=384, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=384, out_features=96, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
          )
        )
        (1): ConvNeXtStage(
          (downsample): Sequential(
            (0): LayerNorm2d((96,), eps=1e-06, elementwise_affine=True)
            (1): Conv2d(96, 192, kernel_size=(2, 2), stride=(2, 2))
          )
          (blocks): Sequential(
            (0): ConvNeXtBlock(
              (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
              (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=192, out_features=768, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=768, out_features=192, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (1): ConvNeXtBlock(
              (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
              (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=192, out_features=768, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=768, out_features=192, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (2): ConvNeXtBlock(
              (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
              (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=192, out_features=768, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=768, out_features=192, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
          )
        )
        (2): ConvNeXtStage(
          (downsample): Sequential(
            (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
            (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
          )
          (blocks): Sequential(
            (0): ConvNeXtBlock(
              (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
              (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=384, out_features=1536, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=1536, out_features=384, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (1): ConvNeXtBlock(
              (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
              (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=384, out_features=1536, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=1536, out_features=384, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (2): ConvNeXtBlock(
              (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
              (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=384, out_features=1536, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=1536, out_features=384, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (3): ConvNeXtBlock(
              (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
              (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=384, out_features=1536, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=1536, out_features=384, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (4): ConvNeXtBlock(
              (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
              (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=384, out_features=1536, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=1536, out_features=384, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (5): ConvNeXtBlock(
              (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
              (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=384, out_features=1536, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=1536, out_features=384, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (6): ConvNeXtBlock(
              (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
              (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=384, out_features=1536, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=1536, out_features=384, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (7): ConvNeXtBlock(
              (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
              (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=384, out_features=1536, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=1536, out_features=384, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (8): ConvNeXtBlock(
              (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
              (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=384, out_features=1536, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=1536, out_features=384, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
          )
        )
        (3): ConvNeXtStage(
          (downsample): Sequential(
            (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
            (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
          )
          (blocks): Sequential(
            (0): ConvNeXtBlock(
              (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
              (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=768, out_features=3072, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=3072, out_features=768, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (1): ConvNeXtBlock(
              (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
              (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=768, out_features=3072, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=3072, out_features=768, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
            (2): ConvNeXtBlock(
              (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
              (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=768, out_features=3072, bias=True)
                (act): GELU()
                (drop1): Dropout(p=0.0, inplace=False)
                (norm): Identity()
                (fc2): Linear(in_features=3072, out_features=768, bias=True)
                (drop2): Dropout(p=0.0, inplace=False)
              )
              (shortcut): Identity()
              (drop_path): Identity()
            )
          )
        )
      )
      (norm_pre): Identity()
      (head): NormMlpClassifierHead(
        (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
        (norm): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
        (flatten): Flatten(start_dim=1, end_dim=-1)
        (pre_logits): Identity()
        (drop): Dropout(p=0.0, inplace=False)
        (fc): Identity()
      )
    )
  )
  (1): Sequential(
    (0): AdaptiveConcatPool2d(
      (ap): AdaptiveAvgPool2d(output_size=1)
      (mp): AdaptiveMaxPool2d(output_size=1)
    )
    (1): fastai.layers.Flatten(full=False)
    (2): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): Dropout(p=0.25, inplace=False)
    (4): Linear(in_features=1536, out_features=512, bias=False)
    (5): ReLU(inplace=True)
    (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (7): Dropout(p=0.5, inplace=False)
    (8): Linear(in_features=512, out_features=37, bias=False)
  )
)</code></pre>
</div>
</div>
</section>
<section id="whats-all-this-stuff" class="level3">
<h3 class="anchored" data-anchor-id="whats-all-this-stuff">What’s All This Stuff?</h3>
<p>Alright, there’s a lot to digest here. Basically, the model is structured in layers upon layers. Here’s the breakdown:</p>
<p><strong>TimmBody</strong>: this contains most of the model architecture. Inside the TimmBody. You’ll find:</p>
<ul>
<li><strong>Model</strong>: The main model components.</li>
<li><strong>Stem</strong>: The initial layers that process the raw input.</li>
<li><strong>Stages</strong>: There are further broken down into multiple blocks, each packed with convolutional layers. normalization layers, and more.</li>
</ul>
</section>
<section id="lets-peek-inside-a-layer" class="level3">
<h3 class="anchored" data-anchor-id="lets-peek-inside-a-layer">Let’s Peek Inside a Layer</h3>
<p>To dig deeper into what these layers contain, you can use a really convenient Pytorch method called <code>get_submodule</code>:</p>
<div id="cell-24" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-07-27T13:00:32.501020Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-07-27T13:00:32.500642Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-07-27T13:00:32.507609Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-07-27T13:00:32.506670Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-07-27T13:00:32.500991Z&quot;}}" data-trusted="true" data-execution_count="5">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.get_submodule(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0.model.stem.1'</span>)</span>
<span id="cb15-2">l</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>LayerNorm2d((96,), eps=1e-06, elementwise_affine=True)</code></pre>
</div>
</div>
<p>As you can see it return a <code>LayerNorm2d</code> layer. Wondering what this <code>LayerNorm2d</code> thing is all about? It comprises a mathematical function for normalization and bunch of parameters:</p>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(l.parameters()))</span></code></pre></div>
</div>
<div id="cell-27" class="cell output" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-07-27T13:00:37.022159Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-07-27T13:00:37.021690Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-07-27T13:00:37.161180Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-07-27T13:00:37.160223Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-07-27T13:00:37.022106Z&quot;}}" data-trusted="true" data-execution_count="6">
<div class="cell-output cell-output-stdout">
<pre><code>[Parameter containing:
tensor([ 1.2546e+00,  1.9191e+00,  1.2191e+00,  1.0385e+00, -3.7148e-04,
         7.6571e-01,  8.8668e-01,  1.6324e+00,  7.0477e-01,  3.2892e+00,
         7.8641e-01, -1.7453e-03,  1.0006e+00, -2.0514e-03,  3.2976e+00,
        -1.2112e-03,  1.9842e+00,  1.0206e+00,  4.4522e+00,  2.5476e-01,
         2.7248e+00,  9.2616e-01,  1.2374e+00,  4.3668e-03,  1.7875e+00,
         5.4292e-01,  4.6268e+00,  1.1599e-02, -5.4437e-04,  3.4510e+00,
         1.3520e+00,  4.1267e+00,  2.6876e+00,  4.1197e+00,  3.4007e+00,
         8.5053e-01,  7.3569e-01,  3.9801e+00,  1.2851e+00,  6.3985e-01,
         2.6897e+00,  1.1181e+00,  1.1699e+00,  5.5318e-01,  2.3341e+00,
        -3.0504e-04,  9.7000e-01,  2.3409e-03,  1.1984e+00,  1.7897e+00,
         4.0138e-01,  4.5116e-01,  9.7186e-01,  3.9881e+00,  6.5935e-01,
         6.8778e-01,  9.8614e-01,  2.7053e+00,  1.2169e+00,  7.6268e-01,
         3.3019e+00,  1.6200e+00,  9.5547e-01,  2.1216e+00,  6.2951e-01,
         4.0349e+00,  8.9246e-01, -2.9147e-03,  4.0874e+00,  1.0639e+00,
         1.3963e+00,  1.6683e+00,  4.6571e-04,  7.6833e-01,  8.8542e-01,
         6.4305e-01,  1.3443e+00,  7.1566e-01,  5.4763e-01,  2.0902e+00,
         1.1952e+00,  3.0668e-01,  2.9682e-01,  1.4709e+00,  4.0830e+00,
        -7.8233e-04,  1.1455e+00,  3.8835e+00,  3.5997e+00,  4.8206e-01,
         2.1703e-01, -1.6550e-04,  6.4791e-01,  3.0069e+00,  3.0463e+00,
         4.6374e-03], device='cuda:0', requires_grad=True), Parameter containing:
tensor([-9.8183e-02, -4.0191e-02,  4.1647e+00, -8.9313e-03,  3.7929e-03,
        -2.7139e-02, -3.1174e-02, -7.9865e-02, -1.4053e-01, -6.3492e-02,
         3.2160e-01, -3.3837e-01, -5.6851e-02, -4.0384e-03, -4.7630e-02,
        -2.6376e-02, -4.0858e-02, -4.0886e-02,  8.7548e-03, -2.4149e-02,
         8.5088e-03, -1.6333e-01, -4.0154e+00,  5.2989e-01, -5.3410e-01,
         2.8046e+00,  3.5663e-02, -1.0321e-02, -1.1255e-03, -1.1721e-01,
        -1.3768e-01,  1.8840e-02, -9.5614e-02, -1.3149e-01, -1.9291e-01,
        -6.8939e-02, -3.6672e-02, -1.2902e-01,  1.5387e-01,  3.6398e-03,
        -6.6185e-02,  5.8841e-02, -9.1987e-02, -1.1453e+00, -5.4502e-02,
        -5.3649e-03, -1.8238e-01,  2.3167e-02,  3.8862e-02, -5.9394e-02,
        -4.1380e-02, -5.6917e-02, -4.3903e-02, -1.2954e-02, -1.1092e-01,
         7.0337e-03, -3.9300e-02, -1.5816e-01, -9.8132e-02, -1.8553e-01,
        -1.1112e-01, -1.8186e-01, -3.4278e-02, -2.6474e-02,  1.4192e+00,
        -3.1935e-02, -4.3245e-02, -2.7030e-01, -4.6695e-02, -6.4756e-04,
         2.6561e-01,  1.8779e-01,  6.9716e-01, -3.0647e-01,  8.1973e-02,
        -1.0845e+00,  1.4999e-02, -4.4244e-02, -8.0861e-02, -6.8972e-02,
        -1.3070e-01, -1.7093e-02, -1.9623e-02, -3.9345e-02, -6.9878e-02,
         1.2335e-02, -5.9947e-02, -3.5691e-02, -7.9831e-02, -7.4387e-02,
        -9.5232e-03, -3.7763e-01, -1.1987e-02, -2.5113e-02, -6.2690e-02,
        -3.0666e-04], device='cuda:0', requires_grad=True)]</code></pre>
</div>
</div>
<p>Another example: Let’s inspect a layer deeper inside:</p>
<div id="cell-29" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.get_submodule(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0.model.stages.0.blocks.1.mlp.fc1'</span>)</span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(l)</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(l.parameters()))</span></code></pre></div>
</div>
<div id="cell-30" class="cell output" data-quarto-private-1="{&quot;key&quot;:&quot;execution&quot;,&quot;value&quot;:{&quot;iopub.execute_input&quot;:&quot;2024-07-27T13:00:40.913666Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-07-27T13:00:40.912949Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-07-27T13:00:40.929991Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-07-27T13:00:40.929119Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-07-27T13:00:40.913632Z&quot;}}" data-trusted="true" data-execution_count="7">
<div class="cell-output cell-output-stdout">
<pre><code>Linear(in_features=96, out_features=384, bias=True)
[Parameter containing:
tensor([[ 0.0227, -0.0014,  0.0404,  ...,  0.0016, -0.0453,  0.0083],
        [-0.1439,  0.0169,  0.0261,  ...,  0.0126, -0.1044,  0.0565],
        [-0.0655, -0.0327,  0.0056,  ..., -0.0414,  0.0659, -0.0401],
        ...,
        [-0.0089,  0.0699,  0.0003,  ...,  0.0040,  0.0415, -0.0191],
        [ 0.0019,  0.0321,  0.0297,  ..., -0.0299, -0.0304,  0.0555],
        [ 0.1211, -0.0355, -0.0045,  ..., -0.0062,  0.0240, -0.0114]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.4049, -0.7419, -0.4234, -0.1651, -0.3027, -0.1899, -0.5534, -0.6270,
        -0.3008, -0.4253, -0.5996, -0.4107, -0.2173, -1.7935, -0.3170, -0.1163,
        -0.4483, -0.2847, -0.4343, -0.4945, -0.4064, -1.1403, -0.6754, -1.7236,
        -0.2954, -0.2655, -0.2188, -0.3913, -0.4148, -0.4771,  0.2366, -0.7542,
        -0.5851, -0.1821, -1.5273, -0.3625, -2.4688, -2.3461, -0.6110, -0.4114,
        -0.6963, -0.5764, -0.5878, -0.0318, -2.0354, -0.2859, -0.3954, -0.8404,
        -2.2399, -1.0874, -0.2296, -0.9002, -0.7585, -0.8834, -0.3753, -0.4548,
        -0.3836, -0.4048, -2.0231, -1.0264, -0.4106, -1.1566, -0.2225, -0.4251,
        -0.2496, -0.4224, -0.0975, -1.4017, -0.6887, -0.4370, -0.2931, -0.4643,
        -0.4959, -1.2535, -1.0720, -1.2966, -0.6276, -1.4162, -2.3081, -2.4540,
        -0.4258, -0.9987, -0.4638, -0.3147, -0.2417, -0.8744, -0.2828, -1.4208,
        -0.3257, -0.3202, -0.0603, -0.1894, -0.2496, -0.6130, -0.2975, -2.1466,
        -0.4129, -0.3677, -1.9813, -0.3814, -0.3785, -0.2294, -0.3698, -0.3256,
        -0.5585, -2.4192, -0.4589, -1.7748, -0.3995, -0.4092, -0.3517, -0.5331,
        -1.6535, -1.8190,  0.6264, -0.4059,  0.5873, -2.2074, -0.2438, -2.4539,
        -0.2283, -0.6865,  0.6988,  0.6476, -0.6445, -0.3452, -0.3276, -0.5700,
        -0.5173, -0.2775, -0.4089, -0.3020, -0.4872, -0.4952, -0.4072, -0.4356,
        -0.5102, -0.4128, -2.0918, -0.2826, -0.5830, -1.5835,  0.6139, -0.8504,
        -0.4669, -2.1358, -0.3418, -0.3767, -0.3345, -0.3960, -0.3886, -0.5667,
        -0.2225, -1.3059, -0.4600, -0.3927, -0.4667, -0.4214, -0.4755, -0.2866,
        -1.5805, -0.1787, -0.4367, -0.3172,  1.5731, -0.4046, -0.4838, -0.2576,
        -0.5612, -0.4264, -0.2578, -0.3175, -0.4620, -1.9552, -1.9145, -0.3960,
         0.3988, -2.3519, -0.9688, -0.2831, -1.9001, -0.4180,  0.0159, -1.1109,
        -0.4921, -0.3177, -1.8909, -0.3101, -0.8136, -2.3345, -0.3845, -0.3847,
        -0.1974, -0.4445, -1.6233, -2.5485, -0.3176, -1.2715, -1.1479,  0.6149,
        -0.3748, -0.3949, -2.0747, -0.4657, -0.3780, -0.4957, -0.3282, -1.9219,
        -2.0019, -0.5307, -0.2554, -1.1160, -0.3517, -2.2185, -1.1393,  0.5364,
        -0.3217, -2.0389, -0.4655,  0.1850, -0.5830, -0.3128,  0.6180, -0.2125,
        -2.3538, -0.9699, -0.9785, -0.3667, -0.4502, -1.9564, -0.2662, -1.1755,
        -0.4198, -0.9024, -0.3605, -0.5172, -1.1879, -0.4190, -0.4770, -1.5560,
        -0.4011, -0.6518, -0.4818, -0.2423,  0.6909, -0.5081, -0.4304, -0.6068,
        -0.4000, -0.3329, -0.3596, -1.6108, -0.2371, -0.2467, -0.4545,  0.1807,
        -0.3227, -0.3918, -0.3515, -0.3755, -1.2178, -0.3999, -0.3578, -0.2882,
        -1.7483, -0.2363, -0.1599, -0.2640, -0.9769, -1.3065, -0.4148, -0.2663,
        -0.3933, -0.4627, -0.2174,  0.2140, -0.5733, -0.2766, -0.3659, -0.5172,
        -0.3484, -0.3362, -0.6445,  0.6866, -0.3738, -0.2902, -2.0863, -0.4882,
        -0.2597, -1.0496, -1.6616, -0.3398, -0.5111, -0.5659, -0.3027, -0.5048,
        -0.2877, -0.2841, -0.1982, -0.6910, -0.2873, -2.1121, -0.8927, -0.2301,
        -1.5013, -0.4734, -2.2292, -0.4022, -0.2926, -0.4199,  0.6646, -0.3047,
        -0.1688, -0.3749, -0.6433, -2.3348, -0.3101, -1.2730, -0.8193, -1.0593,
        -0.0934, -1.6387,  0.3426, -0.8484, -0.4910, -0.5001, -1.0631, -0.3534,
        -1.1564, -0.3842, -0.3172, -0.6432, -0.9083, -0.6567, -0.6490,  0.6337,
        -0.2662, -1.3202, -1.1623, -1.2032, -2.0577, -0.3001, -1.3596, -0.4612,
        -0.5024, -0.4950, -0.3156, -0.3272, -0.2669, -0.4279, -0.3296, -0.3011,
        -1.6635,  0.6434, -0.9455,  0.6099, -0.4234,  0.3917, -0.4944, -0.4284,
        -0.2587, -0.4952, -2.1991, -0.2601, -0.3934, -0.4565, -0.5816, -0.3487,
        -0.7372, -0.3589, -0.4894, -2.0105,  0.4557, -0.8055, -1.7748, -0.3512,
        -0.5359, -0.2101, -0.3955, -0.4782, -1.1457, -0.3974, -2.2115, -0.2838],
       device='cuda:0', requires_grad=True)]</code></pre>
</div>
</div>
<p>What do these numbers mean, you ask? Essentially, they represent the learned parameters of the model— the weights that have been fine-tuned during training. These weights form the “secret sauce” that enables the model to distinguish between, say, a basset hound and a tabby cat.</p>
<p>Next, we’ll dive into how neural networks function behind the scenes, exploring the mechanisms that transform these parameters into powerful predictions.</p>
</section>
</section>
<section id="how-neural-networks-really-work" class="level2">
<h2 class="anchored" data-anchor-id="how-neural-networks-really-work">How Neural Networks Really Work</h2>
<p>To answer the burning question from before, let’s dive into the marvels of neural networks. Yes, Jeremy Howard has an amazing notebook called <a href="https://www.kaggle.com/code/jhoward/how-does-a-neural-net-really-work">“How does a neural net really work?”</a> that’s perfect for beginners. But, I’m here to give you a walkthrough with a dash of humor!</p>
<p>Machine learning models are like very smart shape-fitting artists. They find pattern in data and learn to recognize them. We’ll start simple - with a quadratic function. Let’s see how it all works:</p>
<div id="cell-33" class="cell" data-execution_count="16">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly</span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb21-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb21-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb21-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, HTML</span>
<span id="cb21-6"></span>
<span id="cb21-7"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tomas Mazak's workaround for MathJax in VSCode</span></span>
<span id="cb21-8">plotly.offline.init_notebook_mode()</span>
<span id="cb21-9">display(HTML(</span>
<span id="cb21-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_SVG"&gt;&lt;/script&gt;'</span></span>
<span id="cb21-11">)) </span>
<span id="cb21-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_function(f, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>):</span>
<span id="cb21-13">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>, steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb21-14">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(x)</span>
<span id="cb21-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> px.line(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>title)</span></code></pre></div>
</details>
</div>
<div id="cell-34" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-2">plot_function(f, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">3x</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">2 </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> 2x </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> 1</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb23" data-startfrom="1" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c) { <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c }</span>
<span id="cb23-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>({ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb23-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(element <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c))</span>
<span id="cb23-4">{</span>
<span id="cb23-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> trace1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'quadratic'</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [trace1]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3x²+ 2x + 1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">zeroline</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">yaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> } }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-9">  Plotly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newPlot</span>(div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layout)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-11">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-4" data-nodetype="expression">

</div>
</div>
</div>
</div>
<p>What we want to do here is straightforward: suppose we don’t know the exact mathematical function, and we’re trying to reconstruct it from some data. Here’s the actual function, and our goal is to approximate it using a variety of quadratic equations.</p>
<p><strong>Creating Quadratics on Demand</strong></p>
<p>In Python, the <code>partial</code> function lets us fix certain parameters of a function to generate different variations. It’s like having a playlist of your favorite songs with the flexibility to change the lyrics whenever you want!</p>
<div id="cell-37" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> quad(a, b, c, x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb24-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mkquad(a, b, c): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> partial(quad, a, b, c)</span></code></pre></div>
</div>
<section id="introducing-noise" class="level3">
<h3 class="anchored" data-anchor-id="introducing-noise">Introducing Noise</h3>
<p>In real life, data never fits perfectly to a function. There’s always some noise, it’s often as messy and unpredictable as a doctor’s illegible handwriting. Let’s add some noise to our data:</p>
<div id="cell-39" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> noise(x, scale): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.normal(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scale, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.shape)</span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_noise(x, mult, add): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise(x, mult)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise(x, add)</span></code></pre></div>
</div>
<div id="cell-40" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb26-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb26-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> add_noise(f(x), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb26-4">px.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb27" data-startfrom="1" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb27-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FileAttachment</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataponts.csv"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>()</span>
<span id="cb27-2">x_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-3">y_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-4">{</span>
<span id="cb27-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> trace1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  x_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  y_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data ponts'</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [trace1]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">yaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> } }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-9">  Plotly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newPlot</span>(div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layout)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-11">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-3-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-3-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-3-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-3-4" data-nodetype="expression">

</div>
</div>
</div>
</div>
<p>This noisy data is inspired by the quadratic function but comes with a sprinkle of randomness.</p>
<p><strong>Plot Quadratics with Sliders: Interactive Fun</strong></p>
<p>Ever played with sliders to adjust stuff? Here’s your chance to do the same with quadratics. You can tweak the coefficients a, b, and c to fit the noisy data manually.</p>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb28" data-startfrom="1" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb28-1">viewof a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb28-2">viewof b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb28-3">viewof c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb28-4">{</span>
<span id="cb28-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> trace1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'quadratic'</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> trace2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  x_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  y_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data ponts'</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [trace1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> trace2]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`Interactive Quadratics`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">zeroline</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">yaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">x² + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">x + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>c<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> } }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-10">  Plotly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newPlot</span>(div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layout)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-12">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-4-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-4-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-4-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-4-4" data-nodetype="expression">

</div>
</div>
</div>
</div>
<p>But who wants to be a human slider forever? We need a more scientific approach to measure how well our function fits the data. Enter loss functions - the unsung heroes of machine learning.</p>
</section>
<section id="meet-the-mean-squared-error-mse" class="level3">
<h3 class="anchored" data-anchor-id="meet-the-mean-squared-error-mse">Meet the Mean Squared Error (MSE)</h3>
<p>MSE stands for Mean Squared Error. It’s a way to measure how far off our predictions are from the actual values. Here’s how you define it:</p>
<div id="cell-45" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mse(preds, acts): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ((preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> acts)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span></code></pre></div>
</div>
<p>Now, let’s use MSE to evaluate our quadratics. This function will calculate the loss (how bad our predictions are) and give us a number we can use to improve our model.</p>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb30" data-startfrom="1" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mse</span>(preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> acts) {</span>
<span id="cb30-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> squared_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb30-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preds[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> acts[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-5">    squared_error<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>(error<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-6">  }</span>
<span id="cb30-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> mse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> squared_error<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>((acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> curr) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>curr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> mse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-9">}</span>
<span id="cb30-10">_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(element <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> _a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> _b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> _c))</span>
<span id="cb30-11">viewof _a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb30-12">viewof _b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb30-13">viewof _c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb30-14">{</span>
<span id="cb30-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mse</span>(_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y_data)</span>
<span id="cb30-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> trace1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'quadratic'</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> trace2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  x_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  y_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'markers'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data ponts'</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [trace1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> trace2]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-19">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">zeroline</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">yaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>_a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">x² + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>_b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">x + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>_c<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> } }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-20">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-21">  Plotly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newPlot</span>(div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layout)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-23">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-5-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-5-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-5-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-5-4" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-5-5" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-5-6" data-nodetype="expression">

</div>
</div>
</div>
</div>
<p>With Mean Squared Error (MSE), you can objectively assess whether a model’s fit is improving without relying solely on visual inspection. Instead of manually adjusting parameters—which can be tedious and inefficient—we can automate the process using calculus.</p>
</section>
<section id="the-power-of-derivatives" class="level3">
<h3 class="anchored" data-anchor-id="the-power-of-derivatives">The Power of Derivatives</h3>
<p>One straightforward approach might be to manually tweak each parameter and observe how the loss, which quantifies the model’s prediction error, changes. However, there’s a far more efficient method: by computing the derivative of the loss function with respect to the parameters. These derivatives, also known as gradients, indicate the direction and rate at which the loss changes. This information is crucial for guiding the optimization process.</p>
</section>
<section id="leveraging-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="leveraging-pytorch">Leveraging PyTorch</h3>
<p>Fortunately, PyTorch automates the calculation of these derivatives, greatly simplifying the optimization process. For example, consider a function called <code>quad_mse</code>, which computes the Mean Squared Error between our observed noisy data and a quadratic model defined by parameters [a, b, c]. This function serves as a foundation for adjusting the model parameters in an informed and efficient way.</p>
<div id="cell-49" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> quad_mse(params):</span>
<span id="cb31-2">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mkquad(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>params)</span>
<span id="cb31-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> mse(f(x), y)</span></code></pre></div>
</div>
<p>This function takes the coefficients (a, b, c), creates a quadratic function, and then returns the MSE of the predicted values against the actual noisy data.</p>
<div id="cell-51" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">quad_mse([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor(6.7798, dtype=torch.float64)</code></pre>
</div>
</div>
<p>We get a MSE of 6.78, and yes, it’s a tenser (just a fancy array with some extra Pytorch powers). Let’s make it easier to hand:</p>
<div id="cell-53" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">abc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>])</span>
<span id="cb34-2">abc.requires_grad_()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>tensor([1.5000, 1.5000, 1.5000], requires_grad=True)</code></pre>
</div>
</div>
<p>Now, our tensor is ready to calculate gradients for these coefficients whenever used in computations. Pass this to <code>quad_mse</code> to verify:</p>
<div id="cell-55" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quad_mse(abc)</span>
<span id="cb36-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(6.7798, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)</code></pre>
</div>
</div>
<p>As expected, we get that magical tensor value 6.78. Nothing fancy yet? Hold on. We now tell Pytorch to store the gradients:</p>
<div id="cell-57" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">loss.backward()</span></code></pre></div>
</div>
<p>No fireworks, but something profound just happened. Run this:</p>
<div id="cell-59" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(abc.grad)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([-7.6934, -0.4701, -2.8031])</code></pre>
</div>
</div>
<p>Voila! You’ve got the gradients or slopes. They tell us how much the loss changes if you tweak each parameter-perfect for finding the optimal values.</p>
</section>
<section id="updating-parameters-using-gradients" class="level3">
<h3 class="anchored" data-anchor-id="updating-parameters-using-gradients">Updating Parameters Using Gradients</h3>
<p>To bring our loss down, we adjust the parameters in the direction that reduces the loss. Essentially, we descend down the gradient:</p>
<div id="cell-61" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb41-2">    abc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> abc.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb41-3">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quad_mse(abc)</span>
<span id="cb41-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(6.1349, dtype=torch.float64)</code></pre>
</div>
</div>
<p>This operation subtracts a small proportion of the gradient from each parameter, resulting in an updated set of parameters and a reduction of the loss from 6.78 to 6.13.</p>
<p>Note that using the context manager <code>with torch.no_grad()</code> disables gradient computation for the weight and bias update step, as this update does not require gradient tracking.</p>
</section>
<section id="automating-gradient-descent" class="level3">
<h3 class="anchored" data-anchor-id="automating-gradient-descent">Automating Gradient Descent</h3>
<p>Instead of performing updates manually, you can automate the process using a loop to handle multiple iterations of gradient descent.</p>
<div id="cell-63" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb43-2">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quad_mse(abc)</span>
<span id="cb43-3">    loss.backward()</span>
<span id="cb43-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb43-5">        abc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> abc.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb43-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span>)</span>
<span id="cb43-7">        abc.grad.zero_()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the gradient after each step</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Step 0; loss: 6.13 
Step 1; loss: 5.05 
Step 2; loss: 4.68 
Step 3; loss: 4.37 
Step 4; loss: 4.10 </code></pre>
</div>
</div>
<div id="cell-64" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">abc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>tensor([1.9329, 1.5305, 1.6502], requires_grad=True)</code></pre>
</div>
</div>
<p>After about five gradient descent iterations, the parameters have adjusted incrementally toward their optimal values. These parameters continuously update to minimize the loss and capture the underlying patterns in your data.</p>
</section>
<section id="welcome-to-optimization-the-role-of-gradient-descent" class="level3">
<h3 class="anchored" data-anchor-id="welcome-to-optimization-the-role-of-gradient-descent">Welcome to Optimization: The Role of Gradient Descent</h3>
<p>The process of fine-tuning parameters to reduce prediction error is known as optimization, with gradient descent being one of the most widely used methods. Nearly all machine learning models—including complex neural networks—rely on some variant of this technique.</p>
</section>
<section id="the-importance-of-relus" class="level3">
<h3 class="anchored" data-anchor-id="the-importance-of-relus">The Importance of ReLUs</h3>
<p>Simple quadratic functions are often insufficient for modeling real-world data, which tends to exhibit far greater complexity. When distinguishing subtle visual features in images, for example, a more sophisticated approach is required.</p>
<p>This is where the Rectified Linear Unit (ReLU) comes in. As an activation function, ReLU serves as a fundamental building block for constructing highly flexible models capable of capturing intricate patterns.</p>
<div id="cell-66" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rectified_linear(m, b, x):</span>
<span id="cb47-2">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb47-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.clip(y, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span></code></pre></div>
</div>
<p>This function is a simple line <code>y = mx + b</code>. The <code>torch.clip()</code> function takes anything blow zero and flatlines it at zero. Essentially, this turns any negative output into zero, while keeping positive values unchanged.</p>
<p>Here’s what the ReLU looks like:</p>
<div id="cell-68" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">plot_function(partial(rectified_linear, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb49" data-startfrom="1" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb49-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectified_linear</span>(m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x) {</span>
<span id="cb49-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb49-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb49-4">}</span>
<span id="cb49-5">viewof m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb49-6">viewof b_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb49-7">{</span>
<span id="cb49-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> _y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(element <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectified_linear</span>(m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> element))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb49-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> trace1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb49-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb49-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb49-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb49-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ReLU'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb49-14">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb49-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [trace1]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb49-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb49-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rectified Linear Unit"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb49-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb49-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">yaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] }</span>
<span id="cb49-20">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb49-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb49-22">  Plotly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newPlot</span>(div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layout)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb49-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb49-24">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-6-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-6-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-6-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-6-4" data-nodetype="expression">

</div>
</div>
</div>
</div>
<p>Imagine a line rising up at a 45-degree angle until it hits zero-at which point it surrenders to the great oblivion blow it. Now, you can adjust the coefficients <code>m</code> (slope) and <code>b</code> (intercept) and watch the magic happen.</p>
</section>
<section id="the-power-of-double-relu-fun-with-functions" class="level3">
<h3 class="anchored" data-anchor-id="the-power-of-double-relu-fun-with-functions">The Power of Double ReLU: Fun With Functions</h3>
<p>Why stop at one ReLU when you can have double the fun with two?</p>
<div id="cell-71" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> double_relu(m1, b1, m2, b2, x):</span>
<span id="cb50-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> rectified_linear(m1, b1, x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rectified_linear(m2, b2, x)</span></code></pre></div>
</div>
<p>This function combines two ReLUs. Let’s plot this end see what unfolds:</p>
<div id="cell-73" class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">plot_function(partial(double_relu, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb52" data-startfrom="1" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb52-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double_relu</span>(m1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>b1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>m2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>b2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>x) {</span>
<span id="cb52-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectified_linear</span>(m1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>b1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectified_linear</span>(m2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>b2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>x)</span>
<span id="cb52-3">}</span>
<span id="cb52-4">viewof m1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb52-5">viewof b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb52-6">viewof m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb52-7">viewof b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>})</span>
<span id="cb52-8">{</span>
<span id="cb52-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> _y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(element <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double_relu</span>(m1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>b1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>m2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>b2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> element))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb52-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> trace1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb52-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb52-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb52-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">mode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb52-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Double ReLU'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb52-15">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb52-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [trace1]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb52-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb52-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Double Rectified Linear Unit"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb52-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb52-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">yaxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">title</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] }</span>
<span id="cb52-21">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb52-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb52-23">  Plotly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newPlot</span>(div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layout)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb52-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb52-25">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-7-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-7-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-7-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-7-4" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-7-5" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-7-6" data-nodetype="expression">

</div>
</div>
</div>
</div>
<p>You’ll notice a downward slope that hooks upward into another slope. Tweak the coefficients <code>m1</code>, <code>b1</code>, <code>m2</code>, and <code>b2</code>, and watch the slopes and hooks dance around!</p>
</section>
<section id="infinity-flexible-relus" class="level3">
<h3 class="anchored" data-anchor-id="infinity-flexible-relus">Infinity Flexible ReLUs</h3>
<p>Think this is fun? Imagine adding a million <strong>ReLUs</strong> together. In face, you can add as many as you want to create function as wiggly and complex as you desire.</p>
<p>Behold the power of ReLUs! With enough ReLUs, you can match any data pattern with incredible precision. you want a function that isn’t just 2D but spreads across multiply dimensions? You got it! ReLUs can do 3D, 4D, 5D…, nD.</p>
</section>
<section id="need-parameters-weve-got-gradient-descent" class="level3">
<h3 class="anchored" data-anchor-id="need-parameters-weve-got-gradient-descent">Need Parameters? We’ve got Gradient Descent</h3>
<p>But we need parameters to make magic happen, right? Here’s where <strong>gradient descent</strong> swoops in to save the day. By continuously tweaking these coefficients based on our loss calculations, we gradually descend towards the perfect parameter set.</p>
</section>
<section id="the-big-picture-adding-relus-and-gradient-descent-deep-learning" class="level3">
<h3 class="anchored" data-anchor-id="the-big-picture-adding-relus-and-gradient-descent-deep-learning">The Big Picture: Adding ReLus and Gradient Descent === Deep Learning</h3>
<p>Believe it or not, this is the essence of <strong>deep learning</strong>. Everything else-every other tweak is just about making this process faster and more efficient, sparking those “a-ha!” moments.</p>
<p>Quoting Jeremy Howard:</p>
<p><img src="https://bhdai.github.io/blog/posts/2024-07-28-from-neuron-to-gradient/how_to_draw_an_owl.jpg" style="width:40%;"></p>
<blockquote class="blockquote">
<p>“Now I remember a few years ago when I said something like this in a class, somebody on the forum was like, this reminds me of that thing about how to draw an owl. Okay, step one: draw two circles; step two: daw the rest of the owl”</p>
</blockquote>
<p>This explanation highlights the fundamental components of deep learning. At its core, deep learning involves leveraging activation functions like ReLUs, optimizing parameters through gradient descent, and processing data samples to generate predictions. Essentially, when you stack layers of ReLUs and systematically adjust parameters using gradient descent, the network learns to map inputs to outputs—much like an image of an owl being recognized by the computer.</p>
<p>Whenever the concepts feel overwhelming, remember that the process boils down to these basics: using gradient descent to fine-tune parameters and combining numerous activation functions to capture complex patterns in your data.</p>
<p>And that’s the essence of deep learning—simple building blocks working together to create sophisticated models. Stay curious and explore how each component contributes to the overall process.</p>


</section>
</section>

 ]]></description>
  <category>blogging</category>
  <category>fastai</category>
  <category>torch</category>
  <guid>https://bhdai.github.io/blog/posts/2024-07-28-from-neuron-to-gradient/</guid>
  <pubDate>Sat, 27 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://bhdai.github.io/blog/posts/2024-07-28-from-neuron-to-gradient/xkcd_trained_a_neural_net.png" medium="image" type="image/png" height="212" width="144"/>
</item>
<item>
  <title>First Step in AI</title>
  <dc:creator>Bui Huu Dai</dc:creator>
  <link>https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/</link>
  <description><![CDATA[ 






<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to my deep dive in to the world of deep learning! In this blog post, I’ll be sharing my journey through <a href="https://course.fast.ai/Lessons/lesson1.html">the first lesson</a> of fast.ai course an acclaimed program that makes learning AI accessible and enjoyable.</p>
<p>Fast.ai was created with the goal of making deep learning understandable for everyone, no matter their background, and Lesson 1 accomplishes that by having us build a simple yet fascinating model: a bird classifier. This exciting task not just introduces me to the basics of deep learning but also allow me to experience firsthand the power and simplicity of modern AI tools.</p>
<p>Join me as I walk you though key concept covered in the Lesson 1, from understanding how images are processed by computers to training and validating our model. I will also share some personal insights and reflections on the learning process, aiming to make this technical journey both informative and relatable.</p>
<p>Whether you are a beginner in AI or someone looking for refresh your knowledge, I hope this post inspires and guides you in your own deep learning</p>
</section>
<section id="the-xkcd-joke-and-debunking-deep-learning-myths" class="level2">
<h2 class="anchored" data-anchor-id="the-xkcd-joke-and-debunking-deep-learning-myths">The XKCD Joke and Debunking Deep Learning Myths</h2>
<style>
    figure {
        display: block;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
    }
</style>
<figure class="figure">
<img src="https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/xkcd.png" alt="XKCD joke" style="width:50%;" class="figure-img">
<figcaption>
XKCD Joke
</figcaption>
</figure>
<p>Jeremy Howard kicked off the lesson with relatable XKCD Joke about how in 2015, detecting a bird in a photo was seen as a challenging task, almost a joke. Fast forward to today, and we can build such as system in mere minutes, showcasing how far deep learning has come.</p>
<p>Many people believe that diving into deep learning requires extensive mathematical knowledge, huge datasets, and expensive hardware. However, these myths are far from the truth.</p>
<table class="table-striped table-hover caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 66%">
</colgroup>
<thead>
<tr class="header">
<th>Myth(Don’t need)</th>
<th>Truth</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Lots of math</td>
<td>Just high school math is sufficient</td>
</tr>
<tr class="even">
<td>Lots of data</td>
<td>We’ve seen record-breaking results with fewer than 50 items of data</td>
</tr>
<tr class="odd">
<td>Lots of expensive computer</td>
<td>You can perform state-of-the-art work with hardware available for free of minimal cost</td>
</tr>
</tbody>
</table>
</section>
<section id="top-down-learning-approach" class="level2">
<h2 class="anchored" data-anchor-id="top-down-learning-approach">Top-Down Learning Approach</h2>
<p>One of the most refreshing aspects of fastai course is its top-down teaching approach. Traditional education often starts with the basics and slowly builds up to more complex topics. However, Jeremy Howard and Rachel Thomas believe that learning is more effective when you see the big picture first.</p>
<p>In the fastai course, we start by building practically applications from lesson one, allowing us to see immediate results and understanding the relevance of what we are doing. This approach mirrors how we learn many real-word skills, such as sport or cooking, where we start by trying out the activity and learn the details as needed.</p>
<p>By diving straight into creating a deep learning model, we get hands-on experience early on, which helps solidify our understanding and maintain our interest. As we process though the course, we gradually delve deeper into the underlying principles and theories, building a robust foundation along the way</p>
</section>
<section id="understanding-deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="understanding-deep-learning">Understanding Deep learning</h2>
<p>Deep learning is a technique for extracting and transforming data, with application ranging from speech recognition to image classification. It uses multiple layer of neural networks, where each layer refines the data received from the previous one. These layers are trained using the algorithms that minimize the errors and improve accuracy, enabling the network to learn specific tasks.</p>
<p>Deep learning’s power, flexibility, and simplicity make it applicable across various field, including social science, medicine, finance, and more. For instance, despite lacking of medical background, Jeremy Howard founded <a href="">Enlitic</a>, a company leveraging deep learning to diagnose illnesses. Within months, their algorithm was more effective at identifying malignant tumors than radiologists.</p>
<p>Here are some areas where deep learning excels:</p>
<ul>
<li><strong>Natural Language Processing (NLP)</strong>: Answering question, speech recognition, document summarization, and more.</li>
<li><strong>Computer Vision</strong>: Interpreting satellite images, face recognition, and autonomous vehicle navigation.</li>
<li><strong>Medicine</strong>: Analyzing radiology images, measuring features and medical scans, and diagnosing diseases.</li>
<li><strong>Biology</strong>: Protein folding, genomics tasks, and cell classification.</li>
<li><strong>Image Generation</strong>: Colorizing images, enhancing resolution, and converting images to artistic style.</li>
<li><strong>Recommendation System</strong>: Web search optimization, product recommendations, and personalized content layout.</li>
<li><strong>Gaming</strong>: Mastering games like Chess, Go, and various video games.</li>
<li><strong>Robotics</strong>: Handling challenging objects and complex manipulation tasks.</li>
<li><strong>Other</strong>: Financial forecasting, text-to-speech conversion, and much more.</li>
</ul>
<p>The versatility of deep learning lies in its foundation: neuron networks.</p>
</section>
<section id="a-brief-history-of-deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="a-brief-history-of-deep-learning">A Brief History of Deep Learning</h2>
<style>
    figure {
        display: block;
        mergin-left: auto;
        mergin-right: auto;
        text-align: center;
    }
</style>
<figure class="figure">
<img src="https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/neurral_net.png" alt="Biological Neurons vs. Artificial Neural Network" style="width:50%;" class="figure-img">
<figcaption>
Biological Neurons vs.&nbsp;Artificial Neural Network
</figcaption>
</figure>
<p>Deep learning draws inspiration from human brain’s neural network. The concept of neural network isn’t new; it dates back to 1957 with the creation of the first neural network. The fundamental ideas remain the same today, but advances in hardware and data availability have significantly propelled the field forward.</p>
</section>
<section id="the-sofware-pytorch-fastai-and-jupyter" class="level2">
<h2 class="anchored" data-anchor-id="the-sofware-pytorch-fastai-and-jupyter">The Sofware: Pytorch, Fastai, and Jupyter</h2>
<p>At fastai, after extensive testing of various machine learning packages and languages, they decided to adopt Pytorch in 2017 for their course, software development, and research. Pytorch has become the fastest-growing deep learning library and is widely used in academic research and industry. Its flexibility and expressiveness make it an excellent foundation for deep learning.</p>
<p>The fastai library builds on top of Pytorch, provide high-level functionality for deep learning. This layered architecture allows for a seamless learning experience, make it easier to understand both high-level concepts and low-level operations.</p>
<p>However, the specific software you use a less important than understanding the core principles and techniques of deep learning. Learning to transition between the libraries is relatively quick, but mastering deep learning foundation is crucial.</p>
<p>Jupyter notebook, a powerful and reflexible tool for data science, will be our primary platform for experimentation. Its interaction with fastai and Pytorch makes it ideal for developing and testing deep learning model.</p>
<p>Ready to see it in action? Let’s train our first model!</p>
</section>
<section id="exploring-the-is-it-a-bird-classifier" class="level2">
<h2 class="anchored" data-anchor-id="exploring-the-is-it-a-bird-classifier">Exploring the “Is it a Bird?” Classifier</h2>
<p>One of the most exciting part of Lesson 1 was building our own image classifier to determine whether the given image contains a bird. For this project, we used the fastai library along with pre-trained model to quickly and efficiently create our classifier. Let’s dive into the code walkthrough.</p>
<p>The basic steps we’ll need to do:</p>
<ol type="1">
<li>Use DuckDuckGo for search images of “bird photos”</li>
<li>Use DuckDuckGo to search for images of “forest photos”</li>
<li>Fine-tune a pre-trained neural network to recognize these two groups</li>
<li>Try running this model on a picture of bird and see if it works.</li>
</ol>
<section id="searching-for-images-duckduckgo-search" class="level3">
<h3 class="anchored" data-anchor-id="searching-for-images-duckduckgo-search">Searching for images: DuckDuckGo Search</h3>
<p>Instead of using a big search that requires an API key, we opted to DuckDuckGo, which doesn’t require an API key for image searches. This make the setup simpler and faster.</p>
<p>But make sure you run this command in your terminal before run the code to update DuckDuckGo</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Uqq</span> fastai duckduckgo_search</span></code></pre></div>
<div id="cell-9" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> duckduckgo_search <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DDGS</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">ddgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DDGS()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> search_images(term, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb2-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Searching for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>term<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> L(ddgs.images(keywords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>term, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_images)).itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>)</span></code></pre></div>
</div>
<div id="cell-10" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-2">urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'bird photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>'https://images.pexels.com/photos/326900/pexels-photo-326900.jpeg?cs=srgb&amp;dl=wood-flight-bird-326900.jpg&amp;fm=jpg'</code></pre>
</div>
</div>
<p>Jeremy Howard mentioned that using <code>import *</code> in Jupyter notebooks is not the big deal because Jupyter only import what we use. This approach simplifies the code and keeps it clean.</p>
<p>Here’s the quick explanation of the functions and libraries used in this snippet:</p>
<p><code>DDGS</code> from <code>duckduckgo_search</code>:</p>
<ul>
<li><code>duckduckgo_search</code>: This library allows us to search for images using DuckDuckGo without the need for an API key. So no more begging Google for an API key.</li>
<li><code>DDGS</code>: The class that does the heavy lifting of searching for images.</li>
</ul>
<p><code>fastcore</code>: - <code>fastcore</code>: A foundational library that make Python feel like a Lamborghini-sleek, powerful, and fast.</p>
<p><code>L</code>:</p>
<ul>
<li><code>L</code>: A magical list from <code>fastcore</code> that does way more than the regular Python list. Think of it as a list on steroids.</li>
</ul>
<p>In our example, <code>search_images</code> is a function that performs an image search using DuckDuckGo. It’s print out the search term being used and return a list of images URLs retrieved from the search results.</p>
<p>for more details on the tools, you can refer to the <a href="https://fastcore.fast.ai/">fastcore documentation</a> and the <a href="https://pypi.org/project/duckduckgo-search/">duckduckgo_search documentation</a>.</p>
<div id="cell-12" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_url</span>
<span id="cb6-2">dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird.jpg'</span></span>
<span id="cb6-3">download_url(urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb6-6">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dest)</span>
<span id="cb6-7">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">download_url(search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest.jpg'</span>, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-2">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'forest photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/index_files/figure-html/cell-5-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><code>fastdownload</code> and <code>download_url</code>:</p>
<ul>
<li><code>fastdownload</code>: Think of this as your friendly neighborhood delivery service, but for files. It’s help with downloading files and datasets easier.</li>
<li><code>download_url</code>: A function that fetches the file you need from a URL. In our case, it says “Hey URL, gimme that picture!” and save it as <code>bird.png</code></li>
</ul>
<p><code>fastai.vision.all</code>:</p>
<ul>
<li>This module from the fastai library is like a Swiss Army knife for vision tasks, providing all the tools you need, from data loaders to model training utilities.</li>
</ul>
<p><code>to_thumb</code>: - A method from the <code>PIL.Image</code> class, which is quite handy it resizes an image to a thumbnail while maintaining the aspect ratio. Kind of like shrinking your favorite sweater but in a good way</p>
<p>These libraries and function streamline the process of getting and preparing the images for our model. For more detailed documentation, you can refer to the <a href="https://fastdownload.fast.ai/">fastdownload</a>, <a href="https://docs.fast.ai/tutorial.vision.html">fastai vision</a>, and <a href="https://pillow.readthedocs.io/en/stable/">Pillow</a> documentation.</p>
</section>
<section id="downloading-and-preparing-images" class="level3">
<h3 class="anchored" data-anchor-id="downloading-and-preparing-images">Downloading and Preparing Images</h3>
<p>To build our dataset, we need to download images for the categories we are interested in (‘forest’ and ‘bird’). Here’s how we did it:</p>
<div id="cell-16" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">searches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird'</span></span>
<span id="cb9-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird_or_not'</span>)</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> searches:</span>
<span id="cb9-6">    dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb9-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-8">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> photo'</span>))</span>
<span id="cb9-9">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pause between searches to avoid over-loading server</span></span>
<span id="cb9-10">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sun photo'</span>))</span>
<span id="cb9-11">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-12">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> shade photo'</span>))</span>
<span id="cb9-13">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-14">    resize_images(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o, max_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'forest photo'
Searching for 'forest sun photo'
Searching for 'forest shade photo'
Searching for 'bird photo'
Searching for 'bird sun photo'
Searching for 'bird shade photo'</code></pre>
</div>
</div>
<p><code>Path</code>:</p>
<ul>
<li><code>Path</code>: An object-oriented way to work with filesystem paths. It makes handling files and directories as easy as pie.</li>
</ul>
<p><code>download_images</code>:</p>
<ul>
<li><code>download_images</code>: This function fetches a bunch of images from the internet and saves them in a specified directory. Like ordering a pizza, but instead of pizza, you get pictures.</li>
</ul>
<p><em>Pausing Between Searches</em>:</p>
<ul>
<li>Pausing between searches (<code>sleep(10)</code>) is important to avoid overloading the server. Think of it as giving the server a coffee break between each request.</li>
</ul>
<p><code>resize_images</code>:</p>
<ul>
<li><code>resize_images</code>: A function from fastai that resizes images to a maximum specified size. This is useful for ensuring all images are of a consistent size before training the model.</li>
</ul>
<p>For more details on these tools, you can refer to the <a href="https://docs.python.org/3/library/pathlib.html">pathlib</a>, <a href="https://docs.fast.ai/vision.utils.html">Vision utils</a> documentation.</p>
</section>
<section id="verifying-and-leaning-images" class="level3">
<h3 class="anchored" data-anchor-id="verifying-and-leaning-images">Verifying and Leaning Images</h3>
<p>After download images, it’s essential to verify them and remove corrupt or invalid images.</p>
<div id="cell-19" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(get_image_files(path))</span>
<span id="cb11-2">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb11-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>0</code></pre>
</div>
</div>
<p><code>verify_images</code>:</p>
<ul>
<li><code>verify_images</code>: Think of this as the bouncer for your image dataset, checking IDs to make sure no bad images get through.</li>
</ul>
<p><code>get_image_file</code>:</p>
<ul>
<li><code>get_image_file</code>: This function grabs all image paths in a directory. It’s like having someone fetch all your misplaced socks in the laundry room.</li>
</ul>
<p><code>Path.unlink</code>:</p>
<ul>
<li><code>Path.unlink</code>: A method to delete files. This is how we get rid of the bad apples in the bunch.</li>
</ul>
<p>Fortunately, in my case, all downloaded images were valid, so <code>len(failed)</code> return <code>0</code>–no bad apples in our dataset!</p>
</section>
<section id="the-datablock-api" class="level3">
<h3 class="anchored" data-anchor-id="the-datablock-api">The DataBlock API</h3>
<p>Creating our data loader is a critical step. The <code>DataBlock</code> API in fastai allows us to define how to transform and manage our data easily.</p>
<div id="cell-22" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb13-2">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock), </span>
<span id="cb13-3">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files, </span>
<span id="cb13-4">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb13-5">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb13-6">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb13-7">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb13-8">    </span>
<span id="cb13-9">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Here’s the breakdown of the arguments in <code>DataBlock</code>:</p>
<p><code>blocks</code>:</p>
<ul>
<li>Specifies the type of inputs and targets. In our case, we have images (<code>ImageBlock</code>) and categories (<code>CategoryBlock</code>). It’s like saying, “I have pictures of cats and dogs”</li>
</ul>
<p><code>get_items</code>:</p>
<ul>
<li>Function to get the list of items. Here we’re using <code>get_image_file</code> to retrieve all our image files.</li>
</ul>
<p><code>splitter</code>:</p>
<ul>
<li>Defines how to split the dataset into training and validation sets. <code>RandomSplitter(valid_pct=0.2, seed=42)</code> means 20% of the data will be used for validation. The <code>seed</code> ensures that every time we run the code we get the same split. Think of like setting your DVR to record your favorite show at the same time every week.</li>
</ul>
<p><code>get_y</code>:</p>
<ul>
<li>Function to get the target label from each item. We use <code>parent_label</code> to get the label from parent directory name (e.g., ‘forest’ or ‘bird’)</li>
</ul>
<p><code>item_tfms</code>:</p>
<ul>
<li>item transformation to apply. We use <code>Resize(129, method='squish')</code> to resize images to 129x129 pixels by squishing them if necessary.</li>
</ul>
<p><code>dataloaders</code>:</p>
<ul>
<li>Creates the data loaders for our dataset, with a batch size of 32. Data loaders are like conveyor belt that feed the data into your model in manageable chunks.</li>
</ul>
<p>The <code>show_batch</code> method is handy way to visualize a batch of data items. It’s like a quick preview to make sure everything looks good.</p>
<p>For more details, checkout the fastai <a href="https://docs.fast.ai/data.block.html">DataBlock API documentation</a>.</p>
</section>
<section id="training-the-model-welcome-to-the-learner-world" class="level3">
<h3 class="anchored" data-anchor-id="training-the-model-welcome-to-the-learner-world">Training the Model: Welcome to the Learner World</h3>
<p>After preparing our dataset, it’s time to train our model. We use the <code>vision_learner</code> function to setup a learner and the powerful <code>fine_tune</code> method to train the model.</p>
<div id="cell-25" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb14-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth
  0%|          | 0.00/44.7M [00:00&lt;?, ?B/s]100%|██████████| 44.7M/44.7M [00:00&lt;00:00, 145MB/s] </code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.120399</td>
<td>1.209828</td>
<td>0.411765</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.185352</td>
<td>0.054729</td>
<td>0.029412</td>
<td>00:01</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.102830</td>
<td>0.023147</td>
<td>0.000000</td>
<td>00:01</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.072183</td>
<td>0.049310</td>
<td>0.029412</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><code>vision_learner</code>:</p>
<ul>
<li>This create a learner object that combines our data loaders(<code>dls</code>) and a pre-trained model(<code>resnet18</code>). We basically saying, “Hey, take this data and use this model to learn from it.”</li>
</ul>
<p><code>resnet18</code>:</p>
<ul>
<li>A specific architecture of a Convolutional Neuron Network that’s been pre-trained on a large dataset. Think of it as seasoned detective who’s seen it all and just need to be briefed on this specific case.</li>
</ul>
<p><code>metrics=error_rate</code>:</p>
<ul>
<li>This specifies that we want to use the error rate as a metric to evaluate our model’s performance. It’s like having a scoreboard to keep track of who’s winning.<br>
</li>
</ul>
<p><code>fine_tune(3)</code>:</p>
<ul>
<li>Here’s where the magic happens. Unlike the traditional <code>fit</code> method, <code>fine_tune</code> starts by refining the pre-trained model with our specific data. It’s like taking your detective and train them on a nuances of this particular mystery. The <code>3</code> indicates the number of epochs (full cycles through the training data).</li>
</ul>
<p>The <code>fine_tune</code> method is particularly powerful because it starts with a model that already knows a lot (thanks to pre-training) and fine-tune it to specific task. This approach often yields better results, faster and with less data, compared to training a model from scratch.</p>
</section>
<section id="making-predictions" class="level3">
<h3 class="anchored" data-anchor-id="making-predictions">Making Predictions</h3>
<p>Finally, let’s make our bird classifier predict whether or not an image contain a bird.</p>
<div id="cell-28" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">is_bird,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird.jpg'</span>))</span>
<span id="cb16-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_bird<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb16-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a bird: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: bird.
Probability it's a bird: 0.9988</code></pre>
</div>
</div>
<p><code>PILImage.create</code>:</p>
<ul>
<li>This function create a image object from a file. It’s like saying “Hey, look at this picture I just took.”</li>
</ul>
<p><code>learn.predict</code>:</p>
<ul>
<li><p>This method uses our train model to predict what’s in a image. It’s like asking your well-trained detective, “What do you see in this picture?”</p></li>
<li><p>The method returns three values:</p>
<ul>
<li><code>is_bird</code>: The predicted label(whether it’s a bird or not).</li>
<li><code>probs</code>: The probabilities associated with each class.</li>
</ul></li>
</ul>
<p>When we print out the predicted label and the probability. If the model says it’s a bird with a high probability, you can feel pretty confident your model knows its bird!</p>
<p>Building the “Is it a Bird?” classifier was hands-on way to introduce the principles of deep learning. By leveraging fastai and Pytorch, we could quickly create an effective model with minimal code. This approach of starting with practical, top-down learning ensures that we see immediately results and understand the real world applicability of deep learning from the get-go.</p>
</section>
</section>
<section id="what-is-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="what-is-machine-learning">What Is Machine Learning</h2>
<p>Ah, the age-old question: What is the machine learning? Well, imagine if your computer was a child, and you were its teacher. Instead of giving it a strict set of rules to follow(which, let’s be honest, kids hate), you give it examples from which it can learn. In essence, machine learning is about enabling computer to learn from data rather than being explicitly programmed. It’s like teaching your computer how to ride a bike by letting it practice, fall and get up again, rather than reading it a manual</p>
<p>Let’s take a closer look at this with a series of visualizations:</p>
<section id="traditional-programming" class="level3">
<h3 class="anchored" data-anchor-id="traditional-programming">Traditional Programming</h3>
<p>In traditional Programming we write explicit instructions-a program-that processes input to produce results.</p>
<div class="cell" data-fig-width="6" data-fig-height="1" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="576" height="96" viewbox="0.00 0.00 293.79 58.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 54)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-54 289.79,-54 289.79,4 -4,4"></polygon>
<!-- program -->
<g id="node1" class="node">
<title>program</title>
<polygon fill="none" stroke="black" points="177.29,-50 109.29,-50 105.29,-46 105.29,0 173.29,0 177.29,-4 177.29,-50"></polygon>
<polyline fill="none" stroke="black" points="173.29,-46 105.29,-46 "></polyline>
<polyline fill="none" stroke="black" points="173.29,-46 173.29,0 "></polyline>
<polyline fill="none" stroke="black" points="173.29,-46 177.29,-50 "></polyline>
<text text-anchor="middle" x="141.29" y="-20.8" font-family="Times,serif" font-size="14.00">program</text>
</g>
<!-- results -->
<g id="node3" class="node">
<title>results</title>
<ellipse fill="none" stroke="black" cx="249.54" cy="-25" rx="36.5" ry="18"></ellipse>
<text text-anchor="middle" x="249.54" y="-20.8" font-family="Times,serif" font-size="14.00">results</text>
</g>
<!-- program&#45;&gt;results -->
<g id="edge2" class="edge">
<title>program-&gt;results</title>
<path fill="none" stroke="black" d="M177.38,-25C185.54,-25 194.35,-25 202.9,-25"></path>
<polygon fill="black" stroke="black" points="203.13,-28.5 213.13,-25 203.13,-21.5 203.13,-28.5"></polygon>
</g>
<!-- inputs -->
<g id="node2" class="node">
<title>inputs</title>
<ellipse fill="none" stroke="black" cx="34.65" cy="-25" rx="34.79" ry="18"></ellipse>
<text text-anchor="middle" x="34.65" y="-20.8" font-family="Times,serif" font-size="14.00">inputs</text>
</g>
<!-- inputs&#45;&gt;program -->
<g id="edge1" class="edge">
<title>inputs-&gt;program</title>
<path fill="none" stroke="black" d="M69.33,-25C77.58,-25 86.53,-25 95.22,-25"></path>
<polygon fill="black" stroke="black" points="95.23,-28.5 105.23,-25 95.23,-21.5 95.23,-28.5"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>Think of it as following a recipe step-by-step: preheat the oven, mix the ingredients, bake for 30 minutes, and voilà, you have a cake.</p>
</section>
<section id="program-using-weight-and-assignment" class="level3">
<h3 class="anchored" data-anchor-id="program-using-weight-and-assignment">Program Using Weight And Assignment</h3>
<p>In machine learning, we use model with weights(parameters) that processes inputs to generates result.</p>
<div class="cell" data-fig-width="5.5" data-fig-height="2" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="528" height="192" viewbox="0.00 0.00 306.65 98.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-94 302.65,-94 302.65,4 -4,4"></polygon>
<!-- model -->
<g id="node1" class="node">
<title>model</title>
<polygon fill="none" stroke="black" points="190.16,-70 122.16,-70 118.16,-66 118.16,-20 186.16,-20 190.16,-24 190.16,-70"></polygon>
<polyline fill="none" stroke="black" points="186.16,-66 118.16,-66 "></polyline>
<polyline fill="none" stroke="black" points="186.16,-66 186.16,-20 "></polyline>
<polyline fill="none" stroke="black" points="186.16,-66 190.16,-70 "></polyline>
<text text-anchor="middle" x="154.16" y="-40.8" font-family="Times,serif" font-size="14.00">model</text>
</g>
<!-- results -->
<g id="node3" class="node">
<title>results</title>
<ellipse fill="none" stroke="black" cx="262.4" cy="-45" rx="36.5" ry="18"></ellipse>
<text text-anchor="middle" x="262.4" y="-40.8" font-family="Times,serif" font-size="14.00">results</text>
</g>
<!-- model&#45;&gt;results -->
<g id="edge2" class="edge">
<title>model-&gt;results</title>
<path fill="none" stroke="black" d="M190.24,-45C198.4,-45 207.21,-45 215.76,-45"></path>
<polygon fill="black" stroke="black" points="215.99,-48.5 225.99,-45 215.99,-41.5 215.99,-48.5"></polygon>
</g>
<!-- inputs -->
<g id="node2" class="node">
<title>inputs</title>
<ellipse fill="none" stroke="black" cx="41.08" cy="-72" rx="34.79" ry="18"></ellipse>
<text text-anchor="middle" x="41.08" y="-67.8" font-family="Times,serif" font-size="14.00">inputs</text>
</g>
<!-- inputs&#45;&gt;model -->
<g id="edge1" class="edge">
<title>inputs-&gt;model</title>
<path fill="none" stroke="black" d="M72.72,-64.55C83.66,-61.89 96.22,-58.84 108.12,-55.95"></path>
<polygon fill="black" stroke="black" points="109.01,-59.33 117.9,-53.57 107.36,-52.53 109.01,-59.33"></polygon>
</g>
<!-- weights -->
<g id="node4" class="node">
<title>weights</title>
<ellipse fill="none" stroke="black" cx="41.08" cy="-18" rx="41.16" ry="18"></ellipse>
<text text-anchor="middle" x="41.08" y="-13.8" font-family="Times,serif" font-size="14.00">weights</text>
</g>
<!-- weights&#45;&gt;model -->
<g id="edge3" class="edge">
<title>weights-&gt;model</title>
<path fill="none" stroke="black" d="M77.53,-26.62C87.24,-28.98 97.9,-31.57 108.08,-34.04"></path>
<polygon fill="black" stroke="black" points="107.5,-37.5 118.04,-36.46 109.15,-30.7 107.5,-37.5"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>Here, the model is like a reflexible recipe that can adjust itself. The ingredients(inputs) are mixed differently depending on the weights, and the output is a delicious result that varies based on those adjustments.</p>
</section>
<section id="training-a-machine-learning-model" class="level3">
<h3 class="anchored" data-anchor-id="training-a-machine-learning-model">Training a Machine Learning Model</h3>
<p>Training a model involves feeding inputs through the model to produce results, measuring performance and updating the weights to improve accuracy.</p>
<div class="cell" data-fig-width="6.3" data-fig-height="2" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="605" height="192" viewbox="0.00 0.00 501.62 98.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-94 497.62,-94 497.62,4 -4,4"></polygon>
<!-- model -->
<g id="node1" class="node">
<title>model</title>
<polygon fill="none" stroke="black" points="191.16,-78 123.16,-78 119.16,-74 119.16,-28 187.16,-28 191.16,-32 191.16,-78"></polygon>
<polyline fill="none" stroke="black" points="187.16,-74 119.16,-74 "></polyline>
<polyline fill="none" stroke="black" points="187.16,-74 187.16,-28 "></polyline>
<polyline fill="none" stroke="black" points="187.16,-74 191.16,-78 "></polyline>
<text text-anchor="middle" x="155.16" y="-48.8" font-family="Times,serif" font-size="14.00">model</text>
</g>
<!-- results -->
<g id="node3" class="node">
<title>results</title>
<ellipse fill="none" stroke="black" cx="300.72" cy="-53" rx="36.5" ry="18"></ellipse>
<text text-anchor="middle" x="300.72" y="-48.8" font-family="Times,serif" font-size="14.00">results</text>
</g>
<!-- model&#45;&gt;results -->
<g id="edge2" class="edge">
<title>model-&gt;results</title>
<path fill="none" stroke="black" d="M191.28,-53C210.31,-53 234.04,-53 254.45,-53"></path>
<polygon fill="black" stroke="black" points="254.47,-56.5 264.47,-53 254.47,-49.5 254.47,-56.5"></polygon>
</g>
<!-- inputs -->
<g id="node2" class="node">
<title>inputs</title>
<ellipse fill="none" stroke="black" cx="41.08" cy="-72" rx="34.79" ry="18"></ellipse>
<text text-anchor="middle" x="41.08" y="-67.8" font-family="Times,serif" font-size="14.00">inputs</text>
</g>
<!-- inputs&#45;&gt;model -->
<g id="edge1" class="edge">
<title>inputs-&gt;model</title>
<path fill="none" stroke="black" d="M74.19,-66.56C85,-64.72 97.27,-62.64 108.89,-60.67"></path>
<polygon fill="black" stroke="black" points="109.62,-64.1 118.89,-58.98 108.45,-57.2 109.62,-64.1"></polygon>
</g>
<!-- performance -->
<g id="node5" class="node">
<title>performance</title>
<ellipse fill="none" stroke="black" cx="433.8" cy="-53" rx="59.65" ry="18"></ellipse>
<text text-anchor="middle" x="433.8" y="-48.8" font-family="Times,serif" font-size="14.00">performance</text>
</g>
<!-- results&#45;&gt;performance -->
<g id="edge4" class="edge">
<title>results-&gt;performance</title>
<path fill="none" stroke="black" d="M337.19,-53C345.4,-53 354.41,-53 363.52,-53"></path>
<polygon fill="black" stroke="black" points="363.81,-56.5 373.81,-53 363.81,-49.5 363.81,-56.5"></polygon>
</g>
<!-- weights -->
<g id="node4" class="node">
<title>weights</title>
<ellipse fill="none" stroke="black" cx="41.08" cy="-18" rx="41.16" ry="18"></ellipse>
<text text-anchor="middle" x="41.08" y="-13.8" font-family="Times,serif" font-size="14.00">weights</text>
</g>
<!-- weights&#45;&gt;model -->
<g id="edge3" class="edge">
<title>weights-&gt;model</title>
<path fill="none" stroke="black" d="M75.1,-28.31C85.79,-31.65 97.83,-35.41 109.23,-38.97"></path>
<polygon fill="black" stroke="black" points="108.44,-42.39 119.03,-42.03 110.53,-35.71 108.44,-42.39"></polygon>
</g>
<!-- performance&#45;&gt;weights -->
<g id="edge5" class="edge">
<title>performance-&gt;weights</title>
<path fill="none" stroke="black" d="M393.16,-39.65C376.07,-34.47 355.74,-29.05 336.97,-26 251.85,-12.15 151.12,-13.06 92.14,-15.3"></path>
<polygon fill="black" stroke="black" points="91.83,-11.81 81.98,-15.72 92.12,-18.81 91.83,-11.81"></polygon>
<text text-anchor="middle" x="227.81" y="-21.2" font-family="Times,serif" font-size="14.00">update</text>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>Think of it as trial and error. The model tries to bake a cake, and if it’s to salty, it adjusts the recipe (update the weights). Over time, it learns the perfect proportions.</p>
</section>
<section id="using-a-trained-model" class="level3">
<h3 class="anchored" data-anchor-id="using-a-trained-model">Using a Trained Model</h3>
<p>Once the model is trained, it can be used just like a traditional program, taking inputs and producing results predictably.</p>
<div class="cell" data-fig-width="5" data-fig-height="1" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="480" height="96" viewbox="0.00 0.00 293.79 58.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 54)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-54 289.79,-54 289.79,4 -4,4"></polygon>
<!-- model -->
<g id="node1" class="node">
<title>model</title>
<polygon fill="none" stroke="black" points="177.29,-50 109.29,-50 105.29,-46 105.29,0 173.29,0 177.29,-4 177.29,-50"></polygon>
<polyline fill="none" stroke="black" points="173.29,-46 105.29,-46 "></polyline>
<polyline fill="none" stroke="black" points="173.29,-46 173.29,0 "></polyline>
<polyline fill="none" stroke="black" points="173.29,-46 177.29,-50 "></polyline>
<text text-anchor="middle" x="141.29" y="-20.8" font-family="Times,serif" font-size="14.00">model</text>
</g>
<!-- results -->
<g id="node3" class="node">
<title>results</title>
<ellipse fill="none" stroke="black" cx="249.54" cy="-25" rx="36.5" ry="18"></ellipse>
<text text-anchor="middle" x="249.54" y="-20.8" font-family="Times,serif" font-size="14.00">results</text>
</g>
<!-- model&#45;&gt;results -->
<g id="edge2" class="edge">
<title>model-&gt;results</title>
<path fill="none" stroke="black" d="M177.38,-25C185.54,-25 194.35,-25 202.9,-25"></path>
<polygon fill="black" stroke="black" points="203.13,-28.5 213.13,-25 203.13,-21.5 203.13,-28.5"></polygon>
</g>
<!-- inputs -->
<g id="node2" class="node">
<title>inputs</title>
<ellipse fill="none" stroke="black" cx="34.65" cy="-25" rx="34.79" ry="18"></ellipse>
<text text-anchor="middle" x="34.65" y="-20.8" font-family="Times,serif" font-size="14.00">inputs</text>
</g>
<!-- inputs&#45;&gt;model -->
<g id="edge1" class="edge">
<title>inputs-&gt;model</title>
<path fill="none" stroke="black" d="M69.33,-25C77.58,-25 86.53,-25 95.22,-25"></path>
<polygon fill="black" stroke="black" points="95.23,-28.5 105.23,-25 95.23,-21.5 95.23,-28.5"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>Now, you have reliable recipe that consistently makes the perfect cake. The model processes new inputs(ingredients) and produces outputs(cakes) with the learned adjustments.</p>
</section>
</section>
<section id="what-our-image-recognizer-learned" class="level2">
<h2 class="anchored" data-anchor-id="what-our-image-recognizer-learned">What Our Image Recognizer Learned</h2>
<p>At this stage, we have an image recognizer that works very well. But what is it actually doing? Although many people believe that deep learning results in impenetrable “black box” models (where predictions are given, but no one understand why), this isn’t entirely true. There is a vast body of research showing how to inspect deep learning model deeply and gain rich insights for them. However, all kind of machine learning model (including machine learning and traditional statistical models) can be challenging to fully understand, especially when dealing with new data that differs significantly from the training data.</p>
<p>When we fine-tuned our pre-trained model, we adapted the last layers(originally trained on general features like flowers, humans, animals) to specialize in a birds versus non-birds problem. Imagine our model initially knew how to recognize the entire zoo, but now we’ve trained it to focus solely on recognizing birds. More generally, we could specialize such a pre-trained model on many different tasks.</p>
</section>
<section id="section" class="level1">
<h1></h1>
<section id="beyond-image-classification-other-application-of-deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="beyond-image-classification-other-application-of-deep-learning">Beyond Image Classification: Other Application of Deep Learning</h2>
<p>Deep learning isn’t just about figuring out whether there’s bird in your photo. It’s way more powerful than that! Let’s explore a couple of areas where deep learning make significant strides:</p>
<ol type="1">
<li><p><strong>Image Segmentation</strong>:</p>
<p>Segmentation is a process of identifying and labeling pixels in an image belonging to the same object. This is critically important for application like autonomous vehicles where the car needs to recognize and localize object such as pedestrians, other vehicles, and road signs. Instead of just saying, “Hey, there’s a cat in a picture”, segmentation says, “Here’s the outline of the cat in this picture”.</p></li>
<li><p><strong>Natural Language Processing (NLP)</strong>: Deep learning has dramatically improved Natural Language Processing over the last few years. Now computers can:</p>
<ul>
<li><strong>Generate text</strong>: Write coherent and context-aware essays (but don’t trust them with your love letters just yet).</li>
<li><strong>Translate languages</strong>: Turn English into Spanish, French, or Klingon (okay, maybe not Klingon…yet)</li>
<li><strong>Analyze comments</strong>: Understand sentiments, detect sarcasm, and probably tell when you’re being a bit snarky.</li>
<li><strong>Label words in sentences</strong>: Identify parts of speech (nouns, verbs, adjectives, etc.), entities (like names and places), and more.</li>
</ul></li>
</ol>
<p>Here’s some cool code to classify the sentiment of a movie review better than anything available just a few years ago:</p>
<div id="cell-46" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.text.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb18-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>)</span>
<span id="cb18-3">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_classifier_learner(dls, AWD_LSTM, drop_mult<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy)</span>
<span id="cb18-4">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="144441344" class="" max="144440600" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [144441344/144440600 00:03&lt;00:00]
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="105070592" class="" max="105067061" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [105070592/105067061 00:01&lt;00:00]
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.462561</td>
<td>0.395122</td>
<td>0.822320</td>
<td>03:08</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.301779</td>
<td>0.248262</td>
<td>0.899480</td>
<td>06:38</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.244484</td>
<td>0.202708</td>
<td>0.921480</td>
<td>06:38</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.189148</td>
<td>0.194167</td>
<td>0.926160</td>
<td>06:37</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.148741</td>
<td>0.191470</td>
<td>0.929720</td>
<td>06:38</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="cell-47" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">learn.predict(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I really liked that movie!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>('pos', tensor(1), tensor([7.8042e-04, 9.9922e-01]))</code></pre>
</div>
</div>
<p>And boom! You have a state-of-art sentiment analyzer.</p>
</section>
<section id="the-important-of-validation-and-test-sets" class="level2">
<h2 class="anchored" data-anchor-id="the-important-of-validation-and-test-sets">The Important of Validation and Test Sets</h2>
<p>We’ve trained our model and it’s looking pretty smart, but know how do we know it’s actually learned something useful? This is where validation and test sets come in.</p>
<section id="why-do-we-need-a-validation-set" class="level3">
<h3 class="anchored" data-anchor-id="why-do-we-need-a-validation-set">Why Do We Need a Validation set?</h3>
<p>The goal of a model is to make predictions about unseen data. If we trained a model with all our data and evaluated it using the same data, we wouldn’t really know how well it performs on new, unseen data. It could just memorize the training data(cheating basically). The model could get great results on your training data but bomb when given the data to analyze. To avoid this, we: - <strong>We split dataset</strong>: We divide our data into training and validation sets. The training set is used to teach the model, and the validation set is used to see how well it’s learning</p>
</section>
<section id="preventing-overfitting-with-a-test-set" class="level3">
<h3 class="anchored" data-anchor-id="preventing-overfitting-with-a-test-set">Preventing Overfitting with a Test set</h3>
<p>Overfitting is a common issue where the model preform exceptionally well on the training set but poorly on the validation set, meaning it has memorized the training data rather than learning the generalizable pattern.</p>
<p>Even when your model hasn’t fully memorized all your data, it might memorized certain parts of it during earlier training stages. The longer you train, the better the accuracy on the training set, but eventually, the validation accuracy will start to decline. This is because your model is begins memorizing the training data instead of learning the pattern that generalize well. When this happens, we say the model is overfitting.</p>
<p>Here’s an example to visualize overfitting:</p>
<style>
    figure {
        display: block;
        mergin-left: auto;
        mergin-right: auto;
        text-align: center;
    }
</style>
<figure class="figure">
<img src="https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/att_00000.png" alt="Example of overfitting" style="width:90%;" class="figure-img">
<figcaption>
Example of overfitting
</figcaption>
</figure>
<p>The Image shows what happens when you overfit, using a simplified example where we have just one parameter and some randomly generated data. Although the overfitted model’s prediction are accurate for the data near the observed data points, they are way off when outside of that range.</p>
<p>Overfitting is the single most important and challenging issue when training machine learning models. It’s easy to create a model that does the great job at making predictions on the data it’s been trained on, but making accurate predictions on new data is much harder.</p>
<p>For instance, if you writing a handwritten digit classifier (as we will very soon) and use it to recognize numbers on checks, you won’t see the same numbers the model was trained on–checks will have different variations of handwriting to deal with.</p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>Deep learning is an exciting field that extends far beyond simple image classification. From understand speech to translate languages and detecting malware, it’s applications are vast. Through this blog post, we’ve seen how to build a bird classifier using the fastai library-an accessible, powerful tool that simplifies the complexities of machine learning.</p>
<p>By splitting our data into training and validation sets, we ensure our model doesn’t cheat and genuinely learns the task at hand. With powerful tools like fastai and the ability to handle the diverse tasks, deep learning truly has potential to transform numerous industries.</p>
<p>I hope you enjoyed this journey as much as I did. Remember, the key to mastering deep learning is to keep experimenting and learning. So go ahead, build that next big thing, and maybe teach your computer to recognize your pet fish or translate cat’s meows!</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Thank you for joining me on this deep learning adventure! If you find this blog helpful or inspiring, please share it with others who might also be interested. Deep learning is a continuously evolving field with endless possibilities. Stay curious, keep learning, and don’t hesitate to dive deeper into the world of AI.</p>
<p>Feel free to leave your comments, questions, or insights below. I’d love to hear your experiences, projects, and what you’re learning. Together, we can continue to explore and push the boundaries of what’s possible with deep learning.</p>
<p>Happy coding, and may your models always be accurate!</p>


</section>
</section>

 ]]></description>
  <category>blogging</category>
  <category>fastai</category>
  <guid>https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/</guid>
  <pubDate>Wed, 03 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://bhdai.github.io/blog/posts/2024-06-30-your-deep-learning-journey/xkcd.png" medium="image" type="image/png" height="127" width="144"/>
</item>
</channel>
</rss>

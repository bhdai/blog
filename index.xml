<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Bui Huu Dai</title>
<link>https://buidai123.github.io/blog/</link>
<atom:link href="https://buidai123.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Dai&#39;s blog.</description>
<generator>quarto-1.4.557</generator>
<lastBuildDate>Sat, 29 Jun 2024 17:00:00 GMT</lastBuildDate>
<item>
  <title>My First Blog Post</title>
  <dc:creator>Bui Huu Dai</dc:creator>
  <link>https://buidai123.github.io/blog/posts/first-post/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://buidai123.github.io/blog/posts/first-post/index_files/figure-html/cell-1-1-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<section id="welcome-to-my-blog" class="level1">
<h1>Welcome to My Blog</h1>
<p>This is my first blog post using Quarto and Jupyter Notebook. I’m excited to start sharing my thoughts and experiences here.</p>
<section id="why-i-started-this-blog" class="level2">
<h2 class="anchored" data-anchor-id="why-i-started-this-blog">Why I Started This Blog</h2>
<p>I decided to create this blog for a few reasons:</p>
<ul>
<li>To document my learning journey</li>
<li>To share interesting insights and ideas</li>
<li>To connect with like-minded individuals</li>
</ul>
</section>
<section id="what-to-expect" class="level2">
<h2 class="anchored" data-anchor-id="what-to-expect">What to Expect</h2>
<p>In this blog, you can expect to find:</p>
<ul>
<li>Tutorials and guides on various topics</li>
<li>Personal reflections and experiences</li>
<li>Interesting projects and experiments</li>
</ul>
<p>Stay tuned for more content coming soon!</p>


</section>
</section>

 ]]></description>
  <category>test</category>
  <category>quarto</category>
  <guid>https://buidai123.github.io/blog/posts/first-post/</guid>
  <pubDate>Sat, 29 Jun 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>First Step in AI: My Experience with fast.ai Lesson 1</title>
  <dc:creator>Bui Huu Dai</dc:creator>
  <link>https://buidai123.github.io/blog/posts/2024-06-30-your-deep-learning-journey/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to my deep dive in to the world of deep learning! In this blog post, I’ll be sharing my journey through <a href="https://course.fast.ai/Lessons/lesson1.html">the first lession</a> of fast.ai course an acclaimed program that makes learning AI accessible and enjoyable.</p>
<p>Fast.ai was created with the goal of making deep learning understandable for everyone, no matter their background, and Lesson 1 accomplishes that by having us build a simple yet fascinating model: a bird classifier. this exciting task not just introduces me to the basics of deep learning but also alow me to experience firsthand the power and simplicity of modern AI tools.</p>
<p>Join me as I walk you though key conccept covered in the Lesson 1, from understanding how images are processed by computers to trainning and validating our model. I will also share some personal insights and reflections on the learning process, aiming to make this technicial journey both infomative and relatable.</p>
<p>Whether you are a bigginer in AI or someone looking for refresh your knowledge, I hope this post inspires and guides you in your own deep learning</p>
</section>
<section id="the-xkcd-joke-and-debunking-deep-learning-myths" class="level2">
<h2 class="anchored" data-anchor-id="the-xkcd-joke-and-debunking-deep-learning-myths">The XKCD Joke and Debunking Deep Learning Myths</h2>
<style>
    figure {
        display: block;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
    }
</style>
<figure class="figure">
<img src="https://buidai123.github.io/blog/posts/2024-06-30-your-deep-learning-journey/xkcd.png" alt="XKCD joke" style="width:50%;" class="figure-img">
<figcaption>
XKCD Joke
</figcaption>
</figure>
<p>Jeremy Howard kicked off the lesson with relatable XKCD Joke about how in 2015, detecting a bird in a photo was seen as a challenging task, almost a joke. Fast forward to today, and we can build such as system in mere minutes, showcasing how far deep learning has come.</p>
<p>Many people believe that diving into deep learning requires extensive mathematical knowledge, huge datasets, and expensive hardware. However, these myths are far from the truth.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 66%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Myth(Don’t need)</strong></th>
<th><strong>Truth</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Lots of math</td>
<td>Just high school math is sufficient</td>
</tr>
<tr class="even">
<td>Lots of data</td>
<td>We’ve seen record-breaking results with fewer than 50 items of data</td>
</tr>
<tr class="odd">
<td>Lots of expensive computer</td>
<td>You can perform state-of-the-art work with hardwere available for free of minimal cost</td>
</tr>
</tbody>
</table>
</section>
<section id="top-down-learning-approach" class="level2">
<h2 class="anchored" data-anchor-id="top-down-learning-approach">Top-Down Learning Approach</h2>
<p>One of the most refreshing aspects of fastai course is its top-down teaching approach. Traditional education often starts with the basics and slowly builds up to more complex topics. However, Jeremy Howard and Rachel Thomas believe that learning is more effective when you see the big picture first.</p>
<p>In the fastai course, we start by building practicall applications from lession one, allowing us to see immediate results and understanding the relevance of what we are doing. This approach mirrors how we learn many real-word skills, such as sport or cooking, where we start by trying out the activity and learn the details as needed.</p>
<p>By diving straight into creating a deep learning model, we get hands-on experience early on, which helps solidify our understanding and maintain our interest. As we process though the course, we gradually delve deeper into the underlying principles and theories, bulding a robust foundation along the way</p>
</section>
<section id="understanding-deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="understanding-deep-learning">Understanding Deep learning</h2>
<p>Deep learning is a technique for extracting and transforming data, with application ranging from speech recognition to image classification. It uses multiple layer of neural networks, where each layer refines the data received from the previous one. These layers are trained using the algorithms that minimize the errors and improve accuracy, enabling the network to learn specific tasks.</p>
<p>Deep learning’s power, flexibility, and simplicity make it applicable across various field, including social science, medicine, finance, and more. For instance, despite lacking of medical background, Jeremy Howard founded <a href="">Enlitic</a>, a company leveraging deep learning to diagnose illnesses. Within months, their algorithm was more effective at identifying malignant tumors than radiologists.</p>
<p>Here are some areas where deep learing excels:</p>
<ul>
<li><strong>Natural Language Processing (NLP)</strong>: Answering question, speech recognition, document summarization, and more.</li>
<li><strong>Computer Vision</strong>: Interpreting satellite images, face recognition, and automous vehicle navigation.</li>
<li><strong>Medicine</strong>: Analyzing radiology images, measuring features and medical scans, and diagnosing diseases.</li>
<li><strong>Biology</strong>: Protein folding, genomics tasks, and cell classification.</li>
<li><strong>Image Generation</strong>: Colorizing images, enhancing resolution, and converting images to artistic style.</li>
<li><strong>Recommendation System</strong>: Web search optimization, product recommendations, and personalized content layout.</li>
<li><strong>Gaming</strong>: Mastering games like Chess, Go, and various video games.</li>
<li><strong>Robotics</strong>: Handling challenging objects and complex manipulation tasks.</li>
<li><strong>Other</strong>: Financial forecasting, text-to-speech conversion, and much more.</li>
</ul>
<p>The versatility of deep learning lies in its foundation: neuron networks.</p>
</section>
<section id="a-brief-history-of-deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="a-brief-history-of-deep-learning">A Brief History of Deep Learning</h2>
<style>
    figure {
        display: block;
        mergin-left: auto;
        mergin-right: auto;
        text-align: center;
    }
</style>
<figure class="figure">
<img src="https://buidai123.github.io/blog/posts/2024-06-30-your-deep-learning-journey/neurral_net.png" alt="Biological Neurons vs. Artificial Neural Network" style="width:50%;" class="figure-img">
<figcaption>
Biological Neurons vs.&nbsp;Artificial Neural Network
</figcaption>
</figure>
<p>Deep learning draws inspiration from human brain’s neural network. The concept of neural network isn’t new; it dates back to 1957 with the creation of the first neural network. The fundamental ideas remain the same today, but advances in hardware and data availability have significantly propelled the field forward.</p>
</section>
<section id="the-sofware-pytorch-fastai-and-jupyter" class="level2">
<h2 class="anchored" data-anchor-id="the-sofware-pytorch-fastai-and-jupyter">The Sofware: Pytorch, Fastai, and Jupyter</h2>
<p>At fastai, after extensive testing of various machine learning packages and languages, they decided to adopt Pytorch in 2017 for their course, software development, and research. Pytorch has become the fastest-growing deep learning library and is widely used in academic research and industry. Its flexibiligy and expressiveness make it an excellent foundation for deep learning.</p>
<p>The fastai library builds on top of Pytorch, provide high-level functionality for deep learning. This layered architecture allows for a seemless learning experience, make it easier to understand both high-level concepts and low-level operations.</p>
<p>However, the specific software you use a less important than understanding the core principles and techniques of deep learning. Learning to trasition between the libraries is relatively quick, but mastering deep learning foundation is crucial.</p>
<p>Jupyter notebook, a powerful and reflexible tool for data science, will be our primary platform for experimentation. Its interation with fastai and Pytorch makes it ideal for developing and testing deep learning model.</p>
<p>Ready to see it in action? Let’s train our first model!</p>
</section>
<section id="exploring-the-is-it-a-bird-classifier" class="level2">
<h2 class="anchored" data-anchor-id="exploring-the-is-it-a-bird-classifier">Exploring the “Is it a Bird?” Classifier</h2>
<p>One of the most exciting part of Lesson 1 was building our own image classifier to determine whether the a given image contains a bird. For this project, we used the fastai libray along with pre-trained model to quickly and efficiently create our classifier. Let’s dive into the code walkthrouh.</p>
<p>The basic steps we’ll need to do:</p>
<ol type="1">
<li>Use DuckDuckGo for search images of “bird photos”</li>
<li>Use DuckDuckGo to search for images of “forest photos”</li>
<li>Fine-tune a pretrained neural network to recognise these two groups</li>
<li>Try running this model on a picture of bird and see if it works.</li>
</ol>
<section id="searching-for-images-duckduckgo-search" class="level3">
<h3 class="anchored" data-anchor-id="searching-for-images-duckduckgo-search">Searching for images: DuckDuckGo Search</h3>
<p>Instead of using a big search that reqires an API key, we opted to DuckDuckGo, which doesn’t reqire an API key for image searches. This make the setup simpler and faster.</p>
<p>But make sure you run this command in your terminal before run the code to update duckduckgo</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Uqq</span> fastai duckduckgo_search</span></code></pre></div>
<div id="cell-9" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> duckduckgo_search <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DDGS</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">ddgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DDGS()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> search_images(term, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb2-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Searching for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>term<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> L(ddgs.images(keywords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>term, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_images)).itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>)</span></code></pre></div>
</div>
<div id="cell-10" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-2">urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'bird photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>'https://images.pexels.com/photos/326900/pexels-photo-326900.jpeg?cs=srgb&amp;dl=wood-flight-bird-326900.jpg&amp;fm=jpg'</code></pre>
</div>
</div>
<p>Jeremy Howard mentioned that using <code>import *</code> in Jupyter notebooks is not the big deal because Jupyter only import what we use. This approach simplifies the code and keeps it clean.</p>
<p>Here’s the quick explaination of the functions and libraries used in this snippet:</p>
<ol type="1">
<li><code>DDGS</code> from <code>duckduckgo_search</code>:
<ul>
<li><code>duckduckgo_search</code>: This library allows us to search for iamges using DuckDuckGo without the need for an API key.</li>
<li><code>DDGS</code>: This class handles the image search functionality within DuckDuckGo.</li>
</ul></li>
<li><code>fastcore</code>:
<ul>
<li><code>fastcore</code>: A foundational library that provide utilities and functions making Python code more concise and expressive.</li>
</ul></li>
<li><code>L</code>:
<ul>
<li><code>L</code>: A specialized list class provided by <code>fastcore</code> that extends Python’s built-in list with additional functionality, make it more powerfull and convinient.</li>
</ul></li>
</ol>
<p>In our example, <code>search_images</code> is a function that performs an image search using DuckDuckGo. It’s print out the search term being used and return a list of images URLs retrieved from the search results.</p>
<p>for more details on the tools, you can refer to the <a href="https://fastcore.fast.ai/">fastcore documentation</a> and the <a href="https://pypi.org/project/duckduckgo-search/">duckduckgo_search documentation</a>.</p>
<div id="cell-12" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_url</span>
<span id="cb6-2">dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird.jpg'</span></span>
<span id="cb6-3">download_url(urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb6-6">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dest)</span>
<span id="cb6-7">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<figure class="figure">
<p><img src="https://buidai123.github.io/blog/posts/2024-06-30-your-deep-learning-journey/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ol type="1">
<li><code>fastdownload</code> and <code>download_url</code>:
<ul>
<li><code>fastdownload</code>: This is a library that helps with downloading files and dataset easily.</li>
<li><code>download_url</code>: A function from <code>fastdownload</code> that download a file from a URL. In our example, it downloads an image and saves it as a <code>bird.jpg</code></li>
</ul></li>
<li><code>fastai.vision.all</code>:
<ul>
<li>This module from fastai library provides all the necessary tools for vision task, including data loaders, transformation functions, and model architectures.</li>
</ul></li>
<li><code>to_thumb</code>:
<ul>
<li>A method from the <code>PIL.Image</code> class, which is quite handy. It resizes an image to a thumbnail while mainting the espect rato. In this case it resizes the download image to a 256x256 thumbnail.</li>
</ul></li>
</ol>
<p>These libraries and function streamline the process of getting and preparing the images for our model. For more detailed documentation, you can refer to the <a href="https://fastdownload.fast.ai/">fastdownload</a>, <a href="https://docs.fast.ai/tutorial.vision.html">fastai vision</a>, and <a href="https://pillow.readthedocs.io/en/stable/">Pillow</a> documentation.</p>
<div id="cell-14" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">download_url(search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest.jpg'</span>, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-2">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'forest photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<figure class="figure">
<p><img src="https://buidai123.github.io/blog/posts/2024-06-30-your-deep-learning-journey/index_files/figure-html/cell-5-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">searches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird'</span></span>
<span id="cb9-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird_or_not'</span>)</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> searches:</span>
<span id="cb9-6">    dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb9-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-8">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> photo'</span>))</span>
<span id="cb9-9">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pause between searches to avoid over-loading server</span></span>
<span id="cb9-10">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sun photo'</span>))</span>
<span id="cb9-11">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-12">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> shade photo'</span>))</span>
<span id="cb9-13">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-14">    resize_images(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o, max_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'forest photo'
Searching for 'forest sun photo'
Searching for 'forest shade photo'
Searching for 'bird photo'
Searching for 'bird sun photo'
Searching for 'bird shade photo'</code></pre>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(get_image_files(path))</span>
<span id="cb11-2">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb11-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>0</code></pre>
</div>
</div>
<div id="cell-17" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb13-2">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock), </span>
<span id="cb13-3">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files, </span>
<span id="cb13-4">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb13-5">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb13-6">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb13-7">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb13-8">    </span>
<span id="cb13-9">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://buidai123.github.io/blog/posts/2024-06-30-your-deep-learning-journey/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-18" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb14-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth
100%|██████████| 44.7M/44.7M [00:00&lt;00:00, 112MB/s] </code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.961129</td>
<td>0.898895</td>
<td>0.411765</td>
<td>00:11</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.175680</td>
<td>0.112270</td>
<td>0.029412</td>
<td>00:15</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.097206</td>
<td>0.023054</td>
<td>0.000000</td>
<td>00:14</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.067422</td>
<td>0.008220</td>
<td>0.000000</td>
<td>00:14</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">is_bird,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird.jpg'</span>))</span>
<span id="cb16-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_bird<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb16-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a bird: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: bird.
Probability it's a bird: 1.0000</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>blogging</category>
  <category>fastai</category>
  <guid>https://buidai123.github.io/blog/posts/2024-06-30-your-deep-learning-journey/</guid>
  <pubDate>Sat, 29 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://buidai123.github.io/blog/posts/2024-06-30-your-deep-learning-journey/xkcd.png" medium="image" type="image/png" height="127" width="144"/>
</item>
</channel>
</rss>
